package com.szchoiceway.eventcenter;

import android.app.ActivityManager;
import android.app.AlarmManager;
import android.app.Instrumentation;
import android.app.Service;
import android.bluetooth.BluetoothAdapter;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.res.AssetManager;
import android.content.res.Configuration;
import android.database.ContentObserver;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.drawable.AnimationDrawable;
import android.hardware.input.InputManager;
import android.location.Criteria;
import android.location.GpsSatellite;
import android.location.GpsStatus;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.media.AudioManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.os.PowerManager;
import android.os.RemoteException;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.UEventObserver;
import android.os.UserHandle;
import android.provider.Settings;
import android.serialport.Device;
import android.serialport.SerialPort;
import android.serialport.SerialPortManager;
import android.support.v4.media.session.PlaybackStateCompat;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.animation.DecelerateInterpolator;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import androidx.core.app.NotificationCompat;
import androidx.core.internal.view.SupportMenu;
import androidx.core.view.ViewCompat;
import com.android.internal.app.LocalePicker;
import com.android.internal.widget.PagerAdapter;
import com.android.internal.widget.ViewPager;
import com.example.mylibrary.BuildConfig;
import com.szchoiceway.camera.CameraService;
import com.szchoiceway.eventcenter.AccEvent.Utils;
import com.szchoiceway.eventcenter.AssistiveTouch.TopFloatService;
import com.szchoiceway.eventcenter.EventService;
import com.szchoiceway.eventcenter.EventUtils;
import com.szchoiceway.eventcenter.ICallbackfn;
import com.szchoiceway.eventcenter.ICameraCrashService;
import com.szchoiceway.eventcenter.IEventService;
import com.szchoiceway.eventcenter.SendDataToCan.SendDataToDazongCan;
import com.szchoiceway.eventcenter.SendDataToCan.SendDataToRichanCan;
import com.szchoiceway.eventcenter.View.CalibrationView;
import com.szchoiceway.eventcenter.View.DialogImportConfirm;
import com.szchoiceway.eventcenter.View.DialogReboot;
import com.szchoiceway.eventcenter.View.DialogRepairMcu;
import com.szchoiceway.eventcenter.View.LandRoverBottomView;
import com.szchoiceway.eventcenter.View.LandRoverCopilotBottomView;
import com.szchoiceway.eventcenter.View.MyClockView;
import com.szchoiceway.eventcenter.View.VerticalViewPager;
import com.szchoiceway.eventcenter.fattouchkey.TouchKeyStruct;
import com.szchoiceway.eventcenter.function.Function0;
import com.szchoiceway.eventcenter.lexus.LexusAirViewComponent;
import com.szchoiceway.eventcenter.listener.AirCmdUtil;
import com.szchoiceway.eventcenter.util.CheckUtil;
import com.szchoiceway.eventcenter.util.InputTouchManage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.lang.ref.WeakReference;
import java.nio.ByteBuffer;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Random;

public class EventService extends Service implements View.OnLongClickListener, View.OnClickListener, CalibrationView.CalibrationCallBack {
    private static final int CURRENT_TYPE_AUX = 3;
    private static final int CURRENT_TYPE_NULL = 0;
    private static final int CURRENT_TYPE_OFF_SCREEN = 2;
    private static final int CURRENT_TYPE_ORIGINAL = 1;
    private static final int EVT_CARCAHNGE_ROTE = 1542;
    public static final String EXTRA_APP_KEY_DIM = "VoiceKeyDIM";
    public static final String EXTRA_APP_KEY_MAINVOL = "VoiceKeyMAINVOL";
    public static final String EXTRA_APP_KEY_MUTE = "VoiceKeyMUTE";
    public static final String EXTRA_VOICE_KEY_WORD = "VoiceKeyWord";
    public static final String EXTRA_VOICE_PARAM = "VoiceParam";
    private static final int HANDLER_NOTIFY_BACKEVENT_END = 4163;
    private static final int HANDLER_RADAR_DATA = 4162;
    private static String LOGO_PATH = null;
    private static final int MSG_CHECK_ACTIVITY = 1024;
    private static final int MSG_GPS_INFO_REFRESH = 1006;
    private static final int SCRENN_DENSITY_1024_480 = 22;
    private static final int SCRENN_DENSITY_1024_600 = 5;
    private static final int SCRENN_DENSITY_1024_600_2 = 17;
    private static final int SCRENN_DENSITY_1024_768 = 1;
    private static final int SCRENN_DENSITY_1280_480 = 6;
    private static final int SCRENN_DENSITY_1280_720 = 12;
    private static final int SCRENN_DENSITY_1280_800 = 2;
    private static final int SCRENN_DENSITY_1366_768 = 3;
    private static final int SCRENN_DENSITY_1920_1080 = 4;
    private static final int SCRENN_DENSITY_1920_720_1 = 9;
    private static final int SCRENN_DENSITY_1920_720_2 = 10;
    private static final int SCRENN_DENSITY_1920_720_3 = 35;
    private static final int SCRENN_DENSITY_800_480 = 8;
    private static final int SCRENN_DENSITY_800_480_2 = 21;
    private static final int SCRENN_DENSITY_MIN = 0;
    public static final String SEND_APP_ACTION_EVT = "com.szchoiceway.SEND_APP_ACTION_EVT";
    protected static final String TAG = "EventService";
    public static final int WHAT_CAN_AIR_EVT = 4134;
    private static final int WHAT_CAN_DOOR_EVT = 4146;
    public static final int WHAT_HIDE_AIR_WND = 4132;
    private static final int WHAT_HIDE_BOTTOM_WND = 4178;
    private static final int WHAT_HIDE_DOOR_WND = 4145;
    private static final int WHAT_HIDE_FLOATING_BUTTON_WND = 4151;
    private static final int WHAT_HIDE_GESTURE_WND = 4137;
    private static final int WHAT_HIDE_MOUSE_WND = 4136;
    private static final int WHAT_HIDE_RADAR_WND = 4160;
    private static final int WHAT_HIDE_SPLIT_SCREEN_WND = 4147;
    private static final int WHAT_HIDE_VOLUME_WND = 4180;
    private static final int WHAT_SHOW_BOTTOM_WND = 4177;
    private static final int WHAT_SHOW_FLOATING_BUTTON_EVT = 4152;
    private static final int WHAT_SHOW_GESTURE_EVT = 4144;
    private static final int WHAT_SHOW_MOUSE_EVT = 4135;
    private static final int WHAT_SHOW_RADAR_EVT = 4161;
    private static final int WHAT_SHOW_SPLIT_SCREEN_EVT = 4148;
    private static final int WHAT_SHOW_VOLUME_WND = 4179;
    public static final String ZXW_TOUCH_LEARN_INFOR = "com.choiceway.FatUtils.ZXW_TOUCH_LEARN_INFOR";
    public static final String ZXW_TOUCH_LEARN_INFOR_EXTRA = "com.choiceway.FatUtils.ZXW_TOUCH_LEARN_INFOR_EXTRA";
    private static boolean bDashboardIsResume = false;
    /* access modifiers changed from: private */
    public static boolean bLauncherIsResume = true;
    /* access modifiers changed from: private */
    public static byte byGPSMode = 0;
    /* access modifiers changed from: private */
    public static String classNameOld = "";
    public static int iCantype = 1;
    /* access modifiers changed from: private */
    public static int iGPSGetLocation = 0;
    private static EventService instance = null;
    /* access modifiers changed from: private */
    public static boolean ismoving = false;
    private static final String ksw_backup_path = "/mnt/privdata1/";
    private static String ksw_cartype_xml_copy_filename = "CarType.xml";
    private static final String ksw_cartype_xml_m_NewPath = "/data/local/CarType.xml";
    private static String ksw_cartype_xml_m_OldPath = BuildConfig.FLAVOR;
    private static final String ksw_enable_360_path = "enable360.txt";
    /* access modifiers changed from: private */
    public static String ksw_factory_xml_copy_filename = "zxw_factory_config.xml";
    /* access modifiers changed from: private */
    public static String ksw_factory_xml_m_OldPath = BuildConfig.FLAVOR;
    /* access modifiers changed from: private */
    public static String ksw_lcd_xml_copy_filename = "zxw_lcd.xml";
    private static final String ksw_local_path = "/data/local/";
    /* access modifiers changed from: private */
    public static String ksw_logo_copy_filename = "logo.bmp";
    /* access modifiers changed from: private */
    public static String ksw_logo_copy_filename_animal = "bootanimation.zip";
    /* access modifiers changed from: private */
    public static String ksw_logo_copy_filename_animal_tmp = "bootanimation_tmp.zip";
    /* access modifiers changed from: private */
    public static String ksw_logo_m_OldPath = BuildConfig.FLAVOR;
    /* access modifiers changed from: private */
    public static String ksw_logo_m_OldPath_animal = BuildConfig.FLAVOR;
    private static String ksw_map_apk_list_copy_filename = "mapApkLst.txt";
    private static final String ksw_map_apk_list_data_local_path = "/data/local/mapApkLst.txt";
    private static String ksw_map_apk_list_m_OldPath = BuildConfig.FLAVOR;
    private static final String ksw_map_apk_list_system_app_path = "/system/app/mapApkLst.txt";
    private static final String ksw_media_path = "/sdcard/Media";
    private static final String ksw_odm_map_apk_list_system_app_path = "/odm/app/mapApkLst.txt";
    private static final String ksw_oem_map_apk_list_system_app_path = "/oem/app/mapApkLst.txt";
    private static final String ksw_pdf_path = "/sdcard/UserManual";
    private static final String ksw_product_map_apk_list_system_app_path = "/product/app/mapApkLst.txt";
    private static final String ksw_product_path = "/product/app/";
    /* access modifiers changed from: private */
    public static Context mAppContext = null;
    /* access modifiers changed from: private */
    public static DoorWndFrame mDoorWndView = null;
    private static View mFloatingButtonWndView = null;
    /* access modifiers changed from: private */
    public static View mFloatingMenuWndView = null;
    private static View mGestureWndView = null;
    /* access modifiers changed from: private */
    public static boolean mIsAddAirView = false;
    /* access modifiers changed from: private */
    public static boolean mIsAddDoorView = false;
    /* access modifiers changed from: private */
    public static boolean mIsAddFloatingButtonView = false;
    /* access modifiers changed from: private */
    public static boolean mIsAddFloatingMenuView = false;
    /* access modifiers changed from: private */
    public static boolean mIsAddGestureView = false;
    /* access modifiers changed from: private */
    public static boolean mIsAddMouseView = false;
    private static boolean mIsAddRadarView = false;
    /* access modifiers changed from: private */
    public static boolean mIsAddSplitScreenView = false;
    private static Object mObject = new Object();
    /* access modifiers changed from: private */
    public static RadarWndFrame mRadarWndView = null;
    public static boolean mScreen1280x480 = false;
    public static boolean mScreen1920x720 = false;
    public static boolean mScreen800x480 = false;
    private static View mSplitScreenWndView = null;
    public static boolean m_b_isGuoWai = false;
    /* access modifiers changed from: private */
    public static byte[] m_stBackRadarInfo = new byte[4];
    /* access modifiers changed from: private */
    public static byte[] m_stHeadRadarInfo = new byte[4];
    /* access modifiers changed from: private */
    public static byte mbyDoorData = 0;
    /* access modifiers changed from: private */
    public static byte mbyDoorDataOld = 0;
    /* access modifiers changed from: private */
    public static String packageNameOld = "";
    /* access modifiers changed from: private */
    public static WindowManager wm = null;
    private static WindowManager.LayoutParams wmAirWndParams = new WindowManager.LayoutParams();
    private static WindowManager.LayoutParams wmBottomWndParams = new WindowManager.LayoutParams();
    private static WindowManager.LayoutParams wmDoorWndParams = new WindowManager.LayoutParams();
    private static WindowManager.LayoutParams wmFloatingButtonWndParams = new WindowManager.LayoutParams();
    private static WindowManager.LayoutParams wmGestureWndParams = new WindowManager.LayoutParams();
    private static WindowManager.LayoutParams wmLRVolumeParams = new WindowManager.LayoutParams();
    private static WindowManager.LayoutParams wmMouseWndParams = new WindowManager.LayoutParams();
    private static WindowManager.LayoutParams wmRadarWndParams = new WindowManager.LayoutParams();
    private static WindowManager.LayoutParams wmSplitScreenWndParams = new WindowManager.LayoutParams();
    private boolean GetTouchKeyState = false;
    private ImageButton ImgBtnGyroView1 = null;
    protected boolean TMC_mbExitRecThread = false;
    protected SerialPort TMC_msp = null;
    private TextView TvWeatherCurTemp;
    final String UEVENTFILE = "DEVPATH=/devices/virtual/misc/zxw_io";
    /* access modifiers changed from: private */
    public boolean airTempChange = false;
    /* access modifiers changed from: private */
    public boolean airWindChange = false;
    /* access modifiers changed from: private */
    public int angle = 0;
    /* access modifiers changed from: private */
    public boolean angleRight = false;
    /* access modifiers changed from: private */
    public AudioManager audioManager;
    /* access modifiers changed from: private */
    public boolean bAccSleepEnable = false;
    private boolean bAfterArmUpgrade = true;
    private boolean bBackcarFullview = false;
    private boolean bBackcarRadar = true;
    private boolean bBackcarTrack = true;
    boolean bBtSpeak_Keydisable_KSW = false;
    /* access modifiers changed from: private */
    public boolean bCalibrateLong = false;
    private boolean bDabRunning = false;
    public boolean bGPSMix = true;
    /* access modifiers changed from: private */
    public boolean bGestureIsAdd = true;
    /* access modifiers changed from: private */
    public boolean bILLSignal = false;
    public boolean bInLeftFocus = false;
    /* access modifiers changed from: private */
    public boolean bIsAutoKit = false;
    private boolean bIsFirstBoot = true;
    private boolean bIsNavigating = false;
    public boolean bIsResetting = false;
    private boolean bIsShowVolumeBarFatSet = false;
    public boolean bLEDColorSetStatus = true;
    /* access modifiers changed from: private */
    public boolean bLetterResume = false;
    /* access modifiers changed from: private */
    public boolean bLoudOn;
    protected boolean bMcuInitComplete = false;
    public boolean bModeHome = false;
    /* access modifiers changed from: private */
    public boolean bModeNull = false;
    private boolean bMusicIsResume = false;
    /* access modifiers changed from: private */
    public boolean bMuteOn = false;
    private boolean bMuteStatus;
    private boolean bNaviIsResume = false;
    private boolean bOrgBackcar = false;
    /* access modifiers changed from: private */
    public boolean bResponseKey = true;
    private boolean bSwitchMirror = false;
    private boolean bSysKeyboardIsShow = false;
    public boolean bZlinkCarplayConnected = false;
    public boolean bZlinkCarplayMic = false;
    public boolean bZlinkCarplayPhoneOn = false;
    public boolean bZlinkCarplayResume = false;
    public boolean bZlinkHicarConnected = false;
    public boolean bZlinkHicarMic = false;
    public boolean bZlinkHicarPhoneOn = false;
    public boolean bZlinkHicarResume = false;
    /* access modifiers changed from: private */
    public boolean b_Conn_KSW = false;
    public boolean b_Original_View = false;
    boolean b_kesaiwei_bAutoPark = false;
    boolean b_kesaiwei_bPKey = false;
    /* access modifiers changed from: private */
    public boolean b_kesaiwei_bPark = false;
    private boolean b_kesaiwei_chk_Video_Driving_Ban = false;
    private boolean b_kesaiwei_chk_backcarMirror = false;
    private boolean b_kesaiwei_chk_frontMirror = false;
    private ServiceConnection btSc = new ServiceConnection() {
        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
            boolean unused = EventService.this.mBindBtService = true;
        }

        public void onServiceDisconnected(ComponentName componentName) {
            Log.d(EventService.TAG, "onServiceDisconnected btService");
            boolean unused = EventService.this.mBindBtService = false;
            EventService.this.bindBtService();
        }
    };
    private Button btnAirReturn;
    private ImageButton btnSetCityCode;
    private byte byFMZoneType = 0;
    public CameraUtil cameraUtil;
    public CameraUtilXYQ cameraUtilXYQ;
    /* access modifiers changed from: private */
    public int canGatherIndex = 0;
    /* access modifiers changed from: private */
    public String canGatherPath = BuildConfig.FLAVOR;
    /* access modifiers changed from: private */
    public boolean carplayAutoConnect = true;
    public String[] carplayPkgLst = {EventUtils.ZLINK_MODE_PACKAGE_NAME, EventUtils.HICAR_MODE_PACKAGE_NAME, EventUtils.CARLINK_MODE_PACKAGE_NAME};
    private CheckBox cbAirAc;
    private CheckBox cbAirFrontWin;
    private CheckBox cbAirLeftWindAuto;
    private CheckBox cbAirLeftWindDown;
    private CheckBox cbAirLeftWindParallel;
    private CheckBox cbAirLeftWindUp;
    private CheckBox cbAirRearWin;
    private CheckBox cbAirRightWindAuto;
    private CheckBox cbAirRightWindDown;
    private CheckBox cbAirRightWindParallel;
    private CheckBox cbAirRightWindUp;
    private CheckBox cbAirWindSpeedAuto;
    private CheckBox cbAirWindSpeedAutoLeft;
    private CheckBox cbAirWindSpeedAutoRight;
    private CheckBox cbAircirCulat;
    private CheckBox cbBtStatus;
    private CheckBox cbUsbStatus;
    private CheckBox cbWifiStatus;
    /* access modifiers changed from: private */
    public int checkCopyTime = 0;
    /* access modifiers changed from: private */
    public long checkLauncherInitTime = 0;
    public ConfigUtil configUtil;
    public ConfigUtil2 configUtil2;
    /* access modifiers changed from: private */
    public int consoleVersion_ID = 0;
    private int currentPage = 0;
    private int currentType = 0;
    /* access modifiers changed from: private */
    public DecelerateInterpolator decelerateInterpolator = new DecelerateInterpolator();
    public String decoderResolution = BuildConfig.FLAVOR;
    /* access modifiers changed from: private */
    public DialogImportConfirm dialogImportConfirm;
    public boolean disablingGoogle = false;
    /* access modifiers changed from: private */
    public boolean doorBack = false;
    /* access modifiers changed from: private */
    public boolean doorFront = false;
    /* access modifiers changed from: private */
    public boolean doorLeftBack = false;
    /* access modifiers changed from: private */
    public boolean doorLeftFront = false;
    /* access modifiers changed from: private */
    public boolean doorRightBack = false;
    /* access modifiers changed from: private */
    public boolean doorRightFront = false;
    private int executeLastTime = 0;
    /* access modifiers changed from: private */
    public long exitAuxTime = 0;
    private EventUtils.eSrcMode exitMode = EventUtils.eSrcMode.SRC_NONE;
    private long exitTime = 0;
    File file = new File("dev/zxw_io");
    private String file_gesture = "/data/system/gesture.key";
    private String file_locksettings_db = "/data/system/locksettings.db";
    private String file_locksettings_db_shm = "/data/system/locksettings.db-shm";
    private String file_locksettings_db_wal = "/data/system/locksettings.db-wal";
    private String file_password = "/data/system/password.key";
    private boolean flashWind = false;
    private Button floatButton = null;
    FileOutputStream fos = null;
    /* access modifiers changed from: private */
    public int g_byKeyVal = 0;
    /* access modifiers changed from: private */
    public int gearType = 0;
    /* access modifiers changed from: private */
    public boolean handshakeFinish = false;
    /* access modifiers changed from: private */
    public boolean handshakeSuccess = false;
    /* access modifiers changed from: private */
    public boolean hasEnterBackcar = false;
    /* access modifiers changed from: private */
    public boolean hasIgoDownVolume = false;
    /* access modifiers changed from: private */
    public boolean hasLauncherInit = false;
    /* access modifiers changed from: private */
    public boolean hasLauncherInit360 = false;
    private boolean hasRemoveAux = false;
    /* access modifiers changed from: private */
    public boolean hasSendBtStatus = false;
    private boolean haveSendNavVoice = false;
    private boolean hide360Dialog = false;
    /* access modifiers changed from: private */
    public int hideAirTime = 5000;
    private int hideBottomTime = 3000;
    /* access modifiers changed from: private */
    public byte iBALVal = 7;
    /* access modifiers changed from: private */
    public int iBackCarState_KSW = -1;
    private byte iBassFre = 1;
    /* access modifiers changed from: private */
    public byte iBassVal = 7;
    /* access modifiers changed from: private */
    public int iCAN_RECE_BUTTON_FLAG = 0;
    /* access modifiers changed from: private */
    public int iCanCar_button = 0;
    /* access modifiers changed from: private */
    public byte iEQMode = 0;
    /* access modifiers changed from: private */
    public byte iFADVal = 7;
    private int iFatSetDoorSetSelectIndex = 0;
    /* access modifiers changed from: private */
    public int iInterfaceStatus_KSW = -1;
    /* access modifiers changed from: private */
    public byte iMainVal = 15;
    /* access modifiers changed from: private */
    public int iMcanSignalState = 1;
    private byte iMiddleFre = 1;
    /* access modifiers changed from: private */
    public byte iMiddleVal = 7;
    private int iMouseMoveDirection = 4;
    public int iMouseMoveX = 0;
    public int iMouseMoveY = 0;
    /* access modifiers changed from: private */
    public int iReceive_key_time = 0;
    /* access modifiers changed from: private */
    public int iTouchX = 0;
    /* access modifiers changed from: private */
    public int iTouchY = 0;
    private byte iTrebleFre = 0;
    /* access modifiers changed from: private */
    public byte iTrebleVal = 7;
    private byte iUserBassVal = 7;
    private byte iUserMiddleVal = 7;
    private byte iUserTrebleVal = 7;
    int i_kesaiwei_Camera_Selection = 1;
    int i_kesaiwei_DVD_Selection = 0;
    int i_kesaiwei_DistanceUnit_Selection = 0;
    int i_kesaiwei_OilUnit_Selection = 0;
    int i_kesaiwei_SD_Host = 1;
    int i_kesaiwei_TempUnit_Selection = 0;
    int i_kesaiwei_language = 1;
    private int[] imageConverIdLst;
    private ImageView imagePointerChassis;
    private int[] imageRightBkIdLst;
    private View[] imageViewFocusList;
    private ImageView imgFlashWindSpeedLeft;
    private ImageView imgFlashWindSpeedRight;
    private int[] imgFocusList;
    private ImageView imgLevelTempLeft;
    private ImageView imgLevelTempRight;
    private ImageView imgLevelWindDirection;
    private ImageView imgLevelWindSpeedLeft;
    private ImageView imgLevelWindSpeedRight;
    /* access modifiers changed from: private */
    public boolean init360 = false;
    private boolean initSendVol = false;
    /* access modifiers changed from: private */
    public final Instrumentation inst = new Instrumentation();
    /* access modifiers changed from: private */
    public int interfaceStatus = -1;
    /* access modifiers changed from: private */
    public boolean isAirDataAllowed = false;
    /* access modifiers changed from: private */
    public boolean isAutoNavi = false;
    private boolean isCalibrationShown = false;
    private boolean isDvrMode = false;
    /* access modifiers changed from: private */
    public boolean isImportBackup = false;
    /* access modifiers changed from: private */
    public boolean isLetterConnect = false;
    /* access modifiers changed from: private */
    public boolean isLetterPlaying = false;
    /* access modifiers changed from: private */
    public boolean isModeKnown = false;
    private boolean isSleepThreadStarted = false;
    /* access modifiers changed from: private */
    public boolean isSystemUpgrade = false;
    /* access modifiers changed from: private */
    public boolean isThreadExit = false;
    /* access modifiers changed from: private */
    public boolean isUpdatingAnimation = false;
    /* access modifiers changed from: private */
    public boolean isUpdatingLogo = false;
    private int itvShunShiSuDu = 0;
    private ImageView ivCameraType;
    private ImageView ivMusicRightBk;
    /* access modifiers changed from: private */
    public ImageView ivPage0;
    /* access modifiers changed from: private */
    public ImageView ivPage1;
    /* access modifiers changed from: private */
    public ImageView ivPage2;
    private byte kesaiwei_m_iMode = -1;
    int[] ksw_i_classical_arr = {7, 1, 3};
    int[] ksw_i_dance_arr = {5, -1, 7};
    int[] ksw_i_jazz_arr = {1, 4, 4};
    int[] ksw_i_pop_arr = {4, -3, 4};
    int[] ksw_i_rock_arr = {3, -1, 5};
    int[] ksw_i_user_arr = {0, 0, 0};
    public boolean ksw_m_b_acc_off = false;
    /* access modifiers changed from: private */
    public boolean ksw_m_b_amap_auto_front = false;
    private boolean ksw_m_b_auto_btMusic = true;
    private boolean ksw_m_b_gps_have_sound = false;
    private boolean ksw_m_b_navi_sound = false;
    /* access modifiers changed from: private */
    public boolean ksw_m_b_sd_usb_cartype_xml_updating = false;
    private boolean ksw_m_b_stop_logo = true;
    private boolean ksw_m_b_txz_sound = false;
    int ksw_m_i_easyconn_state = 0;
    int ksw_m_i_eq_mode = 0;
    /* access modifiers changed from: private */
    public int lastStandByMode = 0;
    private ViewGroup layoutAirTemp;
    private ViewGroup layoutAirWind;
    /* access modifiers changed from: private */
    public boolean leftLight = false;
    private final CarletterInterface letterInstance = CarletterInterface.getInstance();
    /* access modifiers changed from: private */
    public boolean lexusAirViewAdded = false;
    /* access modifiers changed from: private */
    public JavaLazy<LexusAirViewComponent> lexusAirViewComponent = new JavaLazy<>(new Function0() {
        public final Object invoke() {
            return EventService.this.lambda$new$0$EventService();
        }
    });
    private final LocationListener locationListener = new LocationListener() {
        private float mLastGpsSpeed = 0.0f;

        public void onStatusChanged(String str, int i, Bundle bundle) {
            if (i == 2) {
                Log.d(EventService.TAG, "LocationProvider.AVAILABLE");
            } else if (i == 0) {
                Log.d(EventService.TAG, "LocationProvider.OUT_OF_SERVICE");
            } else if (i == 1) {
                Log.d(EventService.TAG, "LocationProvider.TEMPORARILY_UNAVAILABLE");
            }
        }

        public void onProviderEnabled(String str) {
            Log.d(EventService.TAG, "onProviderEnabled");
        }

        public void onProviderDisabled(String str) {
            Log.d(EventService.TAG, "onProviderDisabled");
        }

        public void onLocationChanged(Location location) {
            float speed = location.getSpeed() * 3.7f;
            if (this.mLastGpsSpeed != speed) {
                Intent intent = new Intent("com.szchoiceway.action.LocationChanged");
                intent.putExtra("Speed", speed);
                EventService.this.sendBroadcast(intent);
                this.mLastGpsSpeed = speed;
            }
            if (!EventService.this.mIsGPSGetLocation && EventService.this.mGpsSatelliteFix) {
                Date date = new Date(location.getTime());
                Log.i(EventService.TAG, "date.getYear() = " + date.getYear());
                EventService.access$23308();
                if (date.getYear() + 1990 >= 2015) {
                    if (EventService.this.m_iUITypeVer == 41 || EventService.this.m_iUITypeVer == 48 || EventService.this.m_iUITypeVer == 102) {
                        if (EventService.iGPSGetLocation > 8) {
                            try {
                                if (EventService.this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_USER_TIME_TYPE, 1) == 1 && date.getHours() != 8 && date.getMinutes() != 0) {
                                    long time = date.getTime();
                                    if (time / 1000 < 2147483647L) {
                                        SystemClock.setCurrentTimeMillis(time);
                                    }
                                    if (EventService.this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.CAN_DST_SET_KEY, false)) {
                                        Calendar instance = Calendar.getInstance();
                                        Log.i(EventService.TAG, "c.date.getHours() = " + instance.getTime().getHours());
                                        instance.set(11, instance.getTime().getHours() + 1);
                                        long timeInMillis = instance.getTimeInMillis();
                                        if (timeInMillis / 1000 < 2147483647L) {
                                            SystemClock.setCurrentTimeMillis(timeInMillis);
                                        }
                                    }
                                    boolean unused = EventService.this.mIsGPSGetLocation = true;
                                }
                            } catch (Exception e) {
                                Log.i(EventService.TAG, "onLocationChanged err: " + e.toString());
                            }
                        }
                    } else if (EventService.iGPSGetLocation > 18) {
                        try {
                            if (date.getHours() != 8 && date.getMinutes() != 0) {
                                long time2 = date.getTime();
                                if (time2 / 1000 < 2147483647L) {
                                    SystemClock.setCurrentTimeMillis(time2);
                                }
                                boolean unused2 = EventService.this.mIsGPSGetLocation = true;
                            }
                        } catch (Exception e2) {
                            Log.i(EventService.TAG, "onLocationChanged err: " + e2.toString());
                        }
                    }
                }
            }
        }
    };
    /* access modifiers changed from: private */
    public LocationManager locationManager = null;
    private int[] m4gLevelViews = {R.drawable.image_auto_4g_xinhao_0, R.drawable.image_auto_4g_xinhao_1, R.drawable.image_auto_4g_xinhao_2, R.drawable.image_auto_4g_xinhao_3, R.drawable.image_auto_4g_xinhao_4};
    private ICallbackfn mAUXCallbackfn = null;
    private AccObserver mAccObServer = new AccObserver() {
        /* access modifiers changed from: package-private */
        public void onAccEvent(int i) {
            Log.i(EventService.TAG, "onAccEvent " + i);
            if (EventService.this.m_iUITypeVer != 102) {
                boolean unused = EventService.this.isAutoNavi = false;
                int unused2 = EventService.this.mAccState = i;
                EventService.this.mEventHandler.post(new Runnable() {
                    public void run() {
                    }
                });
                if (EventService.this.bAccSleepEnable) {
                    EventService eventService = EventService.this;
                    eventService.m_iBTTypeVer = eventService.mSysProviderOpt.getRecordInteger(SysProviderOpt.SYS_BT_TYPE_KEY, 0);
                    if (i == 1) {
                        int i2 = Build.VERSION.SDK_INT;
                        EventService.this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_OPEN_SERIALPORT);
                        EventService.this.mEventHandler.sendEmptyMessage(EventUtils.KSW_HANDLER_OPEN_SERIALPORT);
                        EventService.this.stopSleepThread();
                        EventService.this.reloadParam();
                        EventService.this.sendConsoleVersion();
                        EventService.this.sendAUXAudio();
                        try {
                            Thread.sleep(100);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        EventService.this.sendMode(EventUtils.eSrcMode.SRC_NULL, true);
                        int i3 = Build.VERSION.SDK_INT;
                        EventUtils.killProcess("com.google.android.gms");
                        EventService.this.m_EvtApp.getAccRevManager().doAcc(1);
                        Log.d(EventService.TAG, "start runnable 1");
                        EventService.this.mEventHandler.post(new Runnable() {
                            public void run() {
                                EventService.this.setSysStandyMode(false);
                                EventService.this.mEventHandler.removeMessages(290);
                                EventService.this.mEventHandler.sendEmptyMessageDelayed(290, 10000);
                                EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_CUR_TOPACTIVITY_REFRESH);
                                EventService.this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_CUR_TOPACTIVITY_REFRESH, 6000);
                                if (EventService.this.m_iUITypeVer == 101) {
                                    GPSMonitor unused = EventService.this.mGPSMonitor = new GPSMonitor(EventService.this);
                                    EventService.this.mEventHandler.removeMessages(1006);
                                    EventService.this.mEventHandler.sendEmptyMessageDelayed(1006, 2000);
                                }
                            }
                        });
                        Log.d(EventService.TAG, "start runnable 2");
                        boolean unused3 = EventService.this.mAccOpenState = true;
                        EventService.this.mEventHandler.sendEmptyMessageDelayed(EventUtils.ACC_CHANGE_EVENT, 5000);
                        EventService.this.setSysAudioManager();
                        EventService.this.mEventHandler.sendEmptyMessageDelayed(267, 1000);
                        EventService eventService2 = EventService.this;
                        int unused4 = eventService2.consoleVersion_ID = eventService2.mSysProviderOpt.getRecordInteger(SysProviderOpt.SET_CONSOLE_VERSION_INDEX, 0);
                        if (EventService.this.consoleVersion_ID == 0) {
                            CameraService.set6806Channel("15");
                        } else if (EventService.this.consoleVersion_ID == 1) {
                            CameraService.set6806Channel("14");
                        } else if (EventService.this.consoleVersion_ID == 2) {
                            CameraService.set6806Channel("15");
                        } else if (EventService.this.consoleVersion_ID == 3) {
                            CameraService.set6806Channel("14");
                        } else {
                            CameraService.set6806Channel("15");
                        }
                        EventService.this.startServices();
                        return;
                    }
                    try {
                        if (Build.VERSION.SDK_INT != 31) {
                            SystemProperties.set("ctl.stop", "zlink5");
                        }
                    } catch (Exception e2) {
                        e2.printStackTrace();
                    }
                    CameraService.set6806Channel("13");
                    EvtModel.startCarPlayService(EventService.this, false);
                    EventService eventService3 = EventService.this;
                    String unused5 = eventService3.mDefaultInputMethod = Settings.Secure.getString(eventService3.getContentResolver(), "default_input_method");
                    EventService.this.mSysProviderOpt.updateRecord(SysProviderOpt.SYS_INPUT_METHOD, EventService.this.mDefaultInputMethod);
                    Log.d(EventService.TAG, "mDefaultInputMethod" + EventService.this.mDefaultInputMethod);
                    EventService.this.mWifiState = ((WifiManager) EventService.this.getSystemService("wifi")).getWifiState();
                    SysProviderOpt sysProviderOpt = EventService.this.mSysProviderOpt;
                    sysProviderOpt.updateRecord(SysProviderOpt.SYS_WIFI_STATE, BuildConfig.FLAVOR + EventService.this.mWifiState);
                    EventService.this.sendAccSleepStatusBroadcast(0);
                    EventService.this.mEventHandler.removeMessages(EventUtils.ACC_CHANGE_EVENT);
                    EventService.this.sendBroadcastAsUser(new Intent(EventUtils.EVENT_DISCONNECT_BT), UserHandle.CURRENT);
                    EventService.this.mEventHandler.post(new Runnable() {
                        public void run() {
                            EventService.this.mEventHandler.removeMessages(290);
                            EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_CUR_TOPACTIVITY_REFRESH);
                            int unused = EventService.this.lastStandByMode = EventService.this.mValidMode.getIntValue();
                            EventService.this.notifyValidModeEvt(4097, 1, EventUtils.eSrcMode.SRC_IDLE_MODE.getIntValue(), (byte[]) null, (String) null);
                            EventService.this.androidHome();
                            EventService.this.setSysStandyMode(true);
                            if (EventService.this.m_iUITypeVer == 101) {
                                EventService.this.mEventHandler.removeMessages(EventService.WHAT_HIDE_DOOR_WND);
                                EventService.this.mEventHandler.sendEmptyMessageDelayed(EventService.WHAT_HIDE_DOOR_WND, 10);
                                EventService.this.mEventHandler.removeMessages(1006);
                                if (EventService.this.mGPSMonitor != null) {
                                    EventService.this.mGPSMonitor.releaseGPSResource();
                                    GPSMonitor unused2 = EventService.this.mGPSMonitor = null;
                                }
                            }
                        }
                    });
                    EventService.this.PowerOff(true);
                    EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_RUN_LAST_MODE);
                    try {
                        Runtime.getRuntime().exec("sync\n");
                        Thread.sleep(1000);
                    } catch (Exception e3) {
                        e3.printStackTrace();
                    }
                    EventService.this.sendBTState((byte) 0);
                    EventService.this.m_EvtApp.getAccRevManager().doAcc(0);
                    EventService.this.closeSerialPort();
                    EventService.this.startSleepThread();
                    boolean unused6 = EventService.this.mAppBackcarEnable = true;
                    boolean unused7 = EventService.this.isAirDataAllowed = false;
                    EventService.this.mEventHandler.removeMessages(267);
                    boolean unused8 = EventService.this.mAccOpenState = false;
                    EventService.this.stopReceiveThread();
                }
            }
        }

        /* access modifiers changed from: package-private */
        public void onBackcarEvent(int i) {
            if (EventService.this.mAccOpenState) {
                Log.i(EventService.TAG, "onBackcarEvent: backcarState = " + i);
                if (EventService.this.mBackcarState != i) {
                    int unused = EventService.this.mBackcarState = i;
                    if (EventService.this.m_iUITypeVer == 102) {
                        String recordValue = EventService.this.mSysProviderOpt.getRecordValue("Sys_ReverseSet", "AHD");
                        String recordValue2 = EventService.this.mSysProviderOpt.getRecordValue("Sys_FCAMDisplayTime", "0s");
                        Intent intent = new Intent("com.szchoiceway.action.reverse_state");
                        if (i == 0) {
                            Log.i(EventService.TAG, "onBackcarEvent: start backcar...");
                            intent.putExtra(EventUtils.ZXW_ACTION_LIGHT_EXTRA, 1);
                            EventService.this.sendBroadcast(intent);
                            SystemClock.sleep(300);
                            if ("HDMI IN".equals(recordValue)) {
                                EventUtils.startActivityIfNotRuning(EventService.this, "com.szchoiceway.auxplayer", "com.szchoiceway.auxplayer.MainActivity_HDMI");
                            } else {
                                EventUtils.startActivityIfNotRuning(EventService.this, "com.szchoiceway.auxplayer", "com.szchoiceway.auxplayer.MainActivity_Camera2");
                            }
                        } else {
                            Log.i(EventService.TAG, "onBackcarEvent: stop backcar...");
                            intent.putExtra(EventUtils.ZXW_ACTION_LIGHT_EXTRA, 0);
                            EventService.this.sendBroadcast(intent);
                            if (!"0s".equals(recordValue2)) {
                                SystemClock.sleep(300);
                                int parseInt = Integer.parseInt(recordValue2.replace("s", BuildConfig.FLAVOR));
                                Log.i(EventService.TAG, "onBackcarEvent: time = " + parseInt);
                                EventUtils.startActivityIfNotRuning(EventService.this, "com.szchoiceway.auxplayer", "com.szchoiceway.auxplayer.MainActivity_Camera1");
                                EventService.this.mEventHandler.removeMessages(1234);
                                EventService.this.mEventHandler.sendEmptyMessageDelayed(1234, (long) (parseInt * 1000));
                            }
                        }
                    }
                }
            }
        }
    };
    /* access modifiers changed from: private */
    public boolean mAccOpenState = true;
    /* access modifiers changed from: private */
    public int mAccState;
    private boolean mAccStatus = true;
    private View mAirWndView = null;
    private int[] mAmapautoIConLst;
    private ImageView mAmapauto_icon;
    private boolean mAmbientLight = false;
    /* access modifiers changed from: private */
    public boolean mAppBackcarEnable = false;
    public AudioManager mAudioMgr;
    private AvmEvent mAvmEvent = null;
    /* access modifiers changed from: private */
    public byte[] mAxisAttitudeData;
    private boolean mBInAvmMode = true;
    public int mBackCar6752Type = 1;
    private boolean mBackCarWhenOffScreen = false;
    /* access modifiers changed from: private */
    public boolean mBackcarConnected = false;
    private BackcarEvent mBackcarEvt = null;
    public BackcarEventHw mBackcarEvtHw = null;
    /* access modifiers changed from: private */
    public int mBackcarState = 1;
    /* access modifiers changed from: private */
    public boolean mBindBtService = false;
    private final IBinder mBinder = new ServiceStub(this);
    /* access modifiers changed from: private */
    public boolean mBreakConnected = true;
    private ImageButton mBtnNext;
    private ImageButton mBtnPlayPause;
    private ImageButton mBtnPrev;
    private ImageView mBtnRecentTask0;
    private ImageView mBtnRecentTask1;
    private ImageView mBtnRecentTask2;
    private CalibrationView mCalibrationView;
    ICameraCrashService mCameraService = null;
    public CarAirStruct mCarAirStruct = new CarAirStruct();
    private ICallbackfn mCarMediaCallbackfn = null;
    public CarPlaySocketServer mCarPlaySocketServer;
    public int mCarplayAudioFocus;
    /* access modifiers changed from: private */
    public boolean mCenterCameraAV2 = false;
    private CheckBox mCkbCarAutoStatus;
    public int mConnectMode = 0;
    public int mConnectState = 0;
    private String mCountry;
    private boolean mCurTopActivityChange;
    public String mCurTopClassName = BuildConfig.FLAVOR;
    public String mCurTopPackageName = BuildConfig.FLAVOR;
    /* access modifiers changed from: private */
    public int mCurrCameraIndex = 0;
    public EventUtils.eSrcMode mCurrSendMode = EventUtils.eSrcMode.SRC_NONE;
    private ICallbackfn mDashBoardCallbackfn = null;
    /* access modifiers changed from: private */
    public int mDashBoardIndex = 0;
    private SendDataToDazongCan mDazongCanModel = null;
    /* access modifiers changed from: private */
    public String mDefaultInputMethod = null;
    public DialogRepairMcu mDialogRepairMcu = null;
    /* access modifiers changed from: private */
    public boolean mDiscInCard = false;
    /* access modifiers changed from: private */
    public boolean mDiscInDVD = true;
    private boolean mDiscInDVDPort = false;
    private SharedPreferences.Editor mEditor = null;
    public Handler mEventHandler = new Handler() {
        private int downX = 0;
        private int downY = 0;

        /* JADX INFO: finally extract failed */
        /* JADX WARNING: Code restructure failed: missing block: B:626:0x1345, code lost:
            if (com.szchoiceway.eventcenter.EventService.access$14100(r1.this$0) != 1) goto L_0x1347;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:632:0x1358, code lost:
            if (com.szchoiceway.eventcenter.EventService.access$14100(r1.this$0) != 2) goto L_0x135a;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:637:0x136a, code lost:
            if (com.szchoiceway.eventcenter.EventService.access$14100(r1.this$0) != 3) goto L_0x136c;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:698:0x14ca, code lost:
            if (com.szchoiceway.eventcenter.EventService.access$14100(r1.this$0) != 1) goto L_0x14cc;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:704:0x14dd, code lost:
            if (com.szchoiceway.eventcenter.EventService.access$14100(r1.this$0) != 2) goto L_0x14df;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:709:0x14ef, code lost:
            if (com.szchoiceway.eventcenter.EventService.access$14100(r1.this$0) != 3) goto L_0x14f1;
         */
        /* JADX WARNING: No exception handlers in catch block: Catch:{  } */
        /* JADX WARNING: Removed duplicated region for block: B:361:0x0b9a A[Catch:{ Exception -> 0x0bbb }] */
        /* JADX WARNING: Removed duplicated region for block: B:362:0x0ba6 A[Catch:{ Exception -> 0x0bbb }] */
        /* JADX WARNING: Removed duplicated region for block: B:656:0x13a4 A[Catch:{ all -> 0x1047, Exception -> 0x179b }] */
        /* JADX WARNING: Removed duplicated region for block: B:728:0x1529 A[Catch:{ all -> 0x1047, Exception -> 0x179b }] */
        /* JADX WARNING: Removed duplicated region for block: B:949:? A[RETURN, SYNTHETIC] */
        /* JADX WARNING: Removed duplicated region for block: B:959:? A[RETURN, SYNTHETIC] */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void handleMessage(android.os.Message r20) {
            /*
                r19 = this;
                r1 = r19
                r2 = r20
                int r3 = r2.what     // Catch:{ Exception -> 0x179b }
                r4 = 405(0x195, float:5.68E-43)
                r5 = 2
                r6 = 0
                if (r3 == r4) goto L_0x177d
                r4 = 406(0x196, float:5.69E-43)
                r7 = 1
                if (r3 == r4) goto L_0x1777
                r4 = 1234(0x4d2, float:1.729E-42)
                if (r3 == r4) goto L_0x1765
                r4 = 1235(0x4d3, float:1.73E-42)
                r8 = 3
                if (r3 == r4) goto L_0x1755
                r9 = 2573(0xa0d, float:3.606E-42)
                if (r3 == r9) goto L_0x1712
                r9 = 41
                r10 = 2574(0xa0e, float:3.607E-42)
                r11 = 1000(0x3e8, double:4.94E-321)
                if (r3 == r10) goto L_0x16ce
                r15 = 2584(0xa18, float:3.621E-42)
                if (r3 == r15) goto L_0x16af
                r15 = 2585(0xa19, float:3.622E-42)
                if (r3 == r15) goto L_0x169f
                r10 = 5
                r15 = 4
                r13 = 8
                switch(r3) {
                    case 3: goto L_0x1684;
                    case 232: goto L_0x1655;
                    case 237: goto L_0x1612;
                    case 240: goto L_0x1605;
                    case 254: goto L_0x15f3;
                    case 255: goto L_0x15da;
                    case 256: goto L_0x15cc;
                    case 257: goto L_0x1595;
                    case 258: goto L_0x156f;
                    case 259: goto L_0x154b;
                    case 260: goto L_0x140f;
                    case 261: goto L_0x13f6;
                    case 262: goto L_0x13ea;
                    case 263: goto L_0x13c6;
                    case 264: goto L_0x128a;
                    case 265: goto L_0x1215;
                    case 266: goto L_0x11fd;
                    case 267: goto L_0x11e2;
                    case 290: goto L_0x11ce;
                    case 300: goto L_0x11be;
                    case 1006: goto L_0x11ab;
                    case 1024: goto L_0x105d;
                    case 1244: goto L_0x104b;
                    case 1246: goto L_0x1637;
                    case 1542: goto L_0x0ea8;
                    case 2571: goto L_0x0ea1;
                    case 2588: goto L_0x0e93;
                    case 2589: goto L_0x0e87;
                    case 2590: goto L_0x0e80;
                    case 2591: goto L_0x0e31;
                    case 2592: goto L_0x0df5;
                    case 2593: goto L_0x0de5;
                    case 2594: goto L_0x0dd5;
                    case 3000: goto L_0x0dce;
                    case 3003: goto L_0x0dc7;
                    case 3004: goto L_0x0d9b;
                    case 3005: goto L_0x0d94;
                    case 3006: goto L_0x0d8d;
                    case 3007: goto L_0x0d86;
                    case 3008: goto L_0x0d7b;
                    case 3009: goto L_0x0d68;
                    case 3010: goto L_0x0d4a;
                    case 3011: goto L_0x0d31;
                    case 3012: goto L_0x0c9f;
                    case 3013: goto L_0x0c98;
                    case 3014: goto L_0x0c6a;
                    case 3015: goto L_0x0c63;
                    case 3016: goto L_0x0c5c;
                    case 3017: goto L_0x0c33;
                    case 3018: goto L_0x0bc7;
                    case 3019: goto L_0x0b13;
                    case 3020: goto L_0x0b05;
                    case 3021: goto L_0x0aba;
                    case 3022: goto L_0x0a74;
                    case 3033: goto L_0x0a55;
                    case 3034: goto L_0x0a17;
                    case 4106: goto L_0x097f;
                    case 4110: goto L_0x093b;
                    case 4132: goto L_0x0920;
                    case 4134: goto L_0x08d3;
                    case 4135: goto L_0x08b3;
                    case 4136: goto L_0x08a9;
                    case 4137: goto L_0x08a1;
                    case 4144: goto L_0x083b;
                    case 4145: goto L_0x0833;
                    case 4146: goto L_0x07cb;
                    case 4147: goto L_0x07c3;
                    case 4148: goto L_0x07b3;
                    case 4151: goto L_0x0797;
                    case 4152: goto L_0x0790;
                    case 4160: goto L_0x078b;
                    case 4161: goto L_0x0784;
                    case 4162: goto L_0x073f;
                    case 4163: goto L_0x0738;
                    case 4177: goto L_0x0729;
                    case 4178: goto L_0x071a;
                    case 4179: goto L_0x0707;
                    case 4180: goto L_0x0700;
                    case 10001: goto L_0x06f2;
                    default: goto L_0x0035;
                }     // Catch:{ Exception -> 0x179b }
            L_0x0035:
                r14 = 2568(0xa08, float:3.599E-42)
                switch(r3) {
                    case 247: goto L_0x06e3;
                    case 248: goto L_0x06ca;
                    case 249: goto L_0x0616;
                    case 250: goto L_0x05ef;
                    case 251: goto L_0x05d1;
                    case 252: goto L_0x0415;
                    default: goto L_0x003a;
                }     // Catch:{ Exception -> 0x179b }
            L_0x003a:
                switch(r3) {
                    case 269: goto L_0x03bc;
                    case 270: goto L_0x03b5;
                    case 271: goto L_0x03a7;
                    default: goto L_0x003d;
                }     // Catch:{ Exception -> 0x179b }
            L_0x003d:
                switch(r3) {
                    case 273: goto L_0x03a0;
                    case 274: goto L_0x0399;
                    case 275: goto L_0x0392;
                    case 276: goto L_0x038b;
                    case 277: goto L_0x037d;
                    case 278: goto L_0x036f;
                    case 279: goto L_0x0361;
                    case 280: goto L_0x06bd;
                    default: goto L_0x0040;
                }     // Catch:{ Exception -> 0x179b }
            L_0x0040:
                switch(r3) {
                    case 2567: goto L_0x0307;
                    case 2568: goto L_0x02e6;
                    case 2569: goto L_0x02df;
                    default: goto L_0x0043;
                }     // Catch:{ Exception -> 0x179b }
            L_0x0043:
                switch(r3) {
                    case 2576: goto L_0x02ca;
                    case 2577: goto L_0x0282;
                    case 2578: goto L_0x006e;
                    case 2579: goto L_0x0067;
                    case 2580: goto L_0x0060;
                    case 2581: goto L_0x0051;
                    case 2582: goto L_0x0048;
                    default: goto L_0x0046;
                }     // Catch:{ Exception -> 0x179b }
            L_0x0046:
                goto L_0x17a6
            L_0x0048:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3 = 9
                r2.SetVideoCH(r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0051:
                java.lang.Thread r2 = new java.lang.Thread     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService$7$1 r3 = new com.szchoiceway.eventcenter.EventService$7$1     // Catch:{ Exception -> 0x179b }
                r3.<init>()     // Catch:{ Exception -> 0x179b }
                r2.<init>(r3)     // Catch:{ Exception -> 0x179b }
                r2.start()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0060:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.showMouseView()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0067:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.hideMouseView()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x006e:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Context r2 = r2.getApplicationContext()     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = com.szchoiceway.eventcenter.EventUtils.getTopPackageName(r2)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Context r3 = r3.getApplicationContext()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils.getTopActivityName(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = r3.oldPackageName     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x0277
                if (r2 == 0) goto L_0x0277
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = r3.oldPackageName     // Catch:{ Exception -> 0x179b }
                boolean r3 = r3.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r3 != 0) goto L_0x0277
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.lang.String unused = r3.oldPackageName = r2     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "com.szchoiceway"
                boolean r3 = r2.startsWith(r3)     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x0146
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r3.bModeNull = r6     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "com.szchoiceway.musicplayer"
                boolean r3 = r3.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x00d9
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r3 = r3.getValidMode()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC     // Catch:{ Exception -> 0x179b }
                int r4 = r4.getIntValue()     // Catch:{ Exception -> 0x179b }
                if (r3 == r4) goto L_0x00d0
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC     // Catch:{ Exception -> 0x179b }
                int r4 = r4.getIntValue()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.ICallbackfn$Stub r5 = r5.mModeCallback     // Catch:{ Exception -> 0x179b }
                r3.setCurModeCallback(r4, r5)     // Catch:{ Exception -> 0x179b }
            L_0x00d0:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC     // Catch:{ Exception -> 0x179b }
                r3.sendKSW_0x00_0x67(r4, r6)     // Catch:{ Exception -> 0x179b }
                goto L_0x0264
            L_0x00d9:
                java.lang.String r3 = "com.szchoiceway.videoplayer"
                boolean r3 = r3.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x0109
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r3 = r3.getValidMode()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOVIE     // Catch:{ Exception -> 0x179b }
                int r4 = r4.getIntValue()     // Catch:{ Exception -> 0x179b }
                if (r3 == r4) goto L_0x0100
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOVIE     // Catch:{ Exception -> 0x179b }
                int r4 = r4.getIntValue()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.ICallbackfn$Stub r5 = r5.mModeCallback     // Catch:{ Exception -> 0x179b }
                r3.setCurModeCallback(r4, r5)     // Catch:{ Exception -> 0x179b }
            L_0x0100:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOVIE     // Catch:{ Exception -> 0x179b }
                r3.sendKSW_0x00_0x67(r4, r6)     // Catch:{ Exception -> 0x179b }
                goto L_0x0264
            L_0x0109:
                java.lang.String r3 = "com.szchoiceway.btsuite"
                boolean r3 = r3.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x0264
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r3 = r3.mZlinLinkMode     // Catch:{ Exception -> 0x179b }
                if (r3 != r10) goto L_0x011e
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r4 = 127(0x7f, float:1.78E-43)
                com.szchoiceway.eventcenter.EventUtils.sendZlinkKeyCode(r3, r4)     // Catch:{ Exception -> 0x179b }
            L_0x011e:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r3 = r3.getValidMode()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BT     // Catch:{ Exception -> 0x179b }
                int r4 = r4.getIntValue()     // Catch:{ Exception -> 0x179b }
                if (r3 == r4) goto L_0x013d
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BT     // Catch:{ Exception -> 0x179b }
                int r4 = r4.getIntValue()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.ICallbackfn$Stub r5 = r5.mModeCallback     // Catch:{ Exception -> 0x179b }
                r3.setCurModeCallback(r4, r5)     // Catch:{ Exception -> 0x179b }
            L_0x013d:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BT     // Catch:{ Exception -> 0x179b }
                r3.sendKSW_0x00_0x67(r4, r6)     // Catch:{ Exception -> 0x179b }
                goto L_0x0264
            L_0x0146:
                java.lang.String r3 = "com.txznet.music"
                boolean r3 = r2.equals(r3)     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x0161
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_TXZ_MUSIC     // Catch:{ Exception -> 0x179b }
                int r4 = r4.getIntValue()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.ICallbackfn$Stub r5 = r5.mModeCallback     // Catch:{ Exception -> 0x179b }
                r3.setCurModeCallback(r4, r5)     // Catch:{ Exception -> 0x179b }
                goto L_0x0264
            L_0x0161:
                java.lang.String r3 = "com.txznet.webchat"
                boolean r3 = r2.equals(r3)     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x017c
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_TXZ_WEBCHAT     // Catch:{ Exception -> 0x179b }
                int r4 = r4.getIntValue()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.ICallbackfn$Stub r5 = r5.mModeCallback     // Catch:{ Exception -> 0x179b }
                r3.setCurModeCallback(r4, r5)     // Catch:{ Exception -> 0x179b }
                goto L_0x0264
            L_0x017c:
                java.lang.String r3 = "com.android.browser"
                boolean r3 = r3.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x0197
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_EXPLORER     // Catch:{ Exception -> 0x179b }
                int r4 = r4.getIntValue()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.ICallbackfn$Stub r5 = r5.mModeCallback     // Catch:{ Exception -> 0x179b }
                r3.setCurModeCallback(r4, r5)     // Catch:{ Exception -> 0x179b }
                goto L_0x0264
            L_0x0197:
                java.lang.String r3 = "com.zjinnova.zlink"
                boolean r3 = r3.equals(r2)     // Catch:{ Exception -> 0x179b }
                r4 = 3017(0xbc9, float:4.228E-42)
                if (r3 != 0) goto L_0x0235
                java.lang.String r3 = "com.huawei.hicar"
                boolean r3 = r3.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r3 != 0) goto L_0x0235
                java.lang.String r3 = "com.ucarhu.carlink"
                boolean r3 = r3.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x01b3
                goto L_0x0235
            L_0x01b3:
                java.lang.String r3 = "net.easyconn"
                boolean r3 = r3.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x01ce
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOBILE_APP     // Catch:{ Exception -> 0x179b }
                int r4 = r4.getIntValue()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.ICallbackfn$Stub r5 = r5.mModeCallback     // Catch:{ Exception -> 0x179b }
                r3.setCurModeCallback(r4, r5)     // Catch:{ Exception -> 0x179b }
                goto L_0x0264
            L_0x01ce:
                java.lang.String r3 = "com.carletter.car"
                boolean r3 = r2.startsWith(r3)     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x0206
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = r3.mValidMode     // Catch:{ Exception -> 0x179b }
                int r3 = r3.getIntValue()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r5 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_CARPLAY     // Catch:{ Exception -> 0x179b }
                int r5 = r5.getIntValue()     // Catch:{ Exception -> 0x179b }
                if (r3 != r5) goto L_0x01f7
                com.szchoiceway.eventcenter.EventService r13 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r14 = 4097(0x1001, float:5.741E-42)
                r15 = 0
                r16 = 0
                r17 = 0
                r18 = 0
                r13.notifyValidModeEvt(r14, r15, r16, r17, r18)     // Catch:{ Exception -> 0x179b }
                goto L_0x0264
            L_0x01f7:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r3 = r3.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3.removeMessages(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r3 = r3.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3.sendEmptyMessageDelayed(r4, r11)     // Catch:{ Exception -> 0x179b }
                goto L_0x0264
            L_0x0206:
                java.lang.String r3 = "com.szchoiceway"
                boolean r3 = r2.startsWith(r3)     // Catch:{ Exception -> 0x179b }
                if (r3 != 0) goto L_0x0264
                java.lang.String r3 = "com.android"
                boolean r3 = r2.startsWith(r3)     // Catch:{ Exception -> 0x179b }
                if (r3 != 0) goto L_0x0264
                java.lang.String r3 = "com.example.android.systemupdatersample"
                boolean r3 = r3.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r3 != 0) goto L_0x0264
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r3.bModeNull = r7     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r4 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_THIRD_APP     // Catch:{ Exception -> 0x179b }
                int r4 = r4.getIntValue()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.ICallbackfn$Stub r5 = r5.mModeCallback     // Catch:{ Exception -> 0x179b }
                r3.setCurModeCallback(r4, r5)     // Catch:{ Exception -> 0x179b }
                goto L_0x0264
            L_0x0235:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = r3.mValidMode     // Catch:{ Exception -> 0x179b }
                int r3 = r3.getIntValue()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r5 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_CARPLAY     // Catch:{ Exception -> 0x179b }
                int r5 = r5.getIntValue()     // Catch:{ Exception -> 0x179b }
                if (r3 != r5) goto L_0x0256
                com.szchoiceway.eventcenter.EventService r13 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r14 = 4097(0x1001, float:5.741E-42)
                r15 = 0
                r16 = 0
                r17 = 0
                r18 = 0
                r13.notifyValidModeEvt(r14, r15, r16, r17, r18)     // Catch:{ Exception -> 0x179b }
                goto L_0x0264
            L_0x0256:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r3 = r3.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3.removeMessages(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r3 = r3.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3.sendEmptyMessageDelayed(r4, r11)     // Catch:{ Exception -> 0x179b }
            L_0x0264:
                java.lang.String r3 = "cn.manstep.phonemirrorBox"
                boolean r2 = r3.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x0272
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.bIsAutoKit = r7     // Catch:{ Exception -> 0x179b }
                goto L_0x0277
            L_0x0272:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.bIsAutoKit = r6     // Catch:{ Exception -> 0x179b }
            L_0x0277:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 2578(0xa12, float:3.613E-42)
                r2.sendEmptyMessageDelayed(r3, r11)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0282:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r2 = r2.mValidMode     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC     // Catch:{ Exception -> 0x179b }
                if (r2 == r3) goto L_0x02a0
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r2 = r2.mValidMode     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOVIE     // Catch:{ Exception -> 0x179b }
                if (r2 == r3) goto L_0x02a0
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r2 = r2.mValidMode     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BTMUSIC     // Catch:{ Exception -> 0x179b }
                if (r2 != r3) goto L_0x02aa
            L_0x02a0:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.bModeNull     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x02aa
                goto L_0x17a6
            L_0x02aa:
                byte[] r2 = new byte[r8]     // Catch:{ Exception -> 0x179b }
                r3 = 51
                r2[r6] = r3     // Catch:{ Exception -> 0x179b }
                r2[r7] = r8     // Catch:{ Exception -> 0x179b }
                r2[r5] = r6     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService$SendThread r3 = r3.mSendThread     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x02c1
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService$SendThread r3 = r3.mSendThread     // Catch:{ Exception -> 0x179b }
                r3.notifyToSend(r2)     // Catch:{ Exception -> 0x179b }
            L_0x02c1:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "--->>> ZHTY Media chennal = false"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x02ca:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "--->>> EventUtils.HANDLER_DELAY_CHECK_OK_NOTIFY_MCU_UPGRADE"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                android.content.Intent r2 = new android.content.Intent     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "com.choiceway.eventcenter.EventUtils.ZXW_ZHTY_CHECK_OK_NOTIFY_MCU_UPGRADE"
                r2.<init>(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3.sendBroadcast(r2)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x02df:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.SendBlackState(r6)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x02e6:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r3 = r2.iTouchX     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.iTouchY     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.checkSystemVolKey(r3, r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r2.removeMessages(r14)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 65
                r2.sendEmptyMessageDelayed(r14, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0307:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Context r2 = r2.getApplicationContext()     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "window"
                java.lang.Object r2 = r2.getSystemService(r3)     // Catch:{ Exception -> 0x179b }
                android.view.WindowManager r2 = (android.view.WindowManager) r2     // Catch:{ Exception -> 0x179b }
                android.view.WindowManager unused = com.szchoiceway.eventcenter.EventService.wm = r2     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.view.WindowManager$LayoutParams r3 = new android.view.WindowManager$LayoutParams     // Catch:{ Exception -> 0x179b }
                r8 = 0
                r9 = 0
                r10 = 2005(0x7d5, float:2.81E-42)
                r11 = 8
                r12 = -3
                r7 = r3
                r7.<init>(r8, r9, r10, r11, r12)     // Catch:{ Exception -> 0x179b }
                android.view.WindowManager.LayoutParams unused = r2.wmCalibrateParams = r3     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.view.WindowManager$LayoutParams r2 = r2.wmCalibrateParams     // Catch:{ Exception -> 0x179b }
                r3 = 48
                r2.gravity = r3     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.view.WindowManager$LayoutParams r2 = r2.wmCalibrateParams     // Catch:{ Exception -> 0x179b }
                r2.screenOrientation = r6     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.view.View r3 = new android.view.View     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Context r4 = r4.getApplicationContext()     // Catch:{ Exception -> 0x179b }
                r3.<init>(r4)     // Catch:{ Exception -> 0x179b }
                android.view.View unused = r2.view = r3     // Catch:{ Exception -> 0x179b }
                android.view.WindowManager r2 = com.szchoiceway.eventcenter.EventService.wm     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.view.View r3 = r3.view     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.view.WindowManager$LayoutParams r4 = r4.wmCalibrateParams     // Catch:{ Exception -> 0x179b }
                r2.addView(r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0361:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.endBackcar()     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "--->>> KSW endBackCar backlight"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x036f:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.endBackcar()     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "HANDLER_ORIGINAL_END_KSW --->>> KSW endBackCar 777"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x037d:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.endBackcar()     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "HANDLER_BACKCAR_END_CHEKU --->>> KSW endBackCar 777"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x038b:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.startBackcar(r5)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0392:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.startBackcar(r5)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0399:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.startBackcar(r5)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x03a0:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.m_btNormalDelay_KSW = r6     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x03a7:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.endBackcar()     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "HANDLER_BACKCAR_END_KSW --->>> KSW endBackCar 777"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x03b5:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.startBackcar(r5)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x03bc:
                java.lang.Object r2 = r2.obj     // Catch:{ Exception -> 0x179b }
                byte[] r2 = (byte[]) r2     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x0414
                int r3 = r2.length     // Catch:{ Exception -> 0x179b }
                r4 = 7
                if (r3 >= r4) goto L_0x03c7
                goto L_0x0414
            L_0x03c7:
                byte r3 = r2[r7]     // Catch:{ Exception -> 0x179b }
                r3 = r3 & r6
                r3 = r3 | r7
                r3 = r3 | 32
                r3 = r3 | 128(0x80, float:1.794E-43)
                byte r3 = (byte) r3     // Catch:{ Exception -> 0x179b }
                r2[r7] = r3     // Catch:{ Exception -> 0x179b }
                r3 = 6
                byte r4 = r2[r7]     // Catch:{ Exception -> 0x179b }
                byte r5 = r2[r5]     // Catch:{ Exception -> 0x179b }
                int r4 = r4 + r5
                byte r5 = r2[r8]     // Catch:{ Exception -> 0x179b }
                int r4 = r4 + r5
                byte r5 = r2[r15]     // Catch:{ Exception -> 0x179b }
                int r4 = r4 + r5
                byte r5 = r2[r10]     // Catch:{ Exception -> 0x179b }
                int r4 = r4 + r5
                r4 = r4 ^ 255(0xff, float:3.57E-43)
                byte r4 = (byte) r4     // Catch:{ Exception -> 0x179b }
                r2[r3] = r4     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x0400 }
                android.os.Handler r3 = r3.mEventHandler     // Catch:{ Exception -> 0x0400 }
                if (r3 == 0) goto L_0x0405
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x0400 }
                android.os.Handler r3 = r3.mEventHandler     // Catch:{ Exception -> 0x0400 }
                r4 = 269(0x10d, float:3.77E-43)
                android.os.Message r3 = r3.obtainMessage(r4, r2)     // Catch:{ Exception -> 0x0400 }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x0400 }
                android.os.Handler r4 = r4.mEventHandler     // Catch:{ Exception -> 0x0400 }
                r5 = 100
                r4.sendMessageDelayed(r3, r5)     // Catch:{ Exception -> 0x0400 }
                goto L_0x0405
            L_0x0400:
                r0 = move-exception
                r3 = r0
                r3.printStackTrace()     // Catch:{ Exception -> 0x179b }
            L_0x0405:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService$SendThread r3 = r3.mSendThread     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService$SendThread r3 = r3.mSendThread     // Catch:{ Exception -> 0x179b }
                r3.notifyToSend(r2)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0414:
                return
            L_0x0415:
                java.lang.String r3 = "EventService"
                java.lang.String r4 = "handleMessage: HANDLER_MENU_TOUCH_POS"
                android.util.Log.i(r3, r4)     // Catch:{ Exception -> 0x179b }
                byte[] r3 = new byte[r15]     // Catch:{ Exception -> 0x179b }
                int r4 = r2.arg1     // Catch:{ Exception -> 0x179b }
                r4 = r4 & 255(0xff, float:3.57E-43)
                byte r4 = (byte) r4     // Catch:{ Exception -> 0x179b }
                r3[r6] = r4     // Catch:{ Exception -> 0x179b }
                int r4 = r2.arg1     // Catch:{ Exception -> 0x179b }
                int r4 = r4 >> r13
                r4 = r4 & 255(0xff, float:3.57E-43)
                byte r4 = (byte) r4     // Catch:{ Exception -> 0x179b }
                r3[r7] = r4     // Catch:{ Exception -> 0x179b }
                int r4 = r2.arg1     // Catch:{ Exception -> 0x179b }
                int r4 = r4 >> 16
                r4 = r4 & 255(0xff, float:3.57E-43)
                byte r4 = (byte) r4     // Catch:{ Exception -> 0x179b }
                r3[r5] = r4     // Catch:{ Exception -> 0x179b }
                int r2 = r2.arg1     // Catch:{ Exception -> 0x179b }
                int r2 = r2 >> 24
                r2 = r2 & 255(0xff, float:3.57E-43)
                byte r2 = (byte) r2     // Catch:{ Exception -> 0x179b }
                r3[r8] = r2     // Catch:{ Exception -> 0x179b }
                byte r2 = r3[r6]     // Catch:{ Exception -> 0x179b }
                r2 = r2 & 255(0xff, float:3.57E-43)
                byte r4 = r3[r7]     // Catch:{ Exception -> 0x179b }
                r4 = r4 & 255(0xff, float:3.57E-43)
                int r4 = r4 << r13
                r2 = r2 | r4
                byte r4 = r3[r5]     // Catch:{ Exception -> 0x179b }
                r4 = r4 & 255(0xff, float:3.57E-43)
                byte r10 = r3[r8]     // Catch:{ Exception -> 0x179b }
                r10 = r10 & 255(0xff, float:3.57E-43)
                int r10 = r10 << r13
                r4 = r4 | r10
                java.lang.String r10 = "EventService"
                java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r11.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r12 = "handleMessage: x ="
                r11.append(r12)     // Catch:{ Exception -> 0x179b }
                r11.append(r4)     // Catch:{ Exception -> 0x179b }
                java.lang.String r12 = ", y = "
                r11.append(r12)     // Catch:{ Exception -> 0x179b }
                r11.append(r2)     // Catch:{ Exception -> 0x179b }
                java.lang.String r11 = r11.toString()     // Catch:{ Exception -> 0x179b }
                android.util.Log.i(r10, r11)     // Catch:{ Exception -> 0x179b }
                r10 = 65535(0xffff, float:9.1834E-41)
                if (r4 != r10) goto L_0x04d7
                r4 = 65535(0xffff, float:9.1834E-41)
                if (r2 != r4) goto L_0x04d7
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r4.beep()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.m_iUITypeVer     // Catch:{ Exception -> 0x179b }
                if (r4 != r9) goto L_0x048b
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r4.backLightOn_KSW()     // Catch:{ Exception -> 0x179b }
            L_0x048b:
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.GetCurrDim()     // Catch:{ Exception -> 0x179b }
                r9 = -1
                if (r4 != r9) goto L_0x04d7
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r4.SendBlackState(r6)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.LoadNLightVal()     // Catch:{ Exception -> 0x179b }
                java.lang.String r9 = "EventService"
                java.lang.String r10 = "--->>> iBLVal = 222222 "
                android.util.Log.i(r9, r10)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r10 = 20
                byte r4 = (byte) r4     // Catch:{ Exception -> 0x179b }
                r9.SendBLVal(r10, r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r9 = -1
                r4.m_iCurrDim = r9     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.SysProviderOpt r4 = r4.mSysProviderOpt     // Catch:{ Exception -> 0x179b }
                if (r4 == 0) goto L_0x04d7
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.SysProviderOpt r4 = r4.mSysProviderOpt     // Catch:{ Exception -> 0x179b }
                java.lang.String r9 = "Set_DIM_Light"
                java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r10.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r11 = ""
                r10.append(r11)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r11 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r11 = r11.m_iCurrDim     // Catch:{ Exception -> 0x179b }
                r10.append(r11)     // Catch:{ Exception -> 0x179b }
                java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x179b }
                r4.updateRecord(r9, r10)     // Catch:{ Exception -> 0x179b }
            L_0x04d7:
                byte r4 = r3[r8]     // Catch:{ Exception -> 0x179b }
                r4 = r4 & 255(0xff, float:3.57E-43)
                r9 = 128(0x80, float:1.794E-43)
                if (r4 < r9) goto L_0x056c
                byte r4 = r3[r8]     // Catch:{ Exception -> 0x179b }
                int r4 = r4 + -128
                byte r4 = (byte) r4     // Catch:{ Exception -> 0x179b }
                r3[r8] = r4     // Catch:{ Exception -> 0x179b }
                byte r4 = r3[r5]     // Catch:{ Exception -> 0x179b }
                r4 = r4 & 255(0xff, float:3.57E-43)
                byte r3 = r3[r8]     // Catch:{ Exception -> 0x179b }
                r3 = r3 & 255(0xff, float:3.57E-43)
                int r3 = r3 << r13
                r3 = r3 | r4
                java.lang.String r4 = "GetTouchKey"
                java.lang.String r5 = "touch up"
                android.util.Log.d(r4, r5)     // Catch:{ Exception -> 0x179b }
                r4 = 32767(0x7fff, float:4.5916E-41)
                if (r3 == r4) goto L_0x0505
                r4 = 65535(0xffff, float:9.1834E-41)
                if (r2 == r4) goto L_0x0505
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r4.ProcessTouchXY(r3, r2)     // Catch:{ Exception -> 0x179b }
            L_0x0505:
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.m_iCanbustype     // Catch:{ Exception -> 0x179b }
                if (r4 != r13) goto L_0x0520
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.m_iCarstype_ID     // Catch:{ Exception -> 0x179b }
                r5 = 11
                if (r4 != r5) goto L_0x0520
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.m_iCarCanbusName_ID     // Catch:{ Exception -> 0x179b }
                if (r4 != 0) goto L_0x0520
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r4 = r4.mEventHandler     // Catch:{ Exception -> 0x179b }
                r4.removeMessages(r14)     // Catch:{ Exception -> 0x179b }
            L_0x0520:
                int r4 = r1.downX     // Catch:{ Exception -> 0x179b }
                int r4 = r3 - r4
                int r4 = java.lang.Math.abs(r4)     // Catch:{ Exception -> 0x179b }
                r5 = 20
                if (r4 >= r5) goto L_0x0558
                int r4 = r1.downY     // Catch:{ Exception -> 0x179b }
                int r4 = r2 - r4
                int r4 = java.lang.Math.abs(r4)     // Catch:{ Exception -> 0x179b }
                r5 = 20
                if (r4 >= r5) goto L_0x0558
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.m_bLongKeyDown     // Catch:{ Exception -> 0x179b }
                if (r4 == 0) goto L_0x0541
                goto L_0x054e
            L_0x0541:
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.mbInTouchKeyLearnMode     // Catch:{ Exception -> 0x179b }
                if (r4 != 0) goto L_0x054e
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r4.checkSystemTouchKey(r3, r2)     // Catch:{ Exception -> 0x179b }
            L_0x054e:
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int unused = r4.iReceive_key_time = r6     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r4.m_bLongKeyDown = r6     // Catch:{ Exception -> 0x179b }
            L_0x0558:
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.menuDownState     // Catch:{ Exception -> 0x179b }
                if (r4 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r4.menuDownState = r6     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r4.sendMenuTouchPos(r3, r2, r6)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x056c:
                byte r4 = r3[r5]     // Catch:{ Exception -> 0x179b }
                r4 = r4 & 255(0xff, float:3.57E-43)
                byte r3 = r3[r8]     // Catch:{ Exception -> 0x179b }
                r3 = r3 & 255(0xff, float:3.57E-43)
                int r3 = r3 << r13
                r3 = r3 | r4
                r1.downX = r3     // Catch:{ Exception -> 0x179b }
                r1.downY = r2     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "GetTouchKey"
                java.lang.String r5 = "touch down"
                android.util.Log.d(r4, r5)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.mbInTouchKeyLearnMode     // Catch:{ Exception -> 0x179b }
                if (r4 != 0) goto L_0x05bd
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.m_iCanbustype     // Catch:{ Exception -> 0x179b }
                if (r4 != r13) goto L_0x05b8
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.m_iCarstype_ID     // Catch:{ Exception -> 0x179b }
                r5 = 11
                if (r4 != r5) goto L_0x05b8
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.m_iCarCanbusName_ID     // Catch:{ Exception -> 0x179b }
                if (r4 != 0) goto L_0x05b8
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int unused = r4.iTouchX = r3     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int unused = r4.iTouchY = r2     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r4 = r4.mEventHandler     // Catch:{ Exception -> 0x179b }
                r4.removeMessages(r14)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r4 = r4.mEventHandler     // Catch:{ Exception -> 0x179b }
                r5 = 700(0x2bc, double:3.46E-321)
                r4.sendEmptyMessageDelayed(r14, r5)     // Catch:{ Exception -> 0x179b }
                goto L_0x05bd
            L_0x05b8:
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r4.checkSystemVolKey(r3, r2)     // Catch:{ Exception -> 0x179b }
            L_0x05bd:
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.menuDownState     // Catch:{ Exception -> 0x179b }
                if (r4 != 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r4.menuDownState = r7     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r4.sendMenuTouchPos(r3, r2, r7)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x05d1:
                r2 = 251(0xfb, float:3.52E-43)
                r1.removeMessages(r2)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.endBackcar()     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "--->>> KSW endBackCar 444"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r5 = 4100(0x1004, float:5.745E-42)
                r6 = 0
                r7 = 0
                r8 = 0
                r9 = 0
                r4.notifyValidModeEvt(r5, r6, r7, r8, r9)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x05ef:
                r2 = 250(0xfa, float:3.5E-43)
                r1.removeMessages(r2)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r13 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r14 = 4099(0x1003, float:5.744E-42)
                r15 = 0
                r16 = 0
                r17 = 0
                r18 = 0
                r13.notifyValidModeEvt(r14, r15, r16, r17, r18)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BACKCAR     // Catch:{ Exception -> 0x179b }
                r2.sendMode(r3, r7)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.startBackcar(r5)     // Catch:{ Exception -> 0x179b }
                r1.removeMessages(r4)     // Catch:{ Exception -> 0x179b }
                r1.sendEmptyMessageDelayed(r4, r11)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0616:
                int r3 = r2.arg1     // Catch:{ Exception -> 0x179b }
                r4 = -10
                if (r3 == r4) goto L_0x06c4
                r4 = -9
                if (r3 == r4) goto L_0x06a5
                if (r3 == r5) goto L_0x0687
                if (r3 == r8) goto L_0x066a
                r4 = 21
                if (r3 == r4) goto L_0x063b
                r4 = 85
                if (r3 == r4) goto L_0x062e
                goto L_0x06b6
            L_0x062e:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "MCU_KEY_RETURN"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.sendKeyDownUpSync(r15)     // Catch:{ Exception -> 0x179b }
                return
            L_0x063b:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.SendBlackState(r7)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3 = -1
                r2.m_iCurrDim = r3     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.SysProviderOpt r2 = r2.mSysProviderOpt     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x0669
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.SysProviderOpt r2 = r2.mSysProviderOpt     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "Set_DIM_Light"
                java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r4.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r5 = ""
                r4.append(r5)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r5 = r5.m_iCurrDim     // Catch:{ Exception -> 0x179b }
                r4.append(r5)     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x179b }
                r2.updateRecord(r3, r4)     // Catch:{ Exception -> 0x179b }
            L_0x0669:
                return
            L_0x066a:
                java.lang.String r3 = "EventService"
                java.lang.String r4 = "HANDLER_CAN_KEY_EVENT MCU_KEY_PREV start"
                android.util.Log.i(r3, r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r3 = r3.checkMediaThird()     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x0680
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r4 = 88
                r3.sendKeyDownUpSync(r4)     // Catch:{ Exception -> 0x179b }
            L_0x0680:
                java.lang.String r3 = "EventService"
                java.lang.String r4 = "HANDLER_CAN_KEY_EVENT MCU_KEY_PREV end"
                android.util.Log.i(r3, r4)     // Catch:{ Exception -> 0x179b }
            L_0x0687:
                java.lang.String r3 = "EventService"
                java.lang.String r4 = "HANDLER_CAN_KEY_EVENT MCU_KEY_NEXT start"
                android.util.Log.i(r3, r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r3 = r3.checkMediaThird()     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x069d
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r4 = 87
                r3.sendKeyDownUpSync(r4)     // Catch:{ Exception -> 0x179b }
            L_0x069d:
                java.lang.String r3 = "EventService"
                java.lang.String r4 = "HANDLER_CAN_KEY_EVENT MCU_KEY_NEXT end"
                android.util.Log.i(r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x06b6
            L_0x06a5:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r3 = r3.m_iUITypeVer     // Catch:{ Exception -> 0x179b }
                if (r3 != r9) goto L_0x06b1
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3.backLightOff_KSW()     // Catch:{ Exception -> 0x179b }
                goto L_0x06b6
            L_0x06b1:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3.PowerOff(r7)     // Catch:{ Exception -> 0x179b }
            L_0x06b6:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.arg1     // Catch:{ Exception -> 0x179b }
                r3.notifyModeKeyEvt(r2)     // Catch:{ Exception -> 0x179b }
            L_0x06bd:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.bResponseKey = r7     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x06c4:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.DIMMode()     // Catch:{ Exception -> 0x179b }
                return
            L_0x06ca:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r2 = r2.mValidMode     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_DVD     // Catch:{ Exception -> 0x179b }
                if (r2 != r3) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Context r2 = r2.getApplicationContext()     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "com.szchoiceway.radio"
                java.lang.String r4 = "com.szchoiceway.radio.MainActivity"
                com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning(r2, r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x06e3:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Context r2 = r2.getApplicationContext()     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "com.szchoiceway.dvdplayer"
                java.lang.String r4 = "com.szchoiceway.dvdplayer.MainActivity"
                com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning(r2, r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x06f2:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "handleMessage: 10001"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.sendToOSData()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0700:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.showLandRoverCopilotVolumeView(r6)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0707:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.showLandRoverCopilotVolumeView(r7)     // Catch:{ Exception -> 0x179b }
                r2 = 4180(0x1054, float:5.857E-42)
                r1.removeMessages(r2)     // Catch:{ Exception -> 0x179b }
                r2 = 4180(0x1054, float:5.857E-42)
                r3 = 3000(0xbb8, double:1.482E-320)
                r1.sendEmptyMessageDelayed(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x071a:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mShowLRBottomView     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.showLRBottomView(r6)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0729:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mShowLRBottomView     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.showLRBottomView(r7)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0738:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.ExitBackcarMode()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x073f:
                java.lang.Object r2 = r2.obj     // Catch:{ Exception -> 0x179b }
                byte[] r2 = (byte[]) r2     // Catch:{ Exception -> 0x179b }
                int r3 = r2.length     // Catch:{ Exception -> 0x179b }
                if (r3 <= 0) goto L_0x0766
            L_0x0746:
                byte[] r3 = com.szchoiceway.eventcenter.EventService.m_stHeadRadarInfo     // Catch:{ Exception -> 0x179b }
                int r3 = r3.length     // Catch:{ Exception -> 0x179b }
                if (r6 >= r3) goto L_0x0766
                byte[] r3 = com.szchoiceway.eventcenter.EventService.m_stHeadRadarInfo     // Catch:{ Exception -> 0x179b }
                byte r4 = r2[r6]     // Catch:{ Exception -> 0x179b }
                r3[r6] = r4     // Catch:{ Exception -> 0x179b }
                byte[] r3 = com.szchoiceway.eventcenter.EventService.m_stBackRadarInfo     // Catch:{ Exception -> 0x179b }
                byte[] r4 = com.szchoiceway.eventcenter.EventService.m_stHeadRadarInfo     // Catch:{ Exception -> 0x179b }
                int r4 = r4.length     // Catch:{ Exception -> 0x179b }
                int r4 = r4 + r6
                byte r4 = r2[r4]     // Catch:{ Exception -> 0x179b }
                r3[r6] = r4     // Catch:{ Exception -> 0x179b }
                int r6 = r6 + 1
                goto L_0x0746
            L_0x0766:
                com.szchoiceway.eventcenter.RadarWndFrame r2 = com.szchoiceway.eventcenter.EventService.mRadarWndView     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.RadarWndFrame r2 = com.szchoiceway.eventcenter.EventService.mRadarWndView     // Catch:{ Exception -> 0x179b }
                byte[] r3 = com.szchoiceway.eventcenter.EventService.m_stHeadRadarInfo     // Catch:{ Exception -> 0x179b }
                r2.updateHeadRadarData(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.RadarWndFrame r2 = com.szchoiceway.eventcenter.EventService.mRadarWndView     // Catch:{ Exception -> 0x179b }
                byte[] r3 = com.szchoiceway.eventcenter.EventService.m_stBackRadarInfo     // Catch:{ Exception -> 0x179b }
                r2.updateBackRadarData(r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0784:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.showRadarWnd()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x078b:
                com.szchoiceway.eventcenter.EventService.removeRadarWnd()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0790:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.showFloatingButtonWnd()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0797:
                com.szchoiceway.eventcenter.EventService.removeFloatingButtonWnd()     // Catch:{ Exception -> 0x179b }
                boolean unused = com.szchoiceway.eventcenter.EventService.mIsAddFloatingButtonView = r6     // Catch:{ Exception -> 0x179b }
                boolean r2 = com.szchoiceway.eventcenter.EventService.mIsAddFloatingMenuView     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                android.view.WindowManager r2 = com.szchoiceway.eventcenter.EventService.wm     // Catch:{ Exception -> 0x179b }
                android.view.View r3 = com.szchoiceway.eventcenter.EventService.mFloatingMenuWndView     // Catch:{ Exception -> 0x179b }
                r2.removeView(r3)     // Catch:{ Exception -> 0x179b }
                boolean unused = com.szchoiceway.eventcenter.EventService.mIsAddFloatingMenuView = r6     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x07b3:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.showSplitScreenWnd()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 4147(0x1033, float:5.811E-42)
                r2.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x07c3:
                com.szchoiceway.eventcenter.EventService.removeSplitScreenWnd()     // Catch:{ Exception -> 0x179b }
                boolean unused = com.szchoiceway.eventcenter.EventService.mIsAddSplitScreenView = r6     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x07cb:
                byte r2 = com.szchoiceway.eventcenter.EventService.mbyDoorData     // Catch:{ Exception -> 0x179b }
                byte r3 = com.szchoiceway.eventcenter.EventService.mbyDoorDataOld     // Catch:{ Exception -> 0x179b }
                if (r2 == r3) goto L_0x07d6
                r6 = 1
            L_0x07d6:
                if (r6 == 0) goto L_0x17a6
                byte r2 = com.szchoiceway.eventcenter.EventService.mbyDoorData     // Catch:{ Exception -> 0x179b }
                byte unused = com.szchoiceway.eventcenter.EventService.mbyDoorDataOld = r2     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.showDoorWnd()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.DoorWndFrame r2 = com.szchoiceway.eventcenter.EventService.mDoorWndView     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.DoorWndFrame r2 = com.szchoiceway.eventcenter.EventService.mDoorWndView     // Catch:{ Exception -> 0x179b }
                byte r3 = com.szchoiceway.eventcenter.EventService.mbyDoorData     // Catch:{ Exception -> 0x179b }
                r2.updateCarDoorData(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                byte r2 = com.szchoiceway.eventcenter.EventService.mbyDoorData     // Catch:{ Exception -> 0x179b }
                r3 = 4145(0x1031, float:5.808E-42)
                if (r2 != 0) goto L_0x0815
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r2.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r4 = 10
                r2.sendEmptyMessageDelayed(r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0815:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r2.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "XinCheng"
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = r4.xml_client     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.equalsIgnoreCase(r4)     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r4 = 5000(0x1388, double:2.4703E-320)
                r2.sendEmptyMessageDelayed(r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0833:
                com.szchoiceway.eventcenter.EventService.removeDoorWnd()     // Catch:{ Exception -> 0x179b }
                boolean unused = com.szchoiceway.eventcenter.EventService.mIsAddDoorView = r6     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x083b:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.widget.TextView r2 = r2.tvVolType     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x0886
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.bGestureIsAdd     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x0869
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.widget.TextView r2 = r2.tvVolType     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "+"
                r2.setText(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.widget.ProgressBar r2 = r2.mProgressBar     // Catch:{ Exception -> 0x179b }
                r2.setVisibility(r6)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.widget.ProgressBar r2 = r2.mProgressBar2     // Catch:{ Exception -> 0x179b }
                r2.setVisibility(r13)     // Catch:{ Exception -> 0x179b }
                goto L_0x0886
            L_0x0869:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.widget.TextView r2 = r2.tvVolType     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "-"
                r2.setText(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.widget.ProgressBar r2 = r2.mProgressBar2     // Catch:{ Exception -> 0x179b }
                r2.setVisibility(r6)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.widget.ProgressBar r2 = r2.mProgressBar     // Catch:{ Exception -> 0x179b }
                r2.setVisibility(r13)     // Catch:{ Exception -> 0x179b }
            L_0x0886:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.showGestureWnd()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 4137(0x1029, float:5.797E-42)
                r2.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 4137(0x1029, float:5.797E-42)
                r4 = 4000(0xfa0, double:1.9763E-320)
                r2.sendEmptyMessageDelayed(r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x08a1:
                com.szchoiceway.eventcenter.EventService.removeGestureWnd()     // Catch:{ Exception -> 0x179b }
                boolean unused = com.szchoiceway.eventcenter.EventService.mIsAddGestureView = r6     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x08a9:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.removeMouseWnd()     // Catch:{ Exception -> 0x179b }
                boolean unused = com.szchoiceway.eventcenter.EventService.mIsAddMouseView = r6     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x08b3:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.showMouseWnd()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.updateMouseViewLayout()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 4136(0x1028, float:5.796E-42)
                r2.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 4136(0x1028, float:5.796E-42)
                r4 = 8000(0x1f40, double:3.9525E-320)
                r2.sendEmptyMessageDelayed(r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x08d3:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.OnRefreshCanAirInfo()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.SysProviderOpt r2 = r2.mSysProviderOpt     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "KSW_SHOW_AIR"
                boolean r2 = r2.getRecordBoolean(r3, r6)     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.JavaLazy r2 = r2.lexusAirViewComponent     // Catch:{ Exception -> 0x179b }
                java.lang.Object r2 = r2.get()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.lexus.LexusAirViewComponent r2 = (com.szchoiceway.eventcenter.lexus.LexusAirViewComponent) r2     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.isTouching()     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x091f
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.lexusAirViewAdded     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x08ff
                goto L_0x091f
            L_0x08ff:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.showAirWnd()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 4132(0x1024, float:5.79E-42)
                r2.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 4132(0x1024, float:5.79E-42)
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.hideAirTime     // Catch:{ Exception -> 0x179b }
                long r4 = (long) r4     // Catch:{ Exception -> 0x179b }
                r2.sendEmptyMessageDelayed(r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x091f:
                return
            L_0x0920:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "WHAT_HIDE_AIR_WND"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.removeAirtWnd()     // Catch:{ Exception -> 0x179b }
                boolean unused = com.szchoiceway.eventcenter.EventService.mIsAddAirView = r6     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.CarAirStruct r2 = r2.mCarAirStruct     // Catch:{ Exception -> 0x179b }
                r3 = 10
                byte[] r3 = new byte[r3]     // Catch:{ Exception -> 0x179b }
                r2.mAirDataOld = r3     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x093b:
                java.lang.String r2 = "EventService"
                java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r3.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "EVENT_CAN_GATHER_END canIndex = "
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.canGatherIndex     // Catch:{ Exception -> 0x179b }
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x179b }
                android.util.Log.d(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.canGatherIndex     // Catch:{ Exception -> 0x179b }
                if (r2 != r5) goto L_0x096c
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Intent r3 = new android.content.Intent     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "ZXW_MCU_CAN2_LOG_CAPTURE_SAVE_SUCCEED"
                r3.<init>(r4)     // Catch:{ Exception -> 0x179b }
                r2.sendBroadcast(r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x0978
            L_0x096c:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Intent r3 = new android.content.Intent     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "ZXW_MCU_CAN1_LOG_CAPTURE_SAVE_SUCCEED"
                r3.<init>(r4)     // Catch:{ Exception -> 0x179b }
                r2.sendBroadcast(r3)     // Catch:{ Exception -> 0x179b }
            L_0x0978:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int unused = r2.canGatherIndex = r6     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x097f:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.reloadService()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EvtModel.startCarPlayService(r2, r7)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_POWERON     // Catch:{ Exception -> 0x179b }
                r2.sendMode(r3, r6)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MCU_VERSION     // Catch:{ Exception -> 0x179b }
                r2.sendMode(r3, r6)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = r2.mValidMode     // Catch:{ Exception -> 0x179b }
                r2.sendMode(r3, r6)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.isAirDataAllowed = r7     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.sendAccSleepStatusBroadcast(r7)     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r3.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "mDefaultInputMethod"
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = r4.mDefaultInputMethod     // Catch:{ Exception -> 0x179b }
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x179b }
                android.util.Log.d(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = r2.mDefaultInputMethod     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x09f0
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.ContentResolver r2 = r2.getContentResolver()     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "default_input_method"
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = r4.mDefaultInputMethod     // Catch:{ Exception -> 0x179b }
                android.provider.Settings.Secure.putString(r2, r3, r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3 = 0
                java.lang.String unused = r2.mDefaultInputMethod = r3     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.SysProviderOpt r2 = r2.mSysProviderOpt     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "SYS_INPUT_METHOD"
                java.lang.String r4 = ""
                r2.updateRecord(r3, r4)     // Catch:{ Exception -> 0x179b }
            L_0x09f0:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.isModeKnown     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x09fd
                r2 = 4106(0x100a, float:5.754E-42)
                r1.sendEmptyMessageDelayed(r2, r11)     // Catch:{ Exception -> 0x179b }
            L_0x09fd:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.SysProviderOpt r2 = r2.mSysProviderOpt     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "SYS_TV_OUT_ON_OFF_SET_VALUE_INDEX_KEY"
                r2.getRecordInteger(r3, r7)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mWifiState     // Catch:{ Exception -> 0x179b }
                if (r2 <= r7) goto L_0x0a11
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.AccEvent.Utils.setWifiMode(r2, r7)     // Catch:{ Exception -> 0x179b }
            L_0x0a11:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.mWifiState = r6     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0a17:
                java.io.File r2 = new java.io.File     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "/sys/block/mmcblk0"
                r2.<init>(r3)     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "persist.imei.slot0"
                java.lang.String r4 = ""
                java.lang.String r3 = android.os.SystemProperties.get(r3, r4)     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.exists()     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x17a6
                java.lang.String r2 = ""
                boolean r2 = r2.equalsIgnoreCase(r3)     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x17a6
                java.lang.String r2 = com.szchoiceway.eventcenter.util.MD5Util.getMD5String((java.lang.String) r3)     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "EventService"
                java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r4.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r5 = "cid = "
                r4.append(r5)     // Catch:{ Exception -> 0x179b }
                r4.append(r2)     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x179b }
                android.util.Log.d(r3, r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3.setDHWCid(r2)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0a55:
                r3 = 3033(0xbd9, float:4.25E-42)
                r1.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r3 = r3.show360Dialog     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x0a65
                r1.sendMessageDelayed(r2, r11)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0a65:
                java.lang.Object r2 = r2.obj     // Catch:{ Exception -> 0x179b }
                java.lang.Integer r2 = (java.lang.Integer) r2     // Catch:{ Exception -> 0x179b }
                int r2 = r2.intValue()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3.postRunModeActivity(r2)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0a74:
                r2 = 3022(0xbce, float:4.235E-42)
                r1.removeMessages(r2)     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "0"
                java.lang.String r3 = "sys.start.state"
                java.lang.String r4 = "-1"
                java.lang.String r3 = android.os.SystemProperties.get(r3, r4)     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.equals(r3)     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "EventService"
                java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r4.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r5 = "KSW_HANDLER_CHECK_XYQ_INIT init360 = "
                r4.append(r5)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r5 = r5.init360     // Catch:{ Exception -> 0x179b }
                r4.append(r5)     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x179b }
                android.util.Log.d(r3, r4)     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x0aae
                r2 = 3022(0xbce, float:4.235E-42)
                r3 = 500(0x1f4, double:2.47E-321)
                r1.sendEmptyMessageDelayed(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0aae:
                com.szchoiceway.eventcenter.-$$Lambda$EventService$7$sHUNe95YQcwGLkAJqYpg1jCO0dY r2 = new com.szchoiceway.eventcenter.-$$Lambda$EventService$7$sHUNe95YQcwGLkAJqYpg1jCO0dY     // Catch:{ Exception -> 0x179b }
                r2.<init>()     // Catch:{ Exception -> 0x179b }
                r3 = 3000(0xbb8, double:1.482E-320)
                r1.postDelayed(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0aba:
                r2 = 3021(0xbcd, float:4.233E-42)
                r1.removeMessages(r2)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "com.szchoiceway.updatemcu.UpdateMcuService"
                boolean r2 = com.szchoiceway.eventcenter.EventUtils.isServiceAlive(r2, r3)     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x0adc
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Intent r3 = new android.content.Intent     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "com.szchoiceway.updatemcu.stopSelf"
                r3.<init>(r4)     // Catch:{ Exception -> 0x179b }
                r2.sendBroadcast(r3)     // Catch:{ Exception -> 0x179b }
                r2 = 3021(0xbcd, float:4.233E-42)
                r1.sendEmptyMessageDelayed(r2, r11)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0adc:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Intent r3 = new android.content.Intent     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "com.szchoiceway.updatemcu.AutoUpdateMcuService"
                r3.<init>(r4)     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "com.szchoiceway.updatemcu"
                android.content.Intent r3 = r3.setPackage(r4)     // Catch:{ Exception -> 0x179b }
                r2.startService(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.View.DialogRepairMcu r2 = r2.mDialogRepairMcu     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.View.DialogRepairMcu r2 = r2.mDialogRepairMcu     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.showDialog     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.View.DialogRepairMcu r2 = r2.mDialogRepairMcu     // Catch:{ Exception -> 0x179b }
                r2.hideDialog()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0b05:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.lang.Object r2 = r2.obj     // Catch:{ Exception -> 0x179b }
                java.lang.Boolean r2 = (java.lang.Boolean) r2     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.booleanValue()     // Catch:{ Exception -> 0x179b }
                r3.mSplitScreen = r2     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0b13:
                r2 = 3019(0xbcb, float:4.23E-42)
                r1.removeMessages(r2)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService.access$22808(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r3 = r3.checkCopyTime     // Catch:{ Exception -> 0x179b }
                r4 = 40
                if (r3 <= r4) goto L_0x0b2d
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.isImportBackup = r6     // Catch:{ Exception -> 0x179b }
                return
            L_0x0b2d:
                java.io.File r3 = new java.io.File     // Catch:{ Exception -> 0x0bbb }
                java.lang.String r4 = "/mnt/privdata1/media"
                r3.<init>(r4)     // Catch:{ Exception -> 0x0bbb }
                java.io.File r4 = new java.io.File     // Catch:{ Exception -> 0x0bbb }
                java.lang.String r5 = "/sdcard/Media"
                r4.<init>(r5)     // Catch:{ Exception -> 0x0bbb }
                java.io.File r5 = new java.io.File     // Catch:{ Exception -> 0x0bbb }
                java.lang.String r8 = "/mnt/privdata1/UserManual"
                r5.<init>(r8)     // Catch:{ Exception -> 0x0bbb }
                java.io.File r8 = new java.io.File     // Catch:{ Exception -> 0x0bbb }
                java.lang.String r9 = "/sdcard/UserManual"
                r8.<init>(r9)     // Catch:{ Exception -> 0x0bbb }
                boolean r9 = r3.exists()     // Catch:{ Exception -> 0x0bbb }
                if (r9 == 0) goto L_0x0b70
                java.io.File[] r9 = r3.listFiles()     // Catch:{ Exception -> 0x0bbb }
                int r9 = r9.length     // Catch:{ Exception -> 0x0bbb }
                if (r9 <= 0) goto L_0x0b70
                boolean r9 = r4.exists()     // Catch:{ Exception -> 0x0bbb }
                if (r9 == 0) goto L_0x0b6e
                boolean r9 = r4.isDirectory()     // Catch:{ Exception -> 0x0bbb }
                if (r9 == 0) goto L_0x0b6e
                java.io.File[] r4 = r4.listFiles()     // Catch:{ Exception -> 0x0bbb }
                int r4 = r4.length     // Catch:{ Exception -> 0x0bbb }
                java.io.File[] r3 = r3.listFiles()     // Catch:{ Exception -> 0x0bbb }
                int r3 = r3.length     // Catch:{ Exception -> 0x0bbb }
                if (r4 == r3) goto L_0x0b70
            L_0x0b6e:
                r3 = 1
                goto L_0x0b71
            L_0x0b70:
                r3 = 0
            L_0x0b71:
                boolean r4 = r5.exists()     // Catch:{ Exception -> 0x0bbb }
                if (r4 == 0) goto L_0x0b97
                java.io.File[] r4 = r5.listFiles()     // Catch:{ Exception -> 0x0bbb }
                int r4 = r4.length     // Catch:{ Exception -> 0x0bbb }
                if (r4 <= 0) goto L_0x0b97
                boolean r4 = r8.exists()     // Catch:{ Exception -> 0x0bbb }
                if (r4 == 0) goto L_0x0b98
                boolean r4 = r8.isDirectory()     // Catch:{ Exception -> 0x0bbb }
                if (r4 == 0) goto L_0x0b98
                java.io.File[] r4 = r8.listFiles()     // Catch:{ Exception -> 0x0bbb }
                int r4 = r4.length     // Catch:{ Exception -> 0x0bbb }
                java.io.File[] r5 = r5.listFiles()     // Catch:{ Exception -> 0x0bbb }
                int r5 = r5.length     // Catch:{ Exception -> 0x0bbb }
                if (r4 == r5) goto L_0x0b97
                goto L_0x0b98
            L_0x0b97:
                r7 = 0
            L_0x0b98:
                if (r3 == 0) goto L_0x0ba6
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x0bbb }
                r3.copyMedia()     // Catch:{ Exception -> 0x0bbb }
                r3 = 500(0x1f4, double:2.47E-321)
                r1.sendEmptyMessageDelayed(r2, r3)     // Catch:{ Exception -> 0x0bbb }
                goto L_0x17a6
            L_0x0ba6:
                if (r7 == 0) goto L_0x0bb4
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x0bbb }
                r3.copyManual()     // Catch:{ Exception -> 0x0bbb }
                r3 = 500(0x1f4, double:2.47E-321)
                r1.sendEmptyMessageDelayed(r2, r3)     // Catch:{ Exception -> 0x0bbb }
                goto L_0x17a6
            L_0x0bb4:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x0bbb }
                boolean unused = r2.isImportBackup = r6     // Catch:{ Exception -> 0x0bbb }
                goto L_0x17a6
            L_0x0bbb:
                r0 = move-exception
                r2 = r0
                r2.printStackTrace()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.isImportBackup = r6     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0bc7:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.SysProviderOpt r2 = r2.mSysProviderOpt     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "NAV_PACKAGENAME"
                java.lang.String r4 = "com.szchoiceway.navigation"
                java.lang.String r2 = r2.getRecordValue(r3, r4)     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "com.szchoiceway.navigation"
                boolean r3 = r3.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r3 != 0) goto L_0x17a6
                java.lang.String r3 = "EventService"
                java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r4.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r5 = "isNaviAlive = "
                r4.append(r5)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r5 = com.szchoiceway.eventcenter.EventUtils.isAppRunning(r5, r2)     // Catch:{ Exception -> 0x179b }
                r4.append(r5)     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x179b }
                android.util.Log.d(r3, r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = com.szchoiceway.eventcenter.EventUtils.isAppRunning(r3, r2)     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x0c2a
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.util.List r2 = r2.soundNaviPkgList     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.util.List r2 = r2.soundNaviPkgList     // Catch:{ Exception -> 0x179b }
                int r2 = r2.size()     // Catch:{ Exception -> 0x179b }
                if (r2 <= 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3 = 19
                r2.sendKSW_0x00_0x69(r3, r6, r6)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.util.List r2 = r2.soundNaviPkgList     // Catch:{ Exception -> 0x179b }
                r2.clear()     // Catch:{ Exception -> 0x179b }
                r2 = 3018(0xbca, float:4.229E-42)
                r1.removeMessages(r2)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0c2a:
                r2 = 3018(0xbca, float:4.229E-42)
                r3 = 5000(0x1388, double:2.4703E-320)
                r1.sendEmptyMessageDelayed(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0c33:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.bZlinkCarplayPhoneOn     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mTelephoneState     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.m_iBTStatus     // Catch:{ Exception -> 0x179b }
                if (r2 > r8) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_CARPLAY     // Catch:{ Exception -> 0x179b }
                int r3 = r3.getIntValue()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.ICallbackfn$Stub r4 = r4.mModeCallback     // Catch:{ Exception -> 0x179b }
                r2.setCurModeCallback(r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0c5c:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.rebootService()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0c63:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.disableGoogleApps2()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0c6a:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "com.szchoiceway.AvmService"
                boolean r2 = com.szchoiceway.eventcenter.EventUtils.isServiceAlive(r2, r3)     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "EventService"
                java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r4.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r5 = "KSW_HANDLER_360_SERVICE_XYQ_CHECK XYQAlive = "
                r4.append(r5)     // Catch:{ Exception -> 0x179b }
                r4.append(r2)     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x179b }
                android.util.Log.d(r3, r4)     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x0c91
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.start360XYQ()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0c91:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.readyOk360()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0c98:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.bindBtService()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0c9f:
                java.lang.String r2 = "1"
                java.lang.String r3 = "service.bootanim.exit"
                java.lang.String r3 = android.os.SystemProperties.get(r3)     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.equals(r3)     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "EventService"
                java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r4.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r5 = "KSW_HANDLER_LAUNCHER_INIT_CHECK init = "
                r4.append(r5)     // Catch:{ Exception -> 0x179b }
                r4.append(r2)     // Catch:{ Exception -> 0x179b }
                java.lang.String r5 = ", checkLauncherInitTime = "
                r4.append(r5)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                long r8 = r5.checkLauncherInitTime     // Catch:{ Exception -> 0x179b }
                r4.append(r8)     // Catch:{ Exception -> 0x179b }
                java.lang.String r5 = ", time = "
                r4.append(r5)     // Catch:{ Exception -> 0x179b }
                long r8 = android.os.SystemClock.elapsedRealtime()     // Catch:{ Exception -> 0x179b }
                r4.append(r8)     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x179b }
                android.util.Log.d(r3, r4)     // Catch:{ Exception -> 0x179b }
                r3 = 3012(0xbc4, float:4.221E-42)
                if (r2 == 0) goto L_0x0cf3
                r1.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.hasLauncherInit360 = r7     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.-$$Lambda$EventService$7$u_0x-5fo-M913I51LGdLPJoa7YY r2 = new com.szchoiceway.eventcenter.-$$Lambda$EventService$7$u_0x-5fo-M913I51LGdLPJoa7YY     // Catch:{ Exception -> 0x179b }
                r2.<init>()     // Catch:{ Exception -> 0x179b }
                r3 = 1500(0x5dc, double:7.41E-321)
                r1.postDelayed(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0cf3:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                long r4 = r2.checkLauncherInitTime     // Catch:{ Exception -> 0x179b }
                long r4 = r4 + r11
                long unused = r2.checkLauncherInitTime = r4     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                long r4 = r2.checkLauncherInitTime     // Catch:{ Exception -> 0x179b }
                r8 = 90000(0x15f90, double:4.4466E-319)
                int r2 = (r4 > r8 ? 1 : (r4 == r8 ? 0 : -1))
                if (r2 <= 0) goto L_0x0d1d
                java.lang.String r2 = "com.android.launcher3"
                com.szchoiceway.eventcenter.EventUtils.killProcess(r2)     // Catch:{ Exception -> 0x179b }
                r1.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.hasLauncherInit360 = r7     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.hasLauncherInit = r7     // Catch:{ Exception -> 0x179b }
                return
            L_0x0d1d:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.hasLauncherInit360 = r6     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.hasLauncherInit = r6     // Catch:{ Exception -> 0x179b }
                r1.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                r4 = 200(0xc8, double:9.9E-322)
                r1.sendEmptyMessageDelayed(r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0d31:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.handshakeSuccess     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x0d40
                r2 = 3011(0xbc3, float:4.22E-42)
                r1.removeMessages(r2)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0d40:
                r2 = 2584(0xa18, float:3.621E-42)
                r1.removeMessages(r2)     // Catch:{ Exception -> 0x179b }
                r1.sendEmptyMessage(r2)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0d4a:
                java.lang.String r2 = ""
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = r3.mStrMcuVer     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.equals(r3)     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 2584(0xa18, float:3.621E-42)
                r2.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r2.sendEmptyMessage(r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0d68:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.send0x7bClockControl()     // Catch:{ Exception -> 0x179b }
                r2 = 3009(0xbc1, float:4.217E-42)
                r1.removeMessages(r2)     // Catch:{ Exception -> 0x179b }
                r2 = 3009(0xbc1, float:4.217E-42)
                r3 = 30000(0x7530, double:1.4822E-319)
                r1.sendEmptyMessageDelayed(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0d7b:
                java.lang.Object r2 = r2.obj     // Catch:{ Exception -> 0x179b }
                byte[] r2 = (byte[]) r2     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3.start0x15EventMode(r2)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0d86:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.openSerialPort()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0d8d:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.hasEnterBackcar = r6     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0d94:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.hasSendBtStatus = r6     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0d9b:
                int r2 = r2.arg1     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "EventService"
                java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r4.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r5 = "handleMessage CARPLAY_PHONE_STATUS iStatus: "
                r4.append(r5)     // Catch:{ Exception -> 0x179b }
                r4.append(r2)     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x179b }
                android.util.Log.i(r3, r4)     // Catch:{ Exception -> 0x179b }
                if (r2 != r7) goto L_0x0dbe
                java.lang.String r2 = "vendor.audio.hu.aec"
                java.lang.String r3 = "true"
                android.os.SystemProperties.set(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0dbe:
                java.lang.String r2 = "vendor.audio.hu.aec"
                java.lang.String r3 = "false"
                android.os.SystemProperties.set(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0dc7:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.carplayAutoConnect = r6     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0dce:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.startBT()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0dd5:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "handleMessage: WHAT_HIDE_MEMU_ROOT"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.FloatingWindowManager r2 = r2.mFloatingWindowManager     // Catch:{ Exception -> 0x179b }
                r2.hideMenuView()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0de5:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "handleMessage: WHAT_HIDE_MEMU_CONTENT"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.FloatingWindowManager r2 = r2.mFloatingWindowManager     // Catch:{ Exception -> 0x179b }
                r2.hideMenuContent()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0df5:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "handleMessage: ctl.start, rcpservice"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = android.os.Build.MODEL     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "EventService"
                java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r4.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r5 = "handleMessage: model = "
                r4.append(r5)     // Catch:{ Exception -> 0x179b }
                r4.append(r2)     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x179b }
                android.util.Log.i(r3, r4)     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "rk3399"
                r2.startsWith(r3)     // Catch:{ Exception -> 0x179b }
                android.content.Intent r2 = new android.content.Intent     // Catch:{ Exception -> 0x179b }
                r2.<init>()     // Catch:{ Exception -> 0x179b }
                android.content.ComponentName r3 = new android.content.ComponentName     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "com.ap.play"
                java.lang.String r5 = "com.ap.play.RecordService"
                r3.<init>(r4, r5)     // Catch:{ Exception -> 0x179b }
                r2.setComponent(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3.startService(r2)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0e31:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r3 = r2.iInterfaceStatus_KSW     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.iBackCarState_KSW     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r5 = r5.m_isOff_BackLight_KSW     // Catch:{ Exception -> 0x179b }
                if (r5 == 0) goto L_0x0e44
                r7 = 0
            L_0x0e44:
                r2.sendKSW_0x00_0x76(r3, r4, r7)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.hasSendBtStatus     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x0e6a
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.hasEnterBackcar     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x0e6a
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.show360Dialog     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x0e6a
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.isUpgradeMode()     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x0e6a
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.sendKSW_0x00_0x68(r13, r6)     // Catch:{ Exception -> 0x179b }
            L_0x0e6a:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 2591(0xa1f, float:3.631E-42)
                r2.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 2591(0xa1f, float:3.631E-42)
                r4 = 5000(0x1388, double:2.4703E-320)
                r2.sendEmptyMessageDelayed(r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0e80:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.ksw_poweron_sd_usb_map_apk_list_update()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0e87:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.ksw_poweron_sd_usb_logo_update()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.ksw_poweron_sd_usb_logo_update_animal()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0e93:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "handleMessage: KSW_HANDLER_SD_USB_FACTORY_XML_UPDATE"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.ksw_poweron_sd_usb_factory_xml_update()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0ea1:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.startGPSLocListener()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x0ea8:
                android.os.Bundle r2 = r20.getData()     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "ChangeY"
                double r3 = r2.getDouble(r3)     // Catch:{ Exception -> 0x179b }
                java.lang.String r5 = "ChangeX"
                double r8 = r2.getDouble(r5)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                double r11 = r2.reX     // Catch:{ Exception -> 0x179b }
                double r11 = java.lang.Math.abs(r11)     // Catch:{ Exception -> 0x179b }
                double r8 = r8 - r11
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                double r11 = r2.reY     // Catch:{ Exception -> 0x179b }
                double r11 = java.lang.Math.abs(r11)     // Catch:{ Exception -> 0x179b }
                double r3 = r3 - r11
                monitor-enter(r19)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService.access$20908(r2)     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService.access$21018(r2, r3)     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                int r2 = r2.mYValueCount     // Catch:{ all -> 0x1047 }
                if (r2 != r10) goto L_0x0f83
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                r3 = 1084227584(0x40a00000, float:5.0)
                com.szchoiceway.eventcenter.EventService.access$21040(r2, r3)     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                int unused = r2.mYValueCount = r6     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r2 = r2.mYAvarageValue     // Catch:{ all -> 0x1047 }
                double r2 = (double) r2     // Catch:{ all -> 0x1047 }
                boolean r2 = java.lang.Double.isNaN(r2)     // Catch:{ all -> 0x1047 }
                if (r2 == 0) goto L_0x0f00
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                r3 = 0
                float unused = r2.mYAvarageValue = r3     // Catch:{ all -> 0x1047 }
            L_0x0f00:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r3 = r2.mYAvarageValue     // Catch:{ all -> 0x1047 }
                float r3 = -r3
                float unused = r2.mYAvarageValue = r3     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r2 = r2.mYAvarageValue     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r3 = r3.preY     // Catch:{ all -> 0x1047 }
                float r2 = r2 - r3
                float r2 = java.lang.Math.abs(r2)     // Catch:{ all -> 0x1047 }
                r3 = 1073741824(0x40000000, float:2.0)
                int r2 = (r2 > r3 ? 1 : (r2 == r3 ? 0 : -1))
                if (r2 <= 0) goto L_0x0f83
                android.view.animation.RotateAnimation r2 = new android.view.animation.RotateAnimation     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r12 = r3.preY     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r13 = r3.mYAvarageValue     // Catch:{ all -> 0x1047 }
                r14 = 1
                r15 = 1056964608(0x3f000000, float:0.5)
                r16 = 1
                r17 = 1056964608(0x3f000000, float:0.5)
                r11 = r2
                r11.<init>(r12, r13, r14, r15, r16, r17)     // Catch:{ all -> 0x1047 }
                r3 = 300(0x12c, double:1.48E-321)
                r2.setDuration(r3)     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                android.view.animation.DecelerateInterpolator r3 = r3.decelerateInterpolator     // Catch:{ all -> 0x1047 }
                r2.setInterpolator(r3)     // Catch:{ all -> 0x1047 }
                r2.setFillAfter(r7)     // Catch:{ all -> 0x1047 }
                java.lang.String r3 = "AYX"
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                java.lang.String r4 = r4.xml_client     // Catch:{ all -> 0x1047 }
                boolean r3 = r3.equalsIgnoreCase(r4)     // Catch:{ all -> 0x1047 }
                if (r3 == 0) goto L_0x0f69
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                android.widget.ImageView r3 = r3.mImgGyroView1     // Catch:{ all -> 0x1047 }
                if (r3 == 0) goto L_0x0f7a
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                android.widget.ImageView r3 = r3.mImgGyroView1     // Catch:{ all -> 0x1047 }
                r3.startAnimation(r2)     // Catch:{ all -> 0x1047 }
                goto L_0x0f7a
            L_0x0f69:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                android.widget.ImageView r3 = r3.mImgGyroView2     // Catch:{ all -> 0x1047 }
                if (r3 == 0) goto L_0x0f7a
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                android.widget.ImageView r3 = r3.mImgGyroView2     // Catch:{ all -> 0x1047 }
                r3.startAnimation(r2)     // Catch:{ all -> 0x1047 }
            L_0x0f7a:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r3 = r2.mYAvarageValue     // Catch:{ all -> 0x1047 }
                float unused = r2.preY = r3     // Catch:{ all -> 0x1047 }
            L_0x0f83:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService.access$21508(r2)     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService.access$21618(r2, r8)     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                int r2 = r2.mXValueCount     // Catch:{ all -> 0x1047 }
                if (r2 != r10) goto L_0x1044
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                r3 = 1084227584(0x40a00000, float:5.0)
                com.szchoiceway.eventcenter.EventService.access$21640(r2, r3)     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                int unused = r2.mXValueCount = r6     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r2 = r2.mXAvarageValue     // Catch:{ all -> 0x1047 }
                double r2 = (double) r2     // Catch:{ all -> 0x1047 }
                boolean r2 = java.lang.Double.isNaN(r2)     // Catch:{ all -> 0x1047 }
                if (r2 == 0) goto L_0x0fb4
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                r3 = 0
                float unused = r2.mXAvarageValue = r3     // Catch:{ all -> 0x1047 }
            L_0x0fb4:
                java.lang.String r2 = "AYX"
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                java.lang.String r3 = r3.xml_client     // Catch:{ all -> 0x1047 }
                boolean r2 = r2.equalsIgnoreCase(r3)     // Catch:{ all -> 0x1047 }
                if (r2 == 0) goto L_0x0fca
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r3 = r2.mXAvarageValue     // Catch:{ all -> 0x1047 }
                float r3 = -r3
                float unused = r2.mXAvarageValue = r3     // Catch:{ all -> 0x1047 }
            L_0x0fca:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r2 = r2.mXAvarageValue     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r3 = r3.preX     // Catch:{ all -> 0x1047 }
                float r2 = r2 - r3
                float r2 = java.lang.Math.abs(r2)     // Catch:{ all -> 0x1047 }
                r3 = 1073741824(0x40000000, float:2.0)
                int r2 = (r2 > r3 ? 1 : (r2 == r3 ? 0 : -1))
                if (r2 <= 0) goto L_0x1044
                android.view.animation.RotateAnimation r2 = new android.view.animation.RotateAnimation     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r3 = r3.preX     // Catch:{ all -> 0x1047 }
                float r9 = -r3
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r3 = r3.mXAvarageValue     // Catch:{ all -> 0x1047 }
                float r10 = -r3
                r11 = 1
                r12 = 1056964608(0x3f000000, float:0.5)
                r13 = 1
                r14 = 1056964608(0x3f000000, float:0.5)
                r8 = r2
                r8.<init>(r9, r10, r11, r12, r13, r14)     // Catch:{ all -> 0x1047 }
                r3 = 300(0x12c, double:1.48E-321)
                r2.setDuration(r3)     // Catch:{ all -> 0x1047 }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                android.view.animation.DecelerateInterpolator r3 = r3.decelerateInterpolator     // Catch:{ all -> 0x1047 }
                r2.setInterpolator(r3)     // Catch:{ all -> 0x1047 }
                r2.setFillAfter(r7)     // Catch:{ all -> 0x1047 }
                java.lang.String r3 = "AYX"
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                java.lang.String r4 = r4.xml_client     // Catch:{ all -> 0x1047 }
                boolean r3 = r3.equalsIgnoreCase(r4)     // Catch:{ all -> 0x1047 }
                if (r3 == 0) goto L_0x102a
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                android.widget.ImageView r3 = r3.mImgGyroView2     // Catch:{ all -> 0x1047 }
                if (r3 == 0) goto L_0x103b
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                android.widget.ImageView r3 = r3.mImgGyroView2     // Catch:{ all -> 0x1047 }
                r3.startAnimation(r2)     // Catch:{ all -> 0x1047 }
                goto L_0x103b
            L_0x102a:
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                android.widget.ImageView r3 = r3.mImgGyroView1     // Catch:{ all -> 0x1047 }
                if (r3 == 0) goto L_0x103b
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                android.widget.ImageView r3 = r3.mImgGyroView1     // Catch:{ all -> 0x1047 }
                r3.startAnimation(r2)     // Catch:{ all -> 0x1047 }
            L_0x103b:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x1047 }
                float r3 = r2.mXAvarageValue     // Catch:{ all -> 0x1047 }
                float unused = r2.preX = r3     // Catch:{ all -> 0x1047 }
            L_0x1044:
                monitor-exit(r19)     // Catch:{ all -> 0x1047 }
                goto L_0x17a6
            L_0x1047:
                r0 = move-exception
                r2 = r0
                monitor-exit(r19)     // Catch:{ all -> 0x1047 }
                throw r2     // Catch:{ Exception -> 0x179b }
            L_0x104b:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.mIsLancherRuning = r7     // Catch:{ Exception -> 0x179b }
                int r2 = android.os.Build.VERSION.SDK_INT     // Catch:{ Exception -> 0x179b }
                r3 = 19
                if (r2 > r3) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.startGetOSBackcarStateThread()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x105d:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Context r2 = r2.getApplicationContext()     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "activity"
                java.lang.Object r2 = r2.getSystemService(r3)     // Catch:{ Exception -> 0x179b }
                android.app.ActivityManager r2 = (android.app.ActivityManager) r2     // Catch:{ Exception -> 0x179b }
                java.util.List r2 = r2.getRunningTasks(r7)     // Catch:{ Exception -> 0x179b }
                r3 = 1024(0x400, float:1.435E-42)
                if (r2 == 0) goto L_0x119b
                int r4 = r2.size()     // Catch:{ Exception -> 0x179b }
                if (r4 <= 0) goto L_0x119b
                java.lang.Object r2 = r2.get(r6)     // Catch:{ Exception -> 0x179b }
                android.app.ActivityManager$RunningTaskInfo r2 = (android.app.ActivityManager.RunningTaskInfo) r2     // Catch:{ Exception -> 0x179b }
                android.content.ComponentName r2 = r2.topActivity     // Catch:{ Exception -> 0x179b }
                r1.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = r2.getClassName()     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = r2.getPackageName()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r5 = r5.mShowNaviKingCover     // Catch:{ Exception -> 0x179b }
                if (r5 != 0) goto L_0x109f
                boolean r5 = com.szchoiceway.eventcenter.EventUtils.isNaviKing(r2)     // Catch:{ Exception -> 0x179b }
                if (r5 == 0) goto L_0x109f
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r5.showNaviKingCover(r7)     // Catch:{ Exception -> 0x179b }
            L_0x109f:
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r5 = r5.mShowNaviKingCover     // Catch:{ Exception -> 0x179b }
                if (r5 == 0) goto L_0x10ba
                boolean r5 = com.szchoiceway.eventcenter.EventUtils.isNaviKing(r2)     // Catch:{ Exception -> 0x179b }
                if (r5 != 0) goto L_0x10ba
                java.lang.String r5 = "com.ivicar.avm"
                boolean r5 = r5.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r5 != 0) goto L_0x10ba
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r5.showNaviKingCover(r6)     // Catch:{ Exception -> 0x179b }
            L_0x10ba:
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r5 = r5.m_iUiIndex     // Catch:{ Exception -> 0x179b }
                if (r5 != r10) goto L_0x1194
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r5 = r5.mShowLRPhonePage     // Catch:{ Exception -> 0x179b }
                if (r5 == 0) goto L_0x10ca
                goto L_0x1160
            L_0x10ca:
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r5 = r5.mSplitScreen     // Catch:{ Exception -> 0x179b }
                if (r5 != 0) goto L_0x115f
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r5 = r5.mInRecentTask     // Catch:{ Exception -> 0x179b }
                if (r5 == 0) goto L_0x10d8
                goto L_0x115f
            L_0x10d8:
                java.lang.String r5 = "com.android.launcher3"
                boolean r5 = r5.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r5 == 0) goto L_0x10f9
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.m_iModeSet     // Catch:{ Exception -> 0x179b }
                r5 = 34
                if (r4 == r5) goto L_0x115f
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r4 = r4.m_iModeSet     // Catch:{ Exception -> 0x179b }
                r5 = 35
                if (r4 != r5) goto L_0x10f2
                goto L_0x115f
            L_0x10f2:
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.mShowAppList     // Catch:{ Exception -> 0x179b }
                goto L_0x115d
            L_0x10f9:
                java.lang.String r5 = "com.szchoiceway.videoplayer"
                boolean r5 = r5.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r5 == 0) goto L_0x110e
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.mInVideoFullScreen     // Catch:{ Exception -> 0x179b }
                if (r4 != 0) goto L_0x115f
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.mShowSoftKeyboard     // Catch:{ Exception -> 0x179b }
                if (r4 != 0) goto L_0x115f
                goto L_0x1160
            L_0x110e:
                java.lang.String r5 = "com.szchoiceway.musicplayer"
                boolean r5 = r5.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r5 != 0) goto L_0x1159
                java.lang.String r5 = "com.szchoiceway.btsuite"
                boolean r5 = r5.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r5 == 0) goto L_0x111f
                goto L_0x1159
            L_0x111f:
                java.lang.String r5 = "com.szchoiceway.ksw_dashboard"
                boolean r5 = r5.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r5 == 0) goto L_0x1130
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r5 = r5.mDashBoardIndex     // Catch:{ Exception -> 0x179b }
                if (r5 == 0) goto L_0x1130
                goto L_0x115f
            L_0x1130:
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.util.List r5 = r5.mLRFilterPackages     // Catch:{ Exception -> 0x179b }
                if (r5 == 0) goto L_0x1160
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.util.List r5 = r5.mLRFilterClasses     // Catch:{ Exception -> 0x179b }
                if (r5 == 0) goto L_0x1160
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.util.List r5 = r5.mLRFilterPackages     // Catch:{ Exception -> 0x179b }
                boolean r5 = r5.contains(r2)     // Catch:{ Exception -> 0x179b }
                if (r5 == 0) goto L_0x115f
                com.szchoiceway.eventcenter.EventService r5 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.util.List r5 = r5.mLRFilterClasses     // Catch:{ Exception -> 0x179b }
                boolean r4 = r5.contains(r4)     // Catch:{ Exception -> 0x179b }
                if (r4 != 0) goto L_0x115f
                goto L_0x1160
            L_0x1159:
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.mShowSoftKeyboard     // Catch:{ Exception -> 0x179b }
            L_0x115d:
                r7 = r7 ^ r4
                goto L_0x1160
            L_0x115f:
                r7 = 0
            L_0x1160:
                java.lang.String r4 = "com.szchoiceway.videoplayer"
                boolean r2 = r4.equals(r2)     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1172
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mInVideoFullScreen     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x1172
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.mInVideoFullScreen = r6     // Catch:{ Exception -> 0x179b }
            L_0x1172:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.m_iBTStatus     // Catch:{ Exception -> 0x179b }
                if (r2 > r8) goto L_0x1187
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mShowLRPhonePage     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x1187
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.mShowLRPhonePage = r6     // Catch:{ Exception -> 0x179b }
            L_0x1187:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mShowLRBottomView     // Catch:{ Exception -> 0x179b }
                if (r2 == r7) goto L_0x1194
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.showLRBottomView(r7)     // Catch:{ Exception -> 0x179b }
            L_0x1194:
                r4 = 400(0x190, double:1.976E-321)
                r1.sendEmptyMessageDelayed(r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x119b:
                java.lang.String r2 = "EventService"
                java.lang.String r4 = "taskLst == null"
                android.util.Log.i(r2, r4)     // Catch:{ Exception -> 0x179b }
                r1.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                r4 = 400(0x190, double:1.976E-321)
                r1.sendEmptyMessageDelayed(r3, r4)     // Catch:{ Exception -> 0x179b }
                return
            L_0x11ab:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.updateGPSInfo()     // Catch:{ Exception -> 0x179b }
                r2 = 1006(0x3ee, float:1.41E-42)
                r1.removeMessages(r2)     // Catch:{ Exception -> 0x179b }
                r2 = 1006(0x3ee, float:1.41E-42)
                r3 = 2000(0x7d0, double:9.88E-321)
                r1.sendEmptyMessageDelayed(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x11be:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 300(0x12c, float:4.2E-43)
                r2.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.StartConnetedCameraCrashService()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x11ce:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "HANDLER_ACC_SLEEP_LAST_MODE"
                android.util.Log.d(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.m_bModeMemory     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.ExecuteLastMode()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x11e2:
                r2 = 267(0x10b, float:3.74E-43)
                r1.removeMessages(r2)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.isSystemUpgrade     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x11f1
                goto L_0x17a6
            L_0x11f1:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.sendHeartBeatReset(r7, r7)     // Catch:{ Exception -> 0x179b }
                r2 = 267(0x10b, float:3.74E-43)
                r1.sendEmptyMessageDelayed(r2, r11)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x11fd:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int unused = r2.mLeftRightAndBackCamera = r6     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int unused = r2.mCurrCameraIndex = r6     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.endBackcar()     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "--->>> KSW endBackCar 222"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x1215:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mLeftRightAndBackCamera     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x122a
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.m_bInBackcarMode     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x122a
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengCloseAV()     // Catch:{ Exception -> 0x179b }
            L_0x122a:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mLeftRightAndBackCamera     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1240
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mBackcarConnected     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1281
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengStartAV1(r6)     // Catch:{ Exception -> 0x179b }
                goto L_0x1281
            L_0x1240:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mLeftRightAndBackCamera     // Catch:{ Exception -> 0x179b }
                if (r2 != r8) goto L_0x1256
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mBackcarConnected     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1281
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengStartAV1(r6)     // Catch:{ Exception -> 0x179b }
                goto L_0x1281
            L_0x1256:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mLeftRightAndBackCamera     // Catch:{ Exception -> 0x179b }
                if (r2 != r7) goto L_0x126c
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mBackcarConnected     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1281
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengStartAV2(r6)     // Catch:{ Exception -> 0x179b }
                goto L_0x1281
            L_0x126c:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mLeftRightAndBackCamera     // Catch:{ Exception -> 0x179b }
                if (r2 != r5) goto L_0x1281
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mBackcarConnected     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1281
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengStartAV3(r6)     // Catch:{ Exception -> 0x179b }
            L_0x1281:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "******ACC HANDLER_AVM_MODE_START_LEFT_RIGHT_BACK ******"
                android.util.Log.e(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x128a:
                java.lang.String r2 = "EventService"
                java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r3.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "--->>> BRZH "
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.mLeftCameraAV1     // Catch:{ Exception -> 0x179b }
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.mCenterCameraAV2     // Catch:{ Exception -> 0x179b }
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.mRightCameraAV3     // Catch:{ Exception -> 0x179b }
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.m_bPowerOff_bak_BRZH     // Catch:{ Exception -> 0x179b }
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.m_bPowerOff     // Catch:{ Exception -> 0x179b }
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x179b }
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mLeftCameraAV1     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1303
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mCenterCameraAV2     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1303
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mRightCameraAV3     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1303
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.m_bPowerOff_bak_BRZH     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x1303
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.m_bPowerOff_bak_BRZH = r6     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.m_bPowerOff     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1303
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.PowerOff(r7)     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "--->>> BRZH PowerOff ggg"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
            L_0x1303:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mLeftRightAndBackCamera     // Catch:{ Exception -> 0x179b }
                if (r2 > 0) goto L_0x1337
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mRightCameraAV3     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1337
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mLeftCameraAV1     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1337
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mCenterCameraAV2     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x1324
                goto L_0x1337
            L_0x1324:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int unused = r2.mCurrCameraIndex = r6     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.endBackcar()     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "--->>> KSW endBackCar 666"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x1337:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mLeftCameraAV1     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x134a
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r7) goto L_0x13a1
            L_0x1347:
                r2 = 1
            L_0x1348:
                r6 = 1
                goto L_0x13a2
            L_0x134a:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mCenterCameraAV2     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x135c
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r5) goto L_0x13a1
            L_0x135a:
                r2 = 2
                goto L_0x1348
            L_0x135c:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mRightCameraAV3     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x136e
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r8) goto L_0x13a1
            L_0x136c:
                r2 = 3
                goto L_0x1348
            L_0x136e:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mLeftRightAndBackCamera     // Catch:{ Exception -> 0x179b }
                if (r2 != r7) goto L_0x137f
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r7) goto L_0x13a1
                goto L_0x1347
            L_0x137f:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mLeftRightAndBackCamera     // Catch:{ Exception -> 0x179b }
                if (r2 != r5) goto L_0x1390
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r5) goto L_0x13a1
                goto L_0x135a
            L_0x1390:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mLeftRightAndBackCamera     // Catch:{ Exception -> 0x179b }
                if (r2 != r8) goto L_0x13a1
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r8) goto L_0x13a1
                goto L_0x136c
            L_0x13a1:
                r2 = 0
            L_0x13a2:
                if (r6 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3.boruizonghengCloseAV()     // Catch:{ Exception -> 0x179b }
                if (r2 == r7) goto L_0x13bf
                if (r2 == r5) goto L_0x13b8
                if (r2 == r8) goto L_0x13b1
                goto L_0x17a6
            L_0x13b1:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengStartAV3(r7)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x13b8:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengStartAV2(r7)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x13bf:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengStartAV1(r7)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x13c6:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x13db
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r7) goto L_0x13db
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengCloseAV()     // Catch:{ Exception -> 0x179b }
            L_0x13db:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r7) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengStartAV1(r7)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x13ea:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.sendKeyDownUpSync(r15)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.beep()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x13f6:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.miLastGPSMode     // Catch:{ Exception -> 0x179b }
                byte r2 = (byte) r2     // Catch:{ Exception -> 0x179b }
                byte unused = com.szchoiceway.eventcenter.EventService.byGPSMode = r2     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Context r2 = r2.getApplicationContext()     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "com.szchoiceway.navigation"
                java.lang.String r4 = "com.szchoiceway.navigation.MainActivity"
                com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning(r2, r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x140f:
                java.lang.String r2 = "EventService"
                java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x179b }
                r3.<init>()     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "--->>> BRZH "
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.mLeftCameraAV1     // Catch:{ Exception -> 0x179b }
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.mCenterCameraAV2     // Catch:{ Exception -> 0x179b }
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.mRightCameraAV3     // Catch:{ Exception -> 0x179b }
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.m_bPowerOff_bak_BRZH     // Catch:{ Exception -> 0x179b }
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r4 = r4.m_bPowerOff     // Catch:{ Exception -> 0x179b }
                r3.append(r4)     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x179b }
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mLeftCameraAV1     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1488
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mCenterCameraAV2     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1488
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mRightCameraAV3     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1488
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.m_bPowerOff_bak_BRZH     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x1488
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.m_bPowerOff_bak_BRZH = r6     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.m_bPowerOff     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1488
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.PowerOff(r7)     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "--->>> BRZH PowerOff fff"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
            L_0x1488:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mLeftRightAndBackCamera     // Catch:{ Exception -> 0x179b }
                if (r2 > 0) goto L_0x14bc
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mRightCameraAV3     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x14bc
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mLeftCameraAV1     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x14bc
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mCenterCameraAV2     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x14a9
                goto L_0x14bc
            L_0x14a9:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int unused = r2.mCurrCameraIndex = r6     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.endBackcar()     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "--->>> KSW endBackCar 555"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x14bc:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mLeftCameraAV1     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x14cf
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r7) goto L_0x1526
            L_0x14cc:
                r2 = 1
            L_0x14cd:
                r6 = 1
                goto L_0x1527
            L_0x14cf:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mCenterCameraAV2     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x14e1
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r5) goto L_0x1526
            L_0x14df:
                r2 = 2
                goto L_0x14cd
            L_0x14e1:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mRightCameraAV3     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x14f3
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r8) goto L_0x1526
            L_0x14f1:
                r2 = 3
                goto L_0x14cd
            L_0x14f3:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mLeftRightAndBackCamera     // Catch:{ Exception -> 0x179b }
                if (r2 != r7) goto L_0x1504
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r7) goto L_0x1526
                goto L_0x14cc
            L_0x1504:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mLeftRightAndBackCamera     // Catch:{ Exception -> 0x179b }
                if (r2 != r5) goto L_0x1515
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r5) goto L_0x1526
                goto L_0x14df
            L_0x1515:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mLeftRightAndBackCamera     // Catch:{ Exception -> 0x179b }
                if (r2 != r8) goto L_0x1526
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r8) goto L_0x1526
                goto L_0x14f1
            L_0x1526:
                r2 = 0
            L_0x1527:
                if (r6 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3.boruizonghengCloseAV()     // Catch:{ Exception -> 0x179b }
                if (r2 == r7) goto L_0x1544
                if (r2 == r5) goto L_0x153d
                if (r2 == r8) goto L_0x1536
                goto L_0x17a6
            L_0x1536:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengStartAV3(r7)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x153d:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengStartAV2(r7)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x1544:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengStartAV1(r7)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x154b:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x1560
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r8) goto L_0x1560
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengCloseAV()     // Catch:{ Exception -> 0x179b }
            L_0x1560:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.mCurrCameraIndex     // Catch:{ Exception -> 0x179b }
                if (r2 == r8) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.boruizonghengStartAV3(r7)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x156f:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.m_iUITypeVer     // Catch:{ Exception -> 0x179b }
                if (r2 != r9) goto L_0x157c
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.timeSetChange_KSW()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x157c:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.sendSysRTCTimerToCan()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 258(0x102, float:3.62E-43)
                r2.removeMessages(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 258(0x102, float:3.62E-43)
                r2.sendEmptyMessageDelayed(r3, r11)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x1595:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.m_iCanbustype     // Catch:{ Exception -> 0x179b }
                r3 = 21
                if (r2 != r3) goto L_0x15be
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.m_iCarstype_ID     // Catch:{ Exception -> 0x179b }
                if (r2 != r15) goto L_0x15be
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.m_iCarCanbusName_ID     // Catch:{ Exception -> 0x179b }
                if (r2 != r5) goto L_0x15be
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mBackcarConnected     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x15c3
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_RIGHT_CAMERA     // Catch:{ Exception -> 0x179b }
                r2.sendMode(r3, r7)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.startBackcar(r8)     // Catch:{ Exception -> 0x179b }
                goto L_0x15c3
            L_0x15be:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.SendAvmMode(r7)     // Catch:{ Exception -> 0x179b }
            L_0x15c3:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "******ACC HANDLER_AVM_MODE_START ******"
                android.util.Log.e(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x15cc:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "HANDLER_EXECUTE_LAST_MDOE"
                android.util.Log.d(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.ExecuteLastMode()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x15da:
                android.content.Intent r2 = new android.content.Intent     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "com.choiceway.eventcenter.EventUtils.MCU_MSG_ACC_DISCONNECTED_EVT"
                r2.<init>(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Context r3 = r3.getApplicationContext()     // Catch:{ Exception -> 0x179b }
                r3.sendBroadcast(r2)     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "******ACC Disconnected ******"
                android.util.Log.e(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x15f3:
                android.content.Intent r2 = new android.content.Intent     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "com.choiceway.eventcenter.EventUtils.MCU_MSG_BRAKE_EVT"
                r2.<init>(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Context r3 = r3.getApplicationContext()     // Catch:{ Exception -> 0x179b }
                r3.sendBroadcast(r2)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x1605:
                android.content.Context r2 = com.szchoiceway.eventcenter.EventService.mAppContext     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "com.szchoiceway.navigation"
                java.lang.String r4 = "com.szchoiceway.navigation.MainActivity"
                com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning(r2, r3, r4)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x1612:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "HANDLER_OS_BACKCAR_END == HANDLER_OS_BACKCAR_END"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mIsOSInBackcarMode     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1654
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mInitEventState     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1654
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mIsLancherRuning     // Catch:{ Exception -> 0x179b }
                if (r2 != 0) goto L_0x1632
                goto L_0x1654
            L_0x1632:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.initSysEventState()     // Catch:{ Exception -> 0x179b }
            L_0x1637:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.mIsLancherRuning = r7     // Catch:{ Exception -> 0x179b }
                int r2 = android.os.Build.VERSION.SDK_INT     // Catch:{ Exception -> 0x179b }
                r3 = 19
                if (r2 > r3) goto L_0x1647
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.startGetOSBackcarStateThread()     // Catch:{ Exception -> 0x179b }
            L_0x1647:
                int r2 = android.os.Build.VERSION.SDK_INT     // Catch:{ Exception -> 0x179b }
                r3 = 25
                if (r2 != r3) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.notifyOsEvnentServiceState()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x1654:
                return
            L_0x1655:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "HANDLER_RUN_LAST_MODE"
                android.util.Log.d(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MCU_VERSION     // Catch:{ Exception -> 0x179b }
                r2.sendMode(r3, r6)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.disableAutoStartRecv()     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.SharedPreferences r3 = r2.mSettings     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "KEY_SYS_LAST_MODE_SAVE"
                com.szchoiceway.eventcenter.EventUtils$eSrcMode r5 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_NONE     // Catch:{ Exception -> 0x179b }
                int r5 = r5.getIntValue()     // Catch:{ Exception -> 0x179b }
                int r3 = r3.getInt(r4, r5)     // Catch:{ Exception -> 0x179b }
                int unused = r2.miLastMode = r3     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.ExecuteLastMode()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x1684:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "handleMessage: startbtservice"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.content.Intent r3 = new android.content.Intent     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "com.szchoiceway.btsuite.BTService"
                r3.<init>(r4)     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "com.szchoiceway.btsuite"
                android.content.Intent r3 = r3.setPackage(r4)     // Catch:{ Exception -> 0x179b }
                r2.startService(r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x169f:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.ksw_m_b_sd_usb_cartype_xml_updating     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x16a8
                return
            L_0x16a8:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.ksw_poweron_sd_usb_cartype_xml_update()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x16af:
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "KSW_HANDLER_POWER_ON"
                android.util.Log.d(r2, r3)     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "--->>> 0x00 0x61 000"
                android.util.Log.i(r2, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.sendKSW_0x00_0x61()     // Catch:{ Exception -> 0x179b }
                r2 = 3011(0xbc3, float:4.22E-42)
                r1.removeMessages(r2)     // Catch:{ Exception -> 0x179b }
                r3 = 500(0x1f4, double:2.47E-321)
                r1.sendEmptyMessageDelayed(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x16ce:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                int r2 = r2.m_iUITypeVer     // Catch:{ Exception -> 0x179b }
                if (r2 != r9) goto L_0x16eb
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r2.removeMessages(r10)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r3 = 2000(0x7d0, double:9.88E-321)
                r2.sendEmptyMessageDelayed(r10, r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.sendBeatTimer_KSW(r5)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x16eb:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r2.removeMessages(r10)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                android.os.Handler r2 = r2.mEventHandler     // Catch:{ Exception -> 0x179b }
                r2.sendEmptyMessageDelayed(r10, r11)     // Catch:{ Exception -> 0x179b }
                byte[] r2 = new byte[r5]     // Catch:{ Exception -> 0x179b }
                r3 = 56
                r2[r6] = r3     // Catch:{ Exception -> 0x179b }
                r3 = -120(0xffffffffffffff88, float:NaN)
                r2[r7] = r3     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService$SendThread r3 = r3.mSendThread     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService$SendThread r3 = r3.mSendThread     // Catch:{ Exception -> 0x179b }
                r3.notifyToSend(r2)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x1712:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.bCalibrateLong     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.bCalibrateLong = r6     // Catch:{ Exception -> 0x179b }
                java.io.File r2 = new java.io.File     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "/data/local/calibratefile"
                r2.<init>(r3)     // Catch:{ Exception -> 0x179b }
                boolean r3 = r2.exists()     // Catch:{ Exception -> 0x179b }
                if (r3 == 0) goto L_0x1737
                r2.delete()     // Catch:{ Exception -> 0x179b }
                java.lang.String r2 = "EventService"
                java.lang.String r3 = "--->>>删除文件成功"
                android.util.Log.e(r2, r3)     // Catch:{ Exception -> 0x179b }
                goto L_0x173e
            L_0x1737:
                java.io.PrintStream r2 = java.lang.System.out     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "--->>>你要的文件没找到哦"
                r2.println(r3)     // Catch:{ Exception -> 0x179b }
            L_0x173e:
                android.content.Intent r2 = new android.content.Intent     // Catch:{ Exception -> 0x179b }
                r2.<init>()     // Catch:{ Exception -> 0x179b }
                android.content.ComponentName r3 = new android.content.ComponentName     // Catch:{ Exception -> 0x179b }
                java.lang.String r4 = "com.choiceway.calibrate"
                java.lang.String r5 = "com.choiceway.calibrate.CalibrateService"
                r3.<init>(r4, r5)     // Catch:{ Exception -> 0x179b }
                r2.setComponent(r3)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3.startService(r2)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x1755:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = r2.mCurTopPackageName     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.isNaviPkg(r3)     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.sendKeyDownUpSync(r8)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x1765:
                android.content.Intent r2 = new android.content.Intent     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "com.szchoiceway.action.reverse_state"
                r2.<init>(r3)     // Catch:{ Exception -> 0x179b }
                java.lang.String r3 = "state"
                r2.putExtra(r3, r7)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r3 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r3.sendBroadcast(r2)     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x1777:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.responseAutoKey = r7     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x177d:
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean r2 = r2.mShowFuncInThirdView     // Catch:{ Exception -> 0x179b }
                if (r2 == 0) goto L_0x17a6
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                boolean unused = r2.mShowFuncInThirdView = r6     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.bInLeftFocus = r6     // Catch:{ Exception -> 0x179b }
                android.content.Context r2 = com.szchoiceway.eventcenter.EventService.mAppContext     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver(r2, r5)     // Catch:{ Exception -> 0x179b }
                com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x179b }
                r2.refreshFocusView()     // Catch:{ Exception -> 0x179b }
                goto L_0x17a6
            L_0x179b:
                r0 = move-exception
                r2 = r0
                java.lang.String r3 = "EventService"
                java.lang.String r2 = r2.toString()
                android.util.Log.e(r3, r2)
            L_0x17a6:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.AnonymousClass7.handleMessage(android.os.Message):void");
        }

        public /* synthetic */ void lambda$handleMessage$0$EventService$7() {
            boolean unused = EventService.this.hasLauncherInit = true;
        }

        public /* synthetic */ void lambda$handleMessage$1$EventService$7() {
            boolean unused = EventService.this.init360 = true;
        }
    };
    public FloatingWindowManager mFloatingWindowManager;
    /* access modifiers changed from: private */
    public GPSMonitor mGPSMonitor = null;
    private ICallbackfn mGpsFocusCallbackfn = null;
    /* access modifiers changed from: private */
    public boolean mGpsSatelliteFix = false;
    private int mGpsState = 0;
    private String mGpsTime = BuildConfig.FLAVOR;
    /* access modifiers changed from: private */
    public Handler mHandler = new Handler() {
        public void handleMessage(Message message) {
            int i = message.what;
            if (i == 0) {
                byte[] bArr = (byte[]) message.obj;
                if (bArr != null) {
                    if (bArr.length > 5 && bArr[2] != 28) {
                        Log.d("SerialPortData", "receiveData: " + EventUtils.bytesToHexString(bArr));
                    }
                    try {
                        if (EventService.this.mProcessHandler != null) {
                            EventService.this.mProcessHandler.sendMessage(EventService.this.mProcessHandler.obtainMessage(bArr[0], bArr));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            } else if (i == 1) {
                new DialogReboot(EventService.this).showDialog(((Integer) message.obj).intValue());
            } else if (i == 2) {
                EventService.this.sendBroadcast(new Intent(EventUtils.ZXW_ACTION_REFRESH_AFTER_LOCALE_CHANGED));
            } else if (i == 3 && EventService.this.dialogImportConfirm != null) {
                EventService.this.dialogImportConfirm.showDialog();
            }
        }
    };
    public boolean mHasCancelUpgradeMcu = false;
    /* access modifiers changed from: private */
    public boolean mIPodConnected = false;
    private String mIcChecked = BuildConfig.FLAVOR;
    /* access modifiers changed from: private */
    public ImageView mImgGyroView1 = null;
    /* access modifiers changed from: private */
    public ImageView mImgGyroView2 = null;
    public String mImitateOriginalCarClient = BuildConfig.FLAVOR;
    public int mImitateOriginalCarUiIndex = 0;
    /* access modifiers changed from: private */
    public boolean mInGetOSBackcarState = false;
    private boolean mInMultiWindowMode = false;
    public boolean mInRecentTask = false;
    private boolean mInThird = false;
    public boolean mInVideoFullScreen = false;
    /* access modifiers changed from: private */
    public boolean mInitEventState = false;
    private boolean mIsCarPlay = true;
    public boolean mIsDomestic = false;
    public boolean mIsFirstConnect = true;
    /* access modifiers changed from: private */
    public boolean mIsGPSGetLocation = false;
    private boolean mIsGetOSBackcarStateThreadIsRuning = false;
    /* access modifiers changed from: private */
    public boolean mIsLancherRuning = false;
    /* access modifiers changed from: private */
    public boolean mIsOSInBackcarMode = true;
    private boolean mIsStandyMode = false;
    private View mIv4gLevel;
    private View mIvBtStatus;
    private View mIvGpsStatus;
    private View mIvSupportGpsStatus;
    private View mIvUsbStatus;
    private ImageView mIvWeatherIcon;
    private View mIvWifiSignalLevel;
    /* access modifiers changed from: private */
    public boolean mLAMPConntected = false;
    private LandRoverBottomView mLRBottomView = null;
    private LandRoverCopilotBottomView mLRCBottomView = null;
    /* access modifiers changed from: private */
    public List<String> mLRFilterClasses;
    /* access modifiers changed from: private */
    public List<String> mLRFilterPackages;
    private View mLRVolumeView = null;
    private String mLanguage;
    private int mLastOldMode = 0;
    private View mLayout4g;
    /* access modifiers changed from: private */
    public boolean mLeftCameraAV1 = false;
    /* access modifiers changed from: private */
    public int mLeftRightAndBackCamera = 0;
    public boolean mLinkVisible = false;
    /* access modifiers changed from: private */
    public final Object mLock = new Object();
    /* access modifiers changed from: private */
    public int mMediaState = 0;
    /* access modifiers changed from: private */
    public boolean mMipiScreen = false;
    /* access modifiers changed from: private */
    public ICallbackfn.Stub mModeCallback = new ICallbackfn.Stub() {
        public void notifyEvt(int i, int i2, int i3, byte[] bArr, String str) throws RemoteException {
        }
    };
    public EvtModel mModel = null;
    private EvtModelFile mModelFile = null;
    private ImageView mMouseWndView;
    private ImageView mMusicCover;
    private ImageView mMusicCoverNor;
    public boolean mMuteMusicZlinkPhone = false;
    private final UNavSndObserver mObserver = new UNavSndObserver();
    private WindowManager.LayoutParams mParamNaviKingCover = new WindowManager.LayoutParams();
    /* access modifiers changed from: private */
    public PowerOffEvt mPowerOffEvt = null;
    protected Handler mProcessHandler = null;
    /* access modifiers changed from: private */
    public ProgressBar mProgressBar;
    /* access modifiers changed from: private */
    public ProgressBar mProgressBar2;
    /* access modifiers changed from: private */
    public boolean mRadioAFState = false;
    /* access modifiers changed from: private */
    public boolean mRadioAMSState = false;
    /* access modifiers changed from: private */
    public boolean mRadioAPSState = false;
    /* access modifiers changed from: private */
    public int mRadioBndNum = 0;
    private ICallbackfn mRadioCallbackfn = null;
    /* access modifiers changed from: private */
    public int mRadioCurFreq = 0;
    /* access modifiers changed from: private */
    public int[] mRadioFreqList = new int[40];
    /* access modifiers changed from: private */
    public boolean mRadioLOCState = false;
    /* access modifiers changed from: private */
    public String mRadioPSName = BuildConfig.FLAVOR;
    /* access modifiers changed from: private */
    public int mRadioPTYNum = 0;
    /* access modifiers changed from: private */
    public boolean mRadioPTYState = false;
    /* access modifiers changed from: private */
    public boolean mRadioRDSState = false;
    /* access modifiers changed from: private */
    public boolean mRadioSTState = false;
    /* access modifiers changed from: private */
    public boolean mRadioStIconState = false;
    /* access modifiers changed from: private */
    public boolean mRadioTAState = false;
    /* access modifiers changed from: private */
    public boolean mRadioTpIconState = false;
    /* access modifiers changed from: private */
    public boolean mRadioTrafficState = false;
    /* access modifiers changed from: private */
    public int mRadioTuneNum = 0;
    public List<ResolveInfo> mRecentTasks = new ArrayList();
    public boolean mRecordOpen = false;
    /* access modifiers changed from: private */
    public int mRecorderState = 0;
    private SendDataToRichanCan mRichanCanModel = null;
    /* access modifiers changed from: private */
    public boolean mRightCameraAV3 = false;
    /* access modifiers changed from: private */
    public int mRunningState = -1;
    protected SendThread mSendThread = null;
    private SerialPortManager mSerialManager = null;
    private SerialPort mSerialPort = null;
    /* access modifiers changed from: private */
    public SharedPreferences mSettings = null;
    private SettingsObserver mSettingsObserver;
    /* access modifiers changed from: private */
    public boolean mShowAppList = false;
    /* access modifiers changed from: private */
    public boolean mShowFuncInThirdView = false;
    /* access modifiers changed from: private */
    public boolean mShowLRBottomView = false;
    /* access modifiers changed from: private */
    public boolean mShowLRPhonePage = false;
    private boolean mShowLandRoverBottomSystem = false;
    private boolean mShowLandRoverVolume = false;
    /* access modifiers changed from: private */
    public boolean mShowNaviKingCover = false;
    public boolean mShowSoftKeyboard = false;
    public boolean mShowTxzIcon = true;
    private boolean mShowVolTip = false;
    private Object mSleep = new Object();
    private int mSpecialSetLRHostIndex = -1;
    private int mSpecialSetLRPanelLeftIndex = -1;
    private int mSpecialSetLRPanelRightIndex = -1;
    private int mSpecialSetLRWheelControlIndex = -1;
    public boolean mSplitScreen = false;
    private stValidInfo mStValidInfor = new stValidInfo();
    private boolean mStartAdbdZxw = false;
    private EventUtils.eSrcMode mStartMode = EventUtils.eSrcMode.SRC_NONE;
    private long mStartModeCount = 0;
    protected String mStrMcuVer = BuildConfig.FLAVOR;
    protected String mStrTFTVer = BuildConfig.FLAVOR;
    public boolean mSupportSleep = false;
    /* access modifiers changed from: private */
    public int mSysNightDayMode = 0;
    public SysProviderOpt mSysProviderOpt = null;
    private int mTVBand = 0;
    private ICallbackfn mTVCallbackfn = null;
    private int mTVChannel = 0;
    private int mTVFreq = 0;
    private int mTVOutController = 0;
    private int mTVVHF = 0;
    /* access modifiers changed from: private */
    public int mTelephoneState = 0;
    protected Toast mTip = null;
    /* access modifiers changed from: private */
    public float mTouchStartX;
    /* access modifiers changed from: private */
    public float mTouchStartY;
    private TextView mTvCityName;
    private TextView mTvSegRemainDisInfor;
    private TextView mTvWeatherTitle;
    public boolean mTxzDialogShow = false;
    /* access modifiers changed from: private */
    public EventUtils.eSrcMode mValidMode = EventUtils.eSrcMode.SRC_NULL;
    private ICallbackfn mValidModeCallbackfn = null;
    private VerticalViewPager mVerticalViewPager;
    private View mViewNaviKingCover;
    private int[] mWeatherIConLst;
    public int mWifiState = 0;
    /* access modifiers changed from: private */
    public float mXAvarageValue = 0.0f;
    /* access modifiers changed from: private */
    public int mXValueCount = 0;
    /* access modifiers changed from: private */
    public float mYAvarageValue = 0.0f;
    /* access modifiers changed from: private */
    public int mYValueCount = 0;
    public int mZlinLinkMode = -1;
    private boolean m_BtSpeakOnBackLight = false;
    EventApp m_EvtApp = null;
    /* access modifiers changed from: private */
    public MouseFloatEvent m_MouseFloatEvent = null;
    private boolean m_bBTSpeakMode = false;
    public boolean m_bBackCarAid = false;
    public boolean m_bBackcarSnd = true;
    public boolean m_bBackcarSndAtt = true;
    private boolean m_bFirstMouse = false;
    public boolean m_bGreenLED = false;
    /* access modifiers changed from: private */
    public boolean m_bInBackcarMode = false;
    /* access modifiers changed from: private */
    public boolean m_bLongKeyDown = false;
    private boolean m_bMcuWriteError = false;
    public boolean m_bModeMemory = true;
    /* access modifiers changed from: private */
    public boolean m_bPowerOff = false;
    /* access modifiers changed from: private */
    public boolean m_bPowerOff_bak_BRZH = false;
    private boolean m_bTime24_KSW = false;
    public boolean m_bWheelTrack = true;
    public boolean m_bZhongJiPan = false;
    private int m_b_have_DVD = 0;
    /* access modifiers changed from: private */
    public boolean m_btNormalDelay_KSW = false;
    private boolean m_iBTPlayStatus = false;
    /* access modifiers changed from: private */
    public int m_iBTStatus = 0;
    public int m_iBTTypeVer = 3;
    public int m_iBackCarVideoStatus = 0;
    public int m_iCanbustype = 0;
    public int m_iCarCanbusName_ID = 0;
    public int m_iCarstype_ID = 0;
    protected int m_iCurrDim = 0;
    private int m_iCurrFocus = -1;
    /* access modifiers changed from: private */
    public int m_iDiscAutoInCount = 0;
    public int m_iGPSVolVal = 20;
    public int m_iModeSet = 0;
    private int m_iSpeakValue = 0;
    private int m_iTimeType_KSW = -1;
    public int m_iUITypeVer = 101;
    public int m_iUiIndex = 1;
    private boolean m_isBtConnected = false;
    public boolean m_isOff_BackLight_KSW = false;
    private List<String> mapApkLst = null;
    protected boolean mbExitRecThread = false;
    /* access modifiers changed from: private */
    public boolean mbInTouchKeyLearnMode = false;
    boolean mbVoiceStart = true;
    /* access modifiers changed from: private */
    public boolean menuDownState = false;
    /* access modifiers changed from: private */
    public int miLastGPSMode;
    /* access modifiers changed from: private */
    public int miLastMode;
    private int miLearnKeyID = -1;
    public String[] musicPkgLst = {"com.android.music", "cn.kuwo.kwmusiccar", "cn.kuwo.player", "com.kugou.android", "com.kugou.playerHD", "com.sds.android.ttpod", "com.tencent.qqmusic", "com.tencent.qqmusicpad", "com.tencent.qqmusiccar", "com.duomi.android", "com.android.browser", "ru.yandex.music", "com.duomi.android", "com.mxtech.videoplayer.pro", "com.maxmpz.audioplayer", "com.jetappfactory.jetaudioplus", EventUtils.EXPLORER_MODE_PACKAGE_NAME, "com.ankai.cardvr", "com.spotify.music", "com.google.android.youtube", "com.kugou.android.auto", "com.kugou.android.auto"};
    /* access modifiers changed from: private */
    public String oldPackageName = BuildConfig.APPLICATION_ID;
    private ServiceConnection osc = new ServiceConnection() {
        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
            Log.i(EventService.TAG, "onServiceConnected.......");
            EventService.this.mCameraService = ICameraCrashService.Stub.asInterface(iBinder);
        }

        public void onServiceDisconnected(ComponentName componentName) {
            Log.i(EventService.TAG, "onServiceDisconnected.....");
            EventService.this.mCameraService = null;
        }
    };
    private PackageManager packageManager = null;
    /* access modifiers changed from: private */
    public float preX = 0.0f;
    /* access modifiers changed from: private */
    public float preY = 0.0f;
    private float preZ = 0.0f;
    /* access modifiers changed from: private */
    public int radarBackLeft = 255;
    /* access modifiers changed from: private */
    public int radarBackLeftMiddle = 255;
    /* access modifiers changed from: private */
    public int radarBackRight = 255;
    /* access modifiers changed from: private */
    public int radarBackRightMiddle = 255;
    /* access modifiers changed from: private */
    public int radarFrontLeft = 255;
    /* access modifiers changed from: private */
    public int radarFrontLeftMiddle = 255;
    /* access modifiers changed from: private */
    public int radarFrontRight = 255;
    /* access modifiers changed from: private */
    public int radarFrontRightMiddle = 255;
    /* access modifiers changed from: private */
    public double reX = 0.0d;
    /* access modifiers changed from: private */
    public double reY = 0.0d;
    private double reZ = 0.0d;
    private boolean reboot = false;
    /* access modifiers changed from: private */
    public int receive_can_key_time = 0;
    /* access modifiers changed from: private */
    public boolean responseAutoKey = true;
    /* access modifiers changed from: private */
    public boolean rightLight = false;
    private RelativeLayout rlCarDoor;
    private RelativeLayout rlCarDoor1;
    private RelativeLayout rlFrontWinMaxOffShow;
    private RelativeLayout rlNaviView;
    private RelativeLayout rlSplitScreenMusicView;
    private RelativeLayout rlSplitScreenNaviView;
    private RelativeLayout rlSplitScreenPagerView;
    TouchKeyStruct rtHome = null;
    TouchKeyStruct rtKeyBnd = null;
    TouchKeyStruct rtKeyHungUp = null;
    TouchKeyStruct rtKeyMode = null;
    TouchKeyStruct rtKeyMute = null;
    TouchKeyStruct rtKeyNavi = null;
    TouchKeyStruct rtKeyNext = null;
    TouchKeyStruct rtKeyPrev = null;
    TouchKeyStruct rtKeyTalk = null;
    TouchKeyStruct rtPower = null;
    TouchKeyStruct rtReturn = null;
    TouchKeyStruct rtVolDown = null;
    TouchKeyStruct rtVolUp = null;
    public int screenHeight;
    public int screenWidth;
    public boolean show360CarplayConnected = false;
    public boolean show360Dialog = false;
    private boolean showAirTemp = true;
    /* access modifiers changed from: private */
    public List<String> soundNaviPkgList;
    private boolean speakWhenAUXBT = false;
    private boolean speakWhenAUXCarplay = false;
    boolean speakWhenOriginal = false;
    private int start0x15Time = 0;
    private final GpsStatus.Listener statusListener = new GpsStatus.Listener() {
        public void onGpsStatusChanged(int i) {
            GpsStatus gpsStatus;
            Iterable<GpsSatellite> satellites;
            if (EventService.this.locationManager != null && i == 4 && (gpsStatus = EventService.this.locationManager.getGpsStatus((GpsStatus) null)) != null && (satellites = gpsStatus.getSatellites()) != null) {
                Iterator<GpsSatellite> it = satellites.iterator();
                int i2 = 0;
                while (it != null && it.hasNext()) {
                    if (it.next().usedInFix()) {
                        i2++;
                    }
                }
                if (i2 >= 3) {
                    boolean unused = EventService.this.mGpsSatelliteFix = true;
                }
            }
        }
    };
    private String[] sysApkLst = {EventUtils.ESTRONGS_MODE_PACKAGE_NAME, EventUtils.ESUPER_MODE_PACKAGE_NAME, "com.unisound", "com.szchoiceway", "com.choiceway", EventUtils.PHONEAPP_MODE_PACKAGE_NAME, "com.baidu.baidumaps", "com.alensw.PicFolder", "com.android.settings", "com.mxnavi", "com.autonavi", "com.cld", "com.baidu.BaiduMap", "cld.navi", "com.android.systemui", "com.tencent.mobileqq", "com.tencent.mm", "com.uc.browser.hd", "com.kingwaytek", "com.papago.M11General", "com.loco", "com.sygic.aura", "com.anwensoft.cardvr", "com.navngo.igo.javaclient", "com.tencent.map", "com.mapbar.android", "com.uu.uunavi", "com.mapbar", "com.zxwtxz.sdkdemo", "ru.yandex.yandexnavi", "com.navitel", "com.nng.igo", "com.navngo.igo", "com.mng.igo", "com.garmin", "com.skt.tmap", "com.txznet.txz", "com.aispeech.aios", "com.nng.igoprimoisr2013march24.javaclient", "com.aispeech.aios.bridge", "com.mireo.dontpanic.android.incyclone", "com.example.administrator.eqsetapplication", "com.here.app.maps", "com.waze", EventUtils.ZLINK_MODE_PACKAGE_NAME, "com.txznet.smartadapter", "com.navigation.offlinemaps.gps", "com.mapswithme.maps.pro", "com.mapquest.android.ace", "com.alk.copilot.mapviewer", "com.mapfactor.navigator"};
    /* access modifiers changed from: private */
    public boolean thirdPhoneOn = false;
    private TextView tvAirLeftTemp;
    private TextView tvAirLeftTempUnit;
    private TextView tvAirOff;
    private TextView tvAirRightTemp;
    private TextView tvAirRightTempUnit;
    private TextView tvAirWindSpeed;
    private TextView tvAirWindSpeedLeft;
    private TextView tvAirWindSpeedRight;
    private TextView tvCameraSpeed;
    private TextView tvCurTime;
    private TextView tvCurrentVolume;
    private TextView tvEco;
    private TextView tvLatitude;
    private TextView tvLongitude;
    private TextView tvNaviNoData;
    private TextView tvNextRouadName;
    private TextView tvRouteRemainDis;
    private TextView tvRouteRemainTime;
    private TextView tvSync;
    private TextView tvTrackInfor;
    /* access modifiers changed from: private */
    public TextView tvVolType;
    private TextView twCurDataTimeWeek;
    private TextView twCurDataTimeYMD;
    private int txzOilWaringValue = -1;
    private int txzSpeedWaringValue = -1;
    public int use_RN6752 = 0;
    /* access modifiers changed from: private */
    public View view;
    private View viewAirOn;
    /* access modifiers changed from: private */
    public WindowManager.LayoutParams wmCalibrateParams = null;
    /* access modifiers changed from: private */
    public float x;
    /* access modifiers changed from: private */
    public XmlUtils xmlUtils;
    public String xml_client = null;
    /* access modifiers changed from: private */
    public double xx = 0.0d;
    /* access modifiers changed from: private */
    public float y;
    /* access modifiers changed from: private */
    public double yy = 0.0d;
    private String zxwClearPwd = "/mnt/usb_storage/zxwClearPwd.cfg";
    /* access modifiers changed from: private */
    public double zz = 0.0d;

    private byte[] intToBytes(int i) {
        byte[] bArr = new byte[4];
        bArr[3] = (byte) ((i >> 24) & 255);
        bArr[2] = (byte) ((i >> 16) & 255);
        bArr[1] = (byte) ((i >> 8) & 255);
        bArr[0] = (byte) (i & 255);
        return bArr;
    }

    /* access modifiers changed from: private */
    public void setOutput(boolean z) {
    }

    /* access modifiers changed from: protected */
    public void ExecuteLastMode() {
    }

    public void SaveConfig() {
    }

    public void appySetting() {
    }

    public void commitSetting() {
    }

    /* access modifiers changed from: package-private */
    public boolean getSysStandyModeState() {
        return false;
    }

    public void ksw_Send8902BackcarMod_0x0d() {
    }

    public void ksw_Send8902BackcarMod_0x0e() {
    }

    public void ksw_Send8902BackcarMod_0x11() {
    }

    public void ksw_Send8902BackcarMod_0x13() {
    }

    public void ksw_Send8902BackcarMod_0x14() {
    }

    public void ksw_Send8902BackcarMod_0x15() {
    }

    public void ksw_Send8902BackcarMod_0x19() {
    }

    public int onStartCommand(Intent intent, int i, int i2) {
        return 1;
    }

    public void openTVout(boolean z) {
    }

    public EventService() {
    }

    static /* synthetic */ int access$20908(EventService eventService) {
        int i = eventService.mYValueCount;
        eventService.mYValueCount = i + 1;
        return i;
    }

    static /* synthetic */ float access$21018(EventService eventService, double d) {
        float f = (float) (((double) eventService.mYAvarageValue) + d);
        eventService.mYAvarageValue = f;
        return f;
    }

    static /* synthetic */ float access$21040(EventService eventService, float f) {
        float f2 = eventService.mYAvarageValue / f;
        eventService.mYAvarageValue = f2;
        return f2;
    }

    static /* synthetic */ int access$21508(EventService eventService) {
        int i = eventService.mXValueCount;
        eventService.mXValueCount = i + 1;
        return i;
    }

    static /* synthetic */ float access$21618(EventService eventService, double d) {
        float f = (float) (((double) eventService.mXAvarageValue) + d);
        eventService.mXAvarageValue = f;
        return f;
    }

    static /* synthetic */ float access$21640(EventService eventService, float f) {
        float f2 = eventService.mXAvarageValue / f;
        eventService.mXAvarageValue = f2;
        return f2;
    }

    static /* synthetic */ int access$22808(EventService eventService) {
        int i = eventService.checkCopyTime;
        eventService.checkCopyTime = i + 1;
        return i;
    }

    static /* synthetic */ int access$23308() {
        int i = iGPSGetLocation;
        iGPSGetLocation = i + 1;
        return i;
    }

    static /* synthetic */ int access$3108(EventService eventService) {
        int i = eventService.receive_can_key_time;
        eventService.receive_can_key_time = i + 1;
        return i;
    }

    static {
        LOGO_PATH = "/dev/block/by-name/privdata2";
        if (Build.MODEL.equals("GT3")) {
            LOGO_PATH = "/dev/block/by-name/logo";
        }
    }

    public void sendMuteState(boolean z) {
        this.bMuteStatus = z;
        sendToOSData();
    }

    public void sendToOSData() {
        int i;
        if (Build.VERSION.SDK_INT > 19 || (i = this.m_iUITypeVer) == 101 || i == 48 || i == 102) {
            Intent intent = new Intent("com.szchoiceway.SEND_APP_ACTION_EVT");
            intent.putExtra("VoiceKeyMUTE", getMuteStatus() ? 1 : 0);
            if (getMuteStatus()) {
                this.iMainVal = 0;
            } else {
                int i2 = this.m_iUITypeVer;
                if (!(i2 == 48 || i2 == 101) || Build.VERSION.SDK_INT <= 19) {
                    this.iMainVal = (byte) getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, this.iMainVal);
                }
            }
            Log.i(TAG, "sendToOSData: bMuteStatus = " + this.bMuteStatus + ", iMainVal = " + this.iMainVal);
            intent.putExtra("VoiceKeyMAINVOL", this.iMainVal);
            if (GetCurrDim() + 1 == 1) {
                intent.putExtra("VoiceKeyDIM", 2);
            } else if (GetCurrDim() + 1 == 2) {
                intent.putExtra("VoiceKeyDIM", 1);
            } else {
                intent.putExtra("VoiceKeyDIM", GetCurrDim() + 1);
            }
            if ((this.m_iModeSet != 9 || !"XinCheng".equalsIgnoreCase(this.xml_client)) && this.m_iModeSet != 14) {
                intent.putExtra("VoiceKeyDIM", GetCurrDim());
            } else {
                intent.putExtra("VoiceKeyDIM", 0);
            }
            sendBroadcastAsUser(intent, UserHandle.ALL);
            Log.i(TAG, "sendToOSData --- mute=" + (getMuteStatus() ? 1 : 0) + "---iMainVal=" + this.iMainVal + "---DIM=" + GetCurrDim());
            SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
            if (sysProviderOpt != null) {
                this.bIsShowVolumeBarFatSet = sysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_VOLUME_BAR, this.bIsShowVolumeBarFatSet);
                Intent intent2 = new Intent(EventUtils.ACTION_ICON_DISPLAY);
                intent2.putExtra(EventUtils.EXTRA_SHOW_VOLUME_BAR, this.bIsShowVolumeBarFatSet);
                getApplicationContext().sendBroadcastAsUser(intent2, UserHandle.ALL);
            }
        }
    }

    public /* synthetic */ LexusAirViewComponent lambda$new$0$EventService() {
        return new LexusAirViewComponent(this);
    }

    public void onCreate() {
        super.onCreate();
        Log.i(TAG, "onCreate EventService");
        mAppContext = this;
        instance = this;
        this.mSysProviderOpt = SysProviderOpt.getInstance(this);
        initSysProvideParam2();
        this.xmlUtils = new XmlUtils(mAppContext);
        if (checkRestoreFactory()) {
            checkRestoreFactory2();
        } else if (checkConfig()) {
            Message message = new Message();
            message.what = 1;
            message.obj = 1;
            this.mHandler.sendMessage(message);
        } else {
            startCheckThread();
            this.audioManager = (AudioManager) getSystemService("audio");
            this.m_EvtApp = (EventApp) getApplication();
            this.mEventHandler.removeMessages(EventUtils.HANDLER_DELAY_LAND);
            this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_DELAY_LAND, 5000);
            this.mEventHandler.sendEmptyMessageDelayed(258, 6000);
            this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_INIT_SCREEN_ORIEN, 10000);
            this.mEventHandler.removeMessages(EventUtils.HANDLER_DELAY_0X15_EVENT);
            this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_DELAY_0X15_EVENT, 300000);
            this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_LAUNCHER_INIT_CHECK);
            this.mEventHandler.sendEmptyMessage(EventUtils.KSW_HANDLER_LAUNCHER_INIT_CHECK);
            if (Build.VERSION.SDK_INT > 31) {
                this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_SET_DHW_CID, 15000);
            }
            this.checkLauncherInitTime = SystemClock.elapsedRealtime();
            SharedPreferences sharedPreferences = getSharedPreferences("com.szchoiceway.eventcenter.setting", 4);
            this.mSettings = sharedPreferences;
            this.mEditor = sharedPreferences.edit();
            DisplayMetrics displayMetrics = getResources().getDisplayMetrics();
            this.screenWidth = displayMetrics.widthPixels;
            int i = displayMetrics.heightPixels;
            this.screenHeight = i;
            this.iMouseMoveX = this.screenWidth / 2;
            this.iMouseMoveY = i / 2;
            Log.i(TAG, "onCreate: screenWidth = " + this.screenWidth + "，screenHeight = " + this.screenHeight);
            int i2 = this.screenWidth;
            if (i2 == 1920 && this.screenHeight == 720) {
                mScreen1920x720 = true;
            } else if (i2 == 1280 && this.screenHeight == 480) {
                mScreen1280x480 = true;
            }
            this.mLanguage = Locale.getDefault().getLanguage();
            this.mCountry = Locale.getDefault().getCountry();
            this.m_iUITypeVer = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SET_USER_UI_TYPE, this.m_iUITypeVer);
            this.m_iModeSet = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_MODE_SELECTION, this.m_iModeSet);
            Log.i(TAG, "onCreate: m_iModeSet = " + this.m_iModeSet);
            this.xml_client = this.mSysProviderOpt.getRecordValue(SysProviderOpt.KSW_FACTORY_SET_CLIENT, this.xml_client);
            this.mImitateOriginalCarUiIndex = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.IMITAGE_ORIGINAL_CAL_STYLE_INDEX, this.mImitateOriginalCarUiIndex);
            this.mImitateOriginalCarClient = this.mSysProviderOpt.getRecordValue(SysProviderOpt.IMITAGE_ORIGINAL_CAL_STYLE_CLIENT, this.mImitateOriginalCarClient);
            this.mImitateOriginalCarClient = "CP2";
            this.m_iUiIndex = Customer.getUIIndex(this);
            this.mMipiScreen = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_IS_9211_DEVICE, false);
            startServices();
            initSystemParam();
            SettingsObserver settingsObserver = new SettingsObserver(mAppContext, this.mHandler);
            this.mSettingsObserver = settingsObserver;
            settingsObserver.observer();
            Log.i(TAG, "onCreate: xml_client = " + this.xml_client + ", m_iUiIndex = " + this.m_iUiIndex + ", m_iModeSet = " + this.m_iModeSet);
            this.mGPSMonitor = new GPSMonitor(this);
            if (checkNetworkAvailable()) {
                this.mGPSMonitor.setUpdateTime(true);
                this.mGPSMonitor.getLocation();
            }
            createFloatViews();
            Handler handler = this.mEventHandler;
            if (handler != null) {
                handler.sendEmptyMessage(1024);
            }
            initSysProvideParam();
            if (this.mMipiScreen) {
                this.mBackcarEvtHw = new BackcarEventHw(this);
            } else {
                this.mBackcarEvt = new BackcarEvent(this);
            }
            initSysEventState();
            AudioManager audioManager2 = (AudioManager) getSystemService("audio");
            this.mAudioMgr = audioManager2;
            this.mAudioMgr.setStreamVolume(3, audioManager2.getStreamMaxVolume(3), 0);
            this.mAudioMgr.setStreamVolume(4, this.mAudioMgr.getStreamMaxVolume(4), 0);
            this.mAudioMgr.setStreamVolume(0, this.mAudioMgr.getStreamMaxVolume(0), 0);
            this.mAudioMgr.setStreamVolume(1, this.mAudioMgr.getStreamMaxVolume(1), 0);
            EventUtils.deleteLocalMcUFile(this);
        }
    }

    public void onConfigurationChanged(Configuration configuration) {
        super.onConfigurationChanged(configuration);
        Log.d(TAG, "onConfigurationChanged");
        this.mHandler.sendEmptyMessageDelayed(2, 3000);
    }

    private void createFloatViews() {
        createNaviKingCover();
        int i = this.m_iUiIndex;
        if (i == 6 || i == 4 || i == 7) {
            createCarAirWnd();
        } else if (i == 5) {
            this.mDashBoardIndex = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_DASHBOARD_SELECT, this.mDashBoardIndex);
            initLRBottomViewFilter();
            if (this.m_iModeSet == 39) {
                createLRCBottomView();
                createLRCVolumeView();
                return;
            }
            createLRBottomView();
        }
    }

    /* access modifiers changed from: private */
    public void startBT() {
        Log.d(TAG, "startBT getImei");
        int recordInteger = this.mSysProviderOpt.getRecordInteger("KESAIWEI_RECORD_BT_INDEX", 0);
        try {
            BluetoothAdapter defaultAdapter = BluetoothAdapter.getDefaultAdapter();
            if (!defaultAdapter.isEnabled() && recordInteger != 1) {
                defaultAdapter.enable();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (BuildConfig.FLAVOR.equals(SystemProperties.get("persist.vendor.bluetooth_ext", BuildConfig.FLAVOR))) {
            SystemProperties.set("persist.vendor.bluetooth_ext", "0");
        }
        TelephonyManager telephonyManager = (TelephonyManager) getSystemService(TelephonyManager.class);
        String imei = telephonyManager.getImei(0);
        String imei2 = telephonyManager.getImei(1);
        Log.v(TAG, "imei 0 is " + imei);
        Log.v(TAG, "imei 1 is " + imei2);
        if (imei == null || imei2 == null || "0".equals(imei) || "0".equals(imei2) || imei.length() == 0 || imei2.length() == 0) {
            this.mEventHandler.removeMessages(3000);
            this.mEventHandler.sendEmptyMessageDelayed(3000, 1000);
        } else {
            this.mEventHandler.removeMessages(3000);
            SystemProperties.set("persist.imei.slot0", imei);
            SystemProperties.set("persist.imei.slot1", imei2);
        }
        this.mEventHandler.sendEmptyMessage(EventUtils.KSW_HANDLER_BT_SERVICE_CHECK);
    }

    private void setLetterIcon() {
        if (Build.VERSION.SDK_INT <= 31) {
            File file2 = new File("/data/local/carplayicon_120x120.png");
            if (!file2.exists() || file2.length() <= 0) {
                Log.d(TAG, "setLetterIcon");
                try {
                    FileOutputStream fileOutputStream = new FileOutputStream(new File("/data/local/carplayicon_120x120.png"));
                    Log.i(TAG, " New letterLogo OK");
                    InputStream open = getResources().getAssets().open("letterIcon.png");
                    if (open != null) {
                        byte[] bArr = new byte[open.available()];
                        open.read(bArr);
                        open.close();
                        fileOutputStream.write(bArr);
                        fileOutputStream.close();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /* access modifiers changed from: protected */
    public void startGetOSBackcarStateThread() {
        if (!this.mIsGetOSBackcarStateThreadIsRuning) {
            this.mIsGetOSBackcarStateThreadIsRuning = true;
            this.mInGetOSBackcarState = true;
            new Thread(new Runnable() {
                public void run() {
                    boolean unused = EventService.this.mInGetOSBackcarState = true;
                    File file = new File("dev/vehicle");
                    if (file.exists()) {
                        FileInputStream fileInputStream = null;
                        byte[] bArr = new byte[4];
                        try {
                            fileInputStream = new FileInputStream(file);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        boolean unused2 = EventService.this.mIsOSInBackcarMode = true;
                        while (EventService.this.mInGetOSBackcarState) {
                            if (fileInputStream != null) {
                                try {
                                    fileInputStream.read(bArr);
                                    if (((bArr[0] & 255) | ((bArr[1] & 255) << 8) | ((bArr[2] & 255) << 16) | ((bArr[3] & 255) << 24)) == 0) {
                                        Log.i(EventService.TAG, "OS not in backcar mode");
                                        boolean unused3 = EventService.this.mIsOSInBackcarMode = false;
                                        Log.i(EventService.TAG, "OS not in backcar mode mIsOSInBackcarMode = " + EventService.this.mIsOSInBackcarMode);
                                        EventService.this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_OS_BACKCAR_END);
                                        return;
                                    }
                                } catch (IOException e2) {
                                    e2.printStackTrace();
                                }
                            }
                        }
                    }
                }
            }).start();
        }
    }

    public void initEventState2() {
        this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_INIT_EVENT_STATE);
    }

    /* access modifiers changed from: private */
    public void initSysEventState() {
        this.mInitEventState = true;
        Log.i(TAG, "initSysEventState");
        this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_OPEN_SERIALPORT);
        this.mEventHandler.sendEmptyMessage(EventUtils.KSW_HANDLER_OPEN_SERIALPORT);
        initReceiver();
        if (this.fos == null) {
            try {
                this.fos = new FileOutputStream(this.file);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
        this.mPowerOffEvt = new PowerOffEvt(this);
        this.mEventHandler.removeMessages(EventUtils.HANDLER_START_GPS_LOC_LISTENER);
        this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_START_GPS_LOC_LISTENER, 8000);
        if (this.m_iUITypeVer == 41) {
            this.mEventHandler.removeMessages(EventUtils.HANDLER_CUR_TOPACTIVITY_REFRESH);
            this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_CUR_TOPACTIVITY_REFRESH, 2000);
            sendBroadcastPark_KSW();
            Settings.System.putInt(getContentResolver(), "sound_effects_enabled", 0);
            this.soundNaviPkgList = new ArrayList();
            this.mObserver.startObserving("DEVPATH=/devices/virtual/misc/zxw_io");
            this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_SD_USB_CARTYPE_XML_UPDATE);
            this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_SD_USB_CARTYPE_XML_UPDATE, 10000);
            this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_SD_USB_FACTORY_XML_UPDATE);
            this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_SD_USB_FACTORY_XML_UPDATE, 12000);
            this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_SD_USB_LOGO_UPDATE);
            this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_SD_USB_LOGO_UPDATE, 10000);
            this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_SD_USB_MAP_APK_LIST_UPDATE);
            this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_SD_USB_MAP_APK_LIST_UPDATE, 5000);
        }
        SendBroadCastToOSDropDownMenu();
        this.mEventHandler.sendEmptyMessageDelayed(EventUtils.WHAT_AUTO_RUNNING_USB_DVR_CRASH_SERVICE, 1000);
        String settingString = getSettingString(SysProviderOpt.MUSIC_PACKAGENAME, BuildConfig.FLAVOR);
        String settingString2 = getSettingString(SysProviderOpt.MUSIC_ACTIVITYNAME, BuildConfig.FLAVOR);
        if (settingString == null || settingString.length() <= 0 || settingString2 == null || settingString2.length() <= 0) {
            putSettingStr(SysProviderOpt.MUSIC_PACKAGENAME, EventUtils.MUSIC_MODE_PACKAGE_NAME);
            putSettingStr(SysProviderOpt.MUSIC_ACTIVITYNAME, EventUtils.MUSIC_MODE_CLASS_NAME);
            commitSetting();
        }
        deleteKey();
        sendMcuBaudRate();
    }

    public void sendMcuBaudRate() {
        byte[] bArr = {69, (byte) 1, 0};
        SendThread sendThread = this.mSendThread;
        if (sendThread != null) {
            sendThread.notifyToSend(bArr);
        }
    }

    public void HideTopFloat(boolean z) {
        TopFloatService.HideTopFloat(z);
    }

    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "onDestroy");
        uninReceiver();
        closeSerialPort();
        unBindBtService();
        exitGetTouchEvtThread();
        this.mEventHandler.removeCallbacksAndMessages((Object) null);
        try {
            this.fos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        CarPlaySocketServer carPlaySocketServer = this.mCarPlaySocketServer;
        if (carPlaySocketServer != null) {
            carPlaySocketServer.stopServer();
        }
    }

    public void initReceiver() {
        if (this.mModel == null) {
            this.mModel = new EvtModel(this);
        }
        if (this.mModelFile == null) {
            this.mModelFile = new EvtModelFile(this);
        }
        this.mModel.registerReceiver();
        this.mModelFile.registerReceiver();
        if (InitFatPara() == 1) {
            if (this.mDazongCanModel == null) {
                this.mDazongCanModel = new SendDataToDazongCan(this);
            }
            this.mDazongCanModel.registerReceiver();
        } else if (InitFatPara() == 17 || InitFatPara() == 28) {
            if (this.mRichanCanModel == null) {
                this.mRichanCanModel = new SendDataToRichanCan(this);
            }
            this.mRichanCanModel.registerReceiver();
        }
    }

    public void uninReceiver() {
        EvtModel evtModel = this.mModel;
        if (evtModel != null) {
            evtModel.unregisterReceiver();
        }
        EvtModelFile evtModelFile = this.mModelFile;
        if (evtModelFile != null) {
            evtModelFile.unregisterReceiver();
        }
        SendDataToDazongCan sendDataToDazongCan = this.mDazongCanModel;
        if (sendDataToDazongCan != null) {
            sendDataToDazongCan.unregisterReceiver();
        }
        SendDataToRichanCan sendDataToRichanCan = this.mRichanCanModel;
        if (sendDataToRichanCan != null) {
            sendDataToRichanCan.unregisterReceiver();
        }
    }

    public int InitFatPara() {
        int i = this.m_iCanbustype;
        if (i == 1 && this.m_iCarstype_ID == 1 && this.m_iCarCanbusName_ID == 1) {
            iCantype = 1;
        } else if (i == 1 && this.m_iCarstype_ID == 1 && this.m_iCarCanbusName_ID == 0) {
            iCantype = 27;
        } else if ((i == 17 || i == 28) && this.m_iCarstype_ID == 3 && this.m_iCarCanbusName_ID == 1) {
            iCantype = 17;
        } else if ((i == 17 || i == 28) && this.m_iCarstype_ID == 3 && this.m_iCarCanbusName_ID == 2) {
            iCantype = 17;
        } else if (i == 21 && this.m_iCarstype_ID == 4 && this.m_iCarCanbusName_ID == 2) {
            iCantype = 21;
        } else if (i == 21 && this.m_iCarstype_ID == 4 && this.m_iCarCanbusName_ID == 3) {
            iCantype = 20;
        } else if (i == 21 && this.m_iCarstype_ID == 4 && this.m_iCarCanbusName_ID == 4) {
            iCantype = 5;
        } else if (i == 20 && this.m_iCarstype_ID == 4 && this.m_iCarCanbusName_ID == 5) {
            iCantype = 20;
        } else if (i == 4 && this.m_iCarstype_ID == 2 && this.m_iCarCanbusName_ID == 1) {
            iCantype = 4;
        } else if (i == 6 && this.m_iCarstype_ID == 5 && this.m_iCarCanbusName_ID == 0) {
            iCantype = 6;
        } else if (i == 11 && this.m_iCarstype_ID == 6 && this.m_iCarCanbusName_ID == 0) {
            iCantype = 11;
        } else if (i == 9 && this.m_iCarstype_ID == 7 && this.m_iCarCanbusName_ID == 0) {
            iCantype = 9;
        } else if (i == 44 && this.m_iCarstype_ID == 9 && this.m_iCarCanbusName_ID == 1) {
            iCantype = 44;
        } else {
            iCantype = 0;
        }
        return iCantype;
    }

    public void WriteLogoToSys() throws IOException {
        InputStream inputStream;
        if (this.m_iUITypeVer == 41) {
            if (!this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_INIT_LOGO, false)) {
                this.mSysProviderOpt.updateRecord(SysProviderOpt.KSW_INIT_LOGO, "1");
            } else {
                return;
            }
        }
        FileOutputStream fileOutputStream = new FileOutputStream("/dev/block/mtd/by-name/logo");
        Log.i(TAG, " New filelogo OK");
        int i = this.m_iUITypeVer;
        if (i == 39) {
            inputStream = getResources().getAssets().open("Logo_zhty.bmp");
        } else if (i == 41) {
            inputStream = getResources().getAssets().open("Logo_KeSaiWei.bmp");
        } else if (i == 101) {
            inputStream = getResources().getAssets().open("logo_1920x720_0.bmp");
        } else {
            inputStream = getResources().getAssets().open("Logo_leikesasi.bmp");
        }
        if (inputStream != null) {
            int available = inputStream.available();
            byte[] bArr = new byte[available];
            Log.i(TAG, "Logo File Size =" + available);
            inputStream.read(bArr);
            inputStream.close();
            fileOutputStream.write(bArr);
            fileOutputStream.close();
        }
    }

    public void WriteLogoToSys_Animation() throws IOException {
        InputStream inputStream;
        if (this.m_iUITypeVer == 41) {
            if (!this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_INIT_LOGO_ANIMOTION, false)) {
                this.mSysProviderOpt.updateRecord(SysProviderOpt.KSW_INIT_LOGO_ANIMOTION, "1");
            } else {
                return;
            }
        }
        FileOutputStream fileOutputStream = new FileOutputStream("/dev/block/mtd/by-name/logo");
        Log.i(TAG, " New filelogo OK");
        int i = this.m_iModeSet;
        if (i == 3 || i == 5 || i == 6 || i == 14) {
            inputStream = getResources().getAssets().open("Logo8_1024x600.bmp");
        } else {
            inputStream = getResources().getAssets().open("Logo_KeSaiWei.bmp");
        }
        if (inputStream != null) {
            int available = inputStream.available();
            byte[] bArr = new byte[available];
            Log.i(TAG, "Logo File Size =" + available);
            inputStream.read(bArr);
            inputStream.close();
            fileOutputStream.write(bArr);
            fileOutputStream.close();
        }
        WriteAnimationLogoToSys();
    }

    public void WriteAnimationLogoToSys() throws IOException {
        InputStream inputStream;
        FileOutputStream fileOutputStream = new FileOutputStream("/data/local/bootanimation.zip");
        Log.i(TAG, " New Animation logo OK");
        int i = this.m_iModeSet;
        if (i == 3 || i == 5 || i == 6 || i == 14) {
            inputStream = getResources().getAssets().open("bootanimation_ksw_0_1024x600.zip");
        } else {
            inputStream = getResources().getAssets().open("bootanimation_ksw_2.zip");
        }
        int available = inputStream.available();
        byte[] bArr = new byte[available];
        Log.i(TAG, "Logo File Size =" + available);
        inputStream.read(bArr);
        inputStream.close();
        fileOutputStream.write(bArr);
        fileOutputStream.close();
        Runtime.getRuntime().exec("chmod 777 /data/local/bootanimation.zip");
    }

    public void InitTouchKey() {
        if (this.rtPower == null) {
            this.rtPower = new TouchKeyStruct();
        }
        if (this.rtHome == null) {
            this.rtHome = new TouchKeyStruct();
        }
        if (this.rtReturn == null) {
            this.rtReturn = new TouchKeyStruct();
        }
        if (this.rtVolDown == null) {
            this.rtVolDown = new TouchKeyStruct();
        }
        if (this.rtVolUp == null) {
            this.rtVolUp = new TouchKeyStruct();
        }
        if (this.rtKeyNext == null) {
            this.rtKeyNext = new TouchKeyStruct();
        }
        if (this.rtKeyPrev == null) {
            this.rtKeyPrev = new TouchKeyStruct();
        }
        if (this.rtKeyBnd == null) {
            this.rtKeyBnd = new TouchKeyStruct();
        }
        if (this.rtKeyMute == null) {
            this.rtKeyMute = new TouchKeyStruct();
        }
        if (this.rtKeyTalk == null) {
            this.rtKeyTalk = new TouchKeyStruct();
        }
        if (this.rtKeyHungUp == null) {
            this.rtKeyHungUp = new TouchKeyStruct();
        }
        if (this.rtKeyNavi == null) {
            this.rtKeyNavi = new TouchKeyStruct();
        }
        if (this.rtKeyMode == null) {
            this.rtKeyMode = new TouchKeyStruct();
        }
        TouchKeyStruct touchKeyStruct = this.rtPower;
        if (touchKeyStruct != null) {
            touchKeyStruct.KeyRt.left = 1024;
            this.rtPower.KeyRt.top = 0;
            this.rtPower.KeyRt.right = 1074;
            this.rtPower.KeyRt.bottom = 110;
            Log.i(TAG, "***rtPower****");
        }
        TouchKeyStruct touchKeyStruct2 = this.rtHome;
        if (touchKeyStruct2 != null) {
            touchKeyStruct2.KeyRt.left = 1024;
            this.rtHome.KeyRt.top = 115;
            this.rtHome.KeyRt.right = 1074;
            this.rtHome.KeyRt.bottom = 215;
            Log.i(TAG, "***rtHome****");
        }
        TouchKeyStruct touchKeyStruct3 = this.rtReturn;
        if (touchKeyStruct3 != null) {
            touchKeyStruct3.KeyRt.left = 1024;
            this.rtReturn.KeyRt.top = 220;
            this.rtReturn.KeyRt.right = 1074;
            this.rtReturn.KeyRt.bottom = AirCmdUtil.RIGHT_TEMP_DOWN;
            Log.i(TAG, "***rtReturn****");
        }
        TouchKeyStruct touchKeyStruct4 = this.rtVolUp;
        if (touchKeyStruct4 != null) {
            touchKeyStruct4.KeyRt.left = 1024;
            this.rtVolUp.KeyRt.top = 345;
            this.rtVolUp.KeyRt.right = 1074;
            this.rtVolUp.KeyRt.bottom = 440;
            Log.i(TAG, "***rtVolUp****");
        }
        TouchKeyStruct touchKeyStruct5 = this.rtVolDown;
        if (touchKeyStruct5 != null) {
            touchKeyStruct5.KeyRt.left = 1024;
            this.rtVolDown.KeyRt.top = 465;
            this.rtVolDown.KeyRt.right = 1074;
            this.rtVolDown.KeyRt.bottom = 600;
            Log.i(TAG, "***rtVolDown****");
        }
    }

    public void SendResetMcu(byte b) {
        byte[] bArr = {59, b};
        SendThread sendThread = this.mSendThread;
        if (sendThread != null) {
            sendThread.notifyToSend(bArr);
        }
    }

    public void send8902BackcarSet(byte b) {
        byte[] bArr = {110, b};
        SendThread sendThread = this.mSendThread;
        if (sendThread != null) {
            sendThread.notifyToSend(bArr);
        }
    }

    public void SendSwitchUsbDvrMode() {
        if (this.m_iUITypeVer == 39) {
            setCurModeCallback(EventUtils.eSrcMode.SRC_DVR.getIntValue(), this.mModeCallback);
            byte[] bArr = {48, 3};
            SendThread sendThread = this.mSendThread;
            if (sendThread != null) {
                sendThread.notifyToSend(bArr);
            }
        }
    }

    public void sendSwitchOriginaCar() {
        sendKSW_0x00_0x69((byte) 18, (byte) 2, (byte) 0);
    }

    public void closeSwitchOriginaCar() {
        if (this.b_Original_View) {
            sendKSW_0x00_0x6B((byte) 2, 1280, 480, 0);
        }
    }

    public void notifyAvmLeftRightBack() {
        if (!this.m_bInBackcarMode) {
            this.mEventHandler.removeMessages(EventUtils.HANDLER_AVM_MODE_START_LEFT_RIGHT_BACK);
            this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_AVM_MODE_START_LEFT_RIGHT_BACK);
        }
    }

    public void notifyCloseAvmLeftRightBack() {
        if (!this.m_bInBackcarMode && this.mLeftRightAndBackCamera > 0) {
            this.mEventHandler.removeMessages(EventUtils.HANDLER_AVM_MODE_START_LEFT_RIGHT_BACK_END);
            this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_AVM_MODE_START_LEFT_RIGHT_BACK_END);
        }
    }

    public void notifyLocalLanguageChanged() {
        this.mBackcarEvt = new BackcarEvent(this);
    }

    public void notifySendDataTest(boolean z) {
        if (!this.m_bPowerOff) {
            PowerOff(true);
        } else {
            PowerOff(false);
        }
        beep();
    }

    public void notify8902McuUpdateTime() {
        if (this.m_iUITypeVer == 32 && this.mIsGPSGetLocation) {
            sendSysRTCTimer();
        }
    }

    public void setValideModeInfo(int i, int i2, int i3, int i4, int i5) {
        if (this.m_iUITypeVer != 42) {
            byte[] bArr = {66, (byte) i, (byte) ((i4 >> 8) & 255), (byte) (i4 & 255), (byte) ((i5 >> 8) & 255), (byte) (i5 & 255), (byte) (getSecFromPosition(i2) & 255), (byte) (getMinFromPosition(i2) & 255), (byte) (getHourFromPosition(i2) & 255), (byte) (getSecFromPosition(i3) & 255), (byte) (getMinFromPosition(i3) & 255), (byte) (getHourFromPosition(i3) & 255)};
            SendThread sendThread = this.mSendThread;
            if (sendThread != null) {
                sendThread.notifyToSend(bArr);
            }
        }
    }

    public void setTouchZonePosType(int i) {
        Log.i(TAG, "setTouchZonePosType: iPos = " + i);
        try {
            FileOutputStream fileOutputStream = new FileOutputStream(new File("/sys/touch_type/touch_type"));
            if (i == 0) {
                fileOutputStream.write(new String("0").getBytes());
            } else if (i == 1) {
                fileOutputStream.write(new String("1").getBytes());
            } else if (i == 2) {
                fileOutputStream.write(new String("2").getBytes());
            } else if (i == 3) {
                fileOutputStream.write(new String("3").getBytes());
            } else if (i == 4) {
                fileOutputStream.write(new String("4").getBytes());
            } else if (i == 5) {
                fileOutputStream.write(new String("5").getBytes());
            }
            fileOutputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public TouchKeyStruct ParseTouchKeyRt(String str) {
        TouchKeyStruct touchKeyStruct = new TouchKeyStruct();
        int indexOf = str.indexOf(".");
        int i = indexOf + 1;
        int indexOf2 = str.indexOf(".", i);
        int i2 = indexOf2 + 1;
        int indexOf3 = str.indexOf(".", i2);
        int i3 = indexOf3 + 1;
        int indexOf4 = str.indexOf(".", i3);
        int i4 = indexOf4 + 1;
        int indexOf5 = str.indexOf(".", i4);
        String substring = str.substring(0, indexOf);
        touchKeyStruct.KeyRt.left = Integer.valueOf(substring).intValue();
        String substring2 = str.substring(i, indexOf2);
        touchKeyStruct.KeyRt.top = Integer.valueOf(substring2).intValue();
        String substring3 = str.substring(i2, indexOf3);
        touchKeyStruct.KeyRt.right = Integer.valueOf(substring3).intValue();
        String substring4 = str.substring(i3, indexOf4);
        touchKeyStruct.KeyRt.bottom = Integer.valueOf(substring4).intValue();
        touchKeyStruct.iLearnStatus = Integer.valueOf(str.substring(i4, indexOf5)).intValue();
        touchKeyStruct.iKeyPosType = Integer.valueOf(str.substring(indexOf5 + 1)).intValue();
        return touchKeyStruct;
    }

    public void SetInTouchLearnMode(boolean z, int i) {
        this.mbInTouchKeyLearnMode = z;
        this.miLearnKeyID = i;
    }

    public void ProcessTouchXY(int i, int i2) {
        if (this.mbInTouchKeyLearnMode && this.miLearnKeyID != -1) {
            StringBuilder sb = new StringBuilder();
            sb.append(i - 15);
            sb.append(".");
            sb.append(i2 - 15);
            sb.append(".");
            sb.append(i + 15);
            sb.append(".");
            sb.append(i2 + 15);
            sb.append(".0.1");
            String sb2 = sb.toString();
            Log.d("TouchKeyLearn", "StrTmp Infor " + sb2);
            Intent intent = new Intent(ZXW_TOUCH_LEARN_INFOR);
            intent.putExtra(ZXW_TOUCH_LEARN_INFOR_EXTRA, sb2);
            getApplicationContext().sendBroadcast(intent);
        }
    }

    /* access modifiers changed from: package-private */
    public void SetWheelTrackData(int i) {
        this.m_bWheelTrack = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_WHEEL_TRACK, this.m_bWheelTrack);
        BackcarEvent backcarEvent = this.mBackcarEvt;
        if (backcarEvent != null) {
            backcarEvent.setTrackData((byte) i);
        }
    }

    /* access modifiers changed from: package-private */
    public void SetAVMType(int i, boolean z) {
        if (!this.m_bInBackcarMode || z) {
            boolean z2 = this.mRightCameraAV3 || this.mLeftCameraAV1 || this.mCenterCameraAV2;
            int i2 = this.mCurrCameraIndex;
            if (i2 != 0 && (i2 != i || z)) {
                boruizonghengCloseAV();
            }
            if (i != 1) {
                if (i != 2) {
                    if (i == 3) {
                        if ((!this.mBackcarConnected && this.mCurrCameraIndex != i) || z) {
                            if (z2) {
                                boruizonghengStartAV3(true);
                            } else {
                                boruizonghengStartAV3(false);
                            }
                        }
                    }
                } else if ((!this.mBackcarConnected && this.mCurrCameraIndex != i) || z) {
                    if (z2) {
                        boruizonghengStartAV2(true);
                    } else {
                        boruizonghengStartAV2(false);
                    }
                }
            } else if ((!this.mBackcarConnected && this.mCurrCameraIndex != i) || z) {
                if (z2) {
                    boruizonghengStartAV1(true);
                } else {
                    boruizonghengStartAV1(false);
                }
            }
        }
    }

    public void CloseAVMType() {
        notifyCloseAvmLeftRightBack();
    }

    public boolean getSwitchMirror() {
        return this.bSwitchMirror;
    }

    public void setSwitchMirror(boolean z) {
        this.bSwitchMirror = z;
        SetAVMType(this.mLeftRightAndBackCamera, true);
        SharedPreferences.Editor editor = this.mEditor;
        if (editor != null) {
            editor.putBoolean(EventUtils.KEY_SWITCH_MIRROR, this.bSwitchMirror);
            this.mEditor.apply();
            this.mEditor.commit();
        }
    }

    public void SendConnetCan(boolean z) {
        byte[] bArr = {EventUtils.CMD_MODE_POWERON, 1, 0};
        if (z) {
            bArr[2] = 1;
        } else {
            bArr[2] = 0;
        }
        SendCmdLstToCanbus(bArr);
    }

    public void SendAvmMode(int i) {
        byte[] bArr = {-58, 2, 2, 1};
        bArr[3] = (byte) i;
        SendCmdLstToCanbus(bArr);
    }

    public void sendSysRTCTimerToCan() {
        byte[] bArr = {-58, 4, 1, 0, 0, 0};
        Calendar instance2 = Calendar.getInstance();
        bArr[3] = (byte) instance2.get(11);
        bArr[4] = (byte) instance2.get(12);
        SendCmdLstToCanbus(bArr);
    }

    public void SendCmdLstToCanbus(byte[] bArr) {
        if (bArr != null && bArr.length != 0) {
            byte[] bArr2 = new byte[(bArr.length + 2)];
            byte b = 0;
            bArr2[0] = 46;
            int i = 0;
            while (i < bArr.length) {
                int i2 = i + 1;
                bArr2[i2] = bArr[i];
                i = i2;
            }
            for (int i3 = 1; i3 < bArr.length + 1; i3++) {
                b = (byte) (b + bArr2[i3]);
            }
            bArr2[bArr.length + 1] = (byte) (b ^ 255);
            sendCanbusData(bArr2);
        }
    }

    public void sendCanbusDataEx(byte[] bArr) {
        if (bArr != null && bArr.length >= 2) {
            int length = bArr.length + 3;
            byte[] bArr2 = new byte[length];
            bArr2[0] = 48;
            bArr2[1] = 46;
            System.arraycopy(bArr, 0, bArr2, 2, bArr.length);
            bArr2[length - 1] = (byte) (((bArr2[2] + bArr2[3]) + bArr2[4]) ^ 255);
            SendThread sendThread = this.mSendThread;
            if (sendThread != null) {
                sendThread.notifyToSend(bArr2);
                Log.i(TAG, "sendCanbusDataEx: " + EventUtils.bytesToHexString(bArr2));
            }
        }
    }

    public void sendConsoleVersion() {
        Log.d(TAG, "===========================sendConsoleVersion============================");
        int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SET_CONSOLE_VERSION_INDEX, 0);
        this.consoleVersion_ID = recordInteger;
        if (recordInteger == 0) {
            sendConsoleVersionCarKey(21, (byte) 0);
        } else if (recordInteger == 1) {
            sendConsoleVersionCarKey(19, (byte) 2);
        } else if (recordInteger == 2) {
            sendConsoleVersionCarKey(20, (byte) 0);
        } else if (recordInteger == 3) {
            sendConsoleVersionCarKey(22, (byte) 0);
        } else {
            sendConsoleVersionCarKey(21, (byte) 0);
        }
    }

    /* access modifiers changed from: package-private */
    public void sendConsoleVersionCarKey(int i, byte b) {
        byte[] bArr = new byte[6];
        bArr[0] = 46;
        bArr[1] = -100;
        bArr[2] = 2;
        bArr[3] = (byte) (i & 255);
        bArr[4] = b;
        bArr[5] = (byte) ((((bArr[1] + bArr[2]) + bArr[3]) + bArr[4]) ^ 255);
        sendCanbusData(bArr);
    }

    /* access modifiers changed from: private */
    public void sendAUXAudio() {
        int i;
        SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
        if (sysProviderOpt != null) {
            i = sysProviderOpt.getRecordInteger(SysProviderOpt.SET_AUX_ALTERNATIVE_INDEX, 1);
        } else {
            i = 1;
        }
        byte[] bArr = new byte[6];
        bArr[0] = 46;
        bArr[1] = -102;
        bArr[2] = 2;
        if (i >= 1) {
            bArr[3] = 5;
            bArr[4] = (byte) i;
        } else {
            bArr[3] = 2;
            bArr[4] = 0;
        }
        bArr[5] = (byte) ((((bArr[1] + bArr[2]) + bArr[3]) + bArr[4]) ^ 255);
        sendCanbusData(bArr);
    }

    public IBinder onBind(Intent intent) {
        return this.mBinder;
    }

    /* access modifiers changed from: protected */
    public void openSerialPort() {
        Log.d(TAG, "openSerialPort =========");
        try {
            Device device = new Device(EventUtils.getMcuComDevicePath(), "115200");
            SerialPortManager instance2 = SerialPortManager.instance();
            this.mSerialManager = instance2;
            this.mSerialPort = instance2.open(this, this.m_iUITypeVer, this.mHandler, device);
            startProcessCmdThread();
            startSendThread();
            if (this.mSerialPort == null || this.mProcessHandler == null || this.mSendThread == null) {
                Log.d(TAG, "openSerialPort ========= failed retry");
                this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_OPEN_SERIALPORT);
                this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_OPEN_SERIALPORT, 1000);
                return;
            }
            Log.d(TAG, "openSerialPort ========= succeed");
            sendKswPlatformCode();
            this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_POWER_ON);
            this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_POWER_ON, 1000);
            startGetTouchEvtThread();
        } catch (Exception e) {
            e.printStackTrace();
            Log.d(TAG, "openSerialPort ========= failed retry");
            this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_OPEN_SERIALPORT);
            this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_OPEN_SERIALPORT, 1000);
        }
    }

    /* access modifiers changed from: protected */
    public void closeSerialPort() {
        SerialPortManager.instance().close();
        stopSendThread();
        stopProcessCmdThread();
    }

    /* access modifiers changed from: protected */
    public void startGetTouchEvtThread() {
        this.GetTouchKeyState = true;
        new Thread(new Runnable() {
            public final void run() {
                EventService.this.lambda$startGetTouchEvtThread$1$EventService();
            }
        }).start();
    }

    public /* synthetic */ void lambda$startGetTouchEvtThread$1$EventService() {
        Log.d("GetTouchKey", "start");
        this.GetTouchKeyState = true;
        File file2 = new File("dev/zxw_io");
        if (file2.exists()) {
            FileInputStream fileInputStream = null;
            byte[] bArr = new byte[4];
            try {
                fileInputStream = new FileInputStream(file2);
            } catch (IOException e) {
                e.printStackTrace();
            }
            while (this.GetTouchKeyState) {
                if (fileInputStream != null) {
                    try {
                        fileInputStream.read(bArr);
                        Message obtainMessage = this.mEventHandler.obtainMessage();
                        obtainMessage.what = EventUtils.HANDLER_MENU_TOUCH_POS;
                        obtainMessage.arg1 = (bArr[0] & 255) | ((bArr[1] & 255) << 8) | ((bArr[2] & 255) << 16) | ((bArr[3] & 255) << 24);
                        Log.i(TAG, "run: msg.arg1 = " + obtainMessage.arg1);
                        if (this.menuDownState && (bArr[3] & 255) < 128) {
                            this.mEventHandler.removeMessages(EventUtils.HANDLER_MENU_TOUCH_POS);
                        }
                        this.mEventHandler.sendMessage(obtainMessage);
                    } catch (IOException e2) {
                        e2.printStackTrace();
                    }
                }
            }
        }
    }

    private void checkSystemLongTouchKey(int i, int i2) {
        if (!this.m_bPowerOff) {
            try {
                if (this.rtPower.KeyRt.contains(i, i2)) {
                    Log.d("GetTouchKey", "Long rtPower Touch");
                    if (!this.m_bInBackcarMode) {
                        PowerOff(true);
                        Log.i(TAG, "--->>> BRZH PowerOff 000");
                        beep();
                    }
                } else if (this.rtHome.KeyRt.contains(i, i2)) {
                    Log.d("GetTouchKey", "rtHome");
                    Log.i(TAG, "--->>> KeyEvent.KEYCODE_HOME 888");
                    sendKeyDownUpSync(3);
                    beep();
                } else if (this.rtReturn.KeyRt.contains(i, i2)) {
                    Log.d("GetTouchKey", "rtReturn");
                    sendKeyDownUpSync(4);
                    beep();
                } else if (this.rtVolUp.KeyRt.contains(i, i2)) {
                    Log.d("GetTouchKey", "rtVolUp");
                } else if (this.rtVolDown.KeyRt.contains(i, i2)) {
                    Log.d("GetTouchKey", "rtVolDown");
                } else if (this.rtKeyNext.KeyRt.contains(i, i2)) {
                    ProcessCanKey(8);
                    beep();
                    Log.d("GetTouchKey", "rtKeyNext---2");
                } else if (this.rtKeyPrev.KeyRt.contains(i, i2)) {
                    ProcessCanKey(7);
                    beep();
                    Log.d("GetTouchKey", "rtKeyPrev---2");
                } else if (this.rtKeyNavi.KeyRt.contains(i, i2)) {
                    ProcessCanKey(55);
                    beep();
                    Log.d("GetTouchKey", "rtKeyNavi---2");
                } else if (this.rtKeyMode.KeyRt.contains(i, i2)) {
                    ProcessCanKey(16);
                    beep();
                    Log.d("GetTouchKey", "rtKeyMode---2");
                }
            } catch (Exception e) {
                Log.d("GetTouchKey", "Exception");
                e.printStackTrace();
            }
        }
    }

    /* access modifiers changed from: private */
    public void checkSystemTouchKey(int i, int i2) {
        try {
            if (this.rtPower.KeyRt.contains(i, i2)) {
                Log.d("GetTouchKey", "rtPower");
                if (!this.m_bPowerOff) {
                    Log.d("GetTouchKey", "rtPower Mute");
                    EventUtils.sendSysBroadcast(getApplicationContext(), EventUtils.ZXW_SYS_KEY_EVT, 17);
                    beep();
                } else if (this.m_bInBackcarMode) {
                    EventUtils.sendSysBroadcast(getApplicationContext(), EventUtils.ZXW_SYS_KEY_EVT, 17);
                    beep();
                } else {
                    PowerOff(false);
                    Log.i(TAG, "--->>> BRZH PowerOff 111");
                    beep();
                }
            } else if (this.rtHome.KeyRt.contains(i, i2)) {
                Log.d("GetTouchKey", "rtHome");
                if (!this.m_bPowerOff) {
                    Log.i(TAG, "--->>> KeyEvent.KEYCODE_HOME 777");
                    sendKeyDownUpSync(3);
                    beep();
                }
            } else if (this.rtReturn.KeyRt.contains(i, i2)) {
                Log.d("GetTouchKey", "rtReturn");
                if (!this.m_bPowerOff) {
                    sendKeyDownUpSync(4);
                    beep();
                }
            } else if (this.rtVolUp.KeyRt.contains(i, i2)) {
                if (!this.m_bPowerOff && !this.m_bLongKeyDown) {
                    Log.d("GetTouchKey", "rtVolUp");
                    EventUtils.sendSysBroadcast(getApplicationContext(), EventUtils.ZXW_SYS_KEY_EVT, 18);
                    beep();
                }
            } else if (this.rtVolDown.KeyRt.contains(i, i2)) {
                if (!this.m_bPowerOff && !this.m_bLongKeyDown) {
                    Log.d("GetTouchKey", "rtVolDown");
                    EventUtils.sendSysBroadcast(getApplicationContext(), EventUtils.ZXW_SYS_KEY_EVT, 19);
                    beep();
                }
            } else if (this.rtKeyNext.KeyRt.contains(i, i2)) {
                ProcessCanKey(3);
                Log.d("GetTouchKey", "rtKeyNext");
                beep();
            } else if (this.rtKeyPrev.KeyRt.contains(i, i2)) {
                ProcessCanKey(2);
                beep();
                Log.d("GetTouchKey", "rtKeyPrev");
            } else if (this.rtKeyNavi.KeyRt.contains(i, i2)) {
                if (this.m_iUITypeVer == 41) {
                    sendKSW_0x00_0x66(1);
                } else {
                    ProcessCanKey(55);
                }
                beep();
                Log.d("GetTouchKey", "rtKeyNavi");
            } else if (this.rtKeyMode.KeyRt.contains(i, i2)) {
                ProcessCanKey(16);
                beep();
                Log.d("GetTouchKey", "rtKeyMode");
            } else if (this.rtKeyMute.KeyRt.contains(i, i2)) {
                ProcessCanKey(17);
                beep();
                Log.d("GetTouchKey", "rtKeyMute");
            } else if (this.rtKeyBnd.KeyRt.contains(i, i2)) {
                ProcessCanKey(14);
                beep();
                Log.d("GetTouchKey", "rtKeyBnd");
            }
        } catch (Exception e) {
            Log.d("GetTouchKey", "Exception");
            e.printStackTrace();
        }
    }

    /* access modifiers changed from: private */
    public boolean checkSystemVolKey(int i, int i2) {
        if (this.rtVolDown.KeyRt.contains(i, i2)) {
            int i3 = this.iReceive_key_time + 1;
            this.iReceive_key_time = i3;
            if (i3 > 6) {
                Log.d("GetTouchKey", "rtVolDown");
                EventUtils.sendSysBroadcast(getApplicationContext(), EventUtils.ZXW_SYS_KEY_EVT, 19);
                this.m_bLongKeyDown = true;
                beep();
            }
            return true;
        } else if (this.rtVolUp.KeyRt.contains(i, i2)) {
            int i4 = this.iReceive_key_time + 1;
            this.iReceive_key_time = i4;
            if (i4 > 6) {
                EventUtils.sendSysBroadcast(getApplicationContext(), EventUtils.ZXW_SYS_KEY_EVT, 18);
                this.m_bLongKeyDown = true;
                beep();
            }
            return true;
        } else if (!this.rtPower.KeyRt.contains(i, i2)) {
            return false;
        } else {
            int i5 = this.iReceive_key_time + 1;
            this.iReceive_key_time = i5;
            if (i5 > 20) {
                if (!this.m_bPowerOff) {
                    checkSystemLongTouchKey(i, i2);
                }
                this.m_bLongKeyDown = true;
            }
            return true;
        }
    }

    public void sendKeySync(KeyEvent keyEvent) {
        long downTime = keyEvent.getDownTime();
        long eventTime = keyEvent.getEventTime();
        int action = keyEvent.getAction();
        int keyCode = keyEvent.getKeyCode();
        int repeatCount = keyEvent.getRepeatCount();
        int metaState = keyEvent.getMetaState();
        int deviceId = keyEvent.getDeviceId();
        int scanCode = keyEvent.getScanCode();
        int source = keyEvent.getSource();
        int flags = keyEvent.getFlags();
        int i = source == 0 ? 257 : source;
        if (eventTime == 0) {
            eventTime = SystemClock.uptimeMillis();
        }
        if (downTime == 0) {
            downTime = eventTime;
        }
        KeyEvent keyEvent2 = r4;
        KeyEvent keyEvent3 = new KeyEvent(downTime, eventTime, action, keyCode, repeatCount, metaState, deviceId, scanCode, flags | 8, i);
        InputManager.getInstance().injectInputEvent(keyEvent2, 2);
    }

    public void sendKeyDownUpSync(int i) {
        Log.i(TAG, "sendKeyDownUpSync: key = " + i);
        sendKeySync(new KeyEvent(0, i));
        SystemClock.sleep(10);
        sendKeySync(new KeyEvent(1, i));
    }

    public void sendKeyDownUpSync2(int i) {
        if (!this.m_bInBackcarMode || this.isAutoNavi) {
            Log.i(TAG, "sendKeyDownUpSync: key = " + i);
            long uptimeMillis = SystemClock.uptimeMillis();
            Intent intent = new Intent("android.intent.action.MEDIA_BUTTON");
            intent.putExtra("android.intent.extra.KEY_EVENT", new KeyEvent(uptimeMillis, uptimeMillis, 0, i, 0));
            sendBroadcast(intent);
            SystemClock.sleep(100);
            long uptimeMillis2 = SystemClock.uptimeMillis();
            intent.putExtra("android.intent.extra.KEY_EVENT", new KeyEvent(uptimeMillis2, uptimeMillis2, 1, i, 0));
            sendBroadcast(intent);
        }
    }

    public void notifyMcuCanUpgradeMode(boolean z) {
        byte[] bArr = {64, 1, z ? (byte) 1 : 0};
        SendThread sendThread = this.mSendThread;
        if (sendThread != null) {
            sendThread.sendData(bArr);
        }
    }

    public void enterCanUpgradeMode() {
        notifyMcuCanUpgradeMode(true);
        SendThread sendThread = this.mSendThread;
        if (sendThread != null) {
            sendThread.enterCanUpgradeMode();
        }
    }

    public void exitCanUpgradeMode() {
        SendThread sendThread = this.mSendThread;
        if (sendThread != null) {
            sendThread.exitCanUpgradeMode();
        }
        notifyMcuCanUpgradeMode(false);
    }

    public void sendCanbusUpgradeData(byte[] bArr) {
        SendThread sendThread;
        if (bArr != null && (sendThread = this.mSendThread) != null) {
            sendThread.sendData(bArr);
        }
    }

    /* access modifiers changed from: protected */
    public void exitGetTouchEvtThread() {
        this.GetTouchKeyState = false;
    }

    /* access modifiers changed from: protected */
    public void stopReceiveThread() {
        this.mbExitRecThread = true;
    }

    /* access modifiers changed from: protected */
    public void startProcessCmdThread() {
        Log.d(TAG, "startProcessCmdThread");
        if (this.mProcessHandler == null) {
            new Thread(new Runnable() {
                public void run() {
                    Looper.prepare();
                    EventService.this.mProcessHandler = new Handler() {
                        private byte[] oldTouchData;
                        private long sendLetterKnobTime = System.currentTimeMillis();

                        public void handleMessage(Message message) {
                            if (message.what == 256) {
                                Looper.myLooper().quit();
                                EventService.this.mProcessHandler = null;
                                return;
                            }
                            byte[] bArr = (byte[]) message.obj;
                            if (bArr != null && bArr.length > 0) {
                                try {
                                    if (EventService.this.m_iUITypeVer == 41) {
                                        processKSWCmd(bArr);
                                    } else {
                                        processCmd(bArr);
                                    }
                                } catch (Exception e) {
                                    Log.e(EventService.TAG, "processCmd error: " + e.toString());
                                }
                            }
                        }

                        private void processCmd(byte[] bArr) {
                            byte b = bArr[0];
                            if (b == -122) {
                                onCmd8825ValEvent(bArr);
                            } else if (b == -120) {
                                OnCmdWheelState(bArr);
                            } else if (b == -114) {
                                onCmdMcu3DHData(bArr);
                            } else if (b == -95) {
                                onCmdCarAirEvent(bArr);
                            } else if (b == -91) {
                                Log.i(EventService.TAG, "processCmd: CMD_CANBUS_ALL_ADD");
                                onCmdCanbusAll(bArr);
                            } else if (b == -79) {
                                onCmdSwitchCarScreen(bArr);
                            } else if (b == -76) {
                                onCmdCarInfo(bArr);
                            } else if (b == -75) {
                                OnCmdCYMcuUpgradeData(bArr);
                            } else if (b == 126) {
                                onCmdKeyADEvent(bArr);
                            } else if (b != Byte.MAX_VALUE) {
                                switch (b) {
                                    case AirCmdUtil.AUTO:
                                        onCmdFreqSelectEvt(bArr);
                                        return;
                                    case -127:
                                        onCmdModePowerOnEvt(bArr);
                                        return;
                                    case -126:
                                        onCmdDiscAutoInEvt(bArr);
                                        return;
                                    case -125:
                                        onCmdSysRTCTimeEvt(bArr);
                                        return;
                                    default:
                                        switch (b) {
                                            case 112:
                                                onCmdModeAck(bArr);
                                                return;
                                            case 113:
                                                onCmdSysEvent(bArr);
                                                return;
                                            case 114:
                                                onCmdKeyEvent(bArr);
                                                return;
                                            case 115:
                                                onCmdRadioEvent(bArr);
                                                return;
                                            case 116:
                                                onCmdWheelEvent(bArr);
                                                return;
                                            case 117:
                                                onCmdTVEvent(bArr);
                                                return;
                                            case 118:
                                                onCmdBMTVolEvent(bArr);
                                                return;
                                            case 119:
                                                onCmdEQEvent(bArr);
                                                return;
                                            case 120:
                                                onCmdMuteEvent(bArr);
                                                return;
                                            case 121:
                                                onCmdMainVolEvent(bArr);
                                                return;
                                            case 122:
                                                onCmdBalanceEvent(bArr);
                                                return;
                                            case 123:
                                                onCmdLoudnessEvent(bArr);
                                                return;
                                            case 124:
                                                onCmdMcuInitEvent(bArr);
                                                return;
                                            default:
                                                return;
                                        }
                                }
                            } else {
                                onCmdUpgradeAck(bArr);
                            }
                        }

                        private void processKSWCmd(byte[] bArr) {
                            if (bArr.length >= 4) {
                                byte b = bArr[1];
                                if (b == -96) {
                                    onCmdKSWDataType0xA0Event(bArr);
                                } else if (b == 0) {
                                    onCmdKSWDataType0x00Event(bArr);
                                }
                            }
                        }

                        private void onCmdModeAck(byte[] bArr) {
                            if (bArr.length >= 2) {
                                boolean unused = EventService.this.isModeKnown = true;
                                Log.i(EventService.TAG, "onCmdModeAck: " + Integer.toString(bArr[1]) + "; " + (bArr[1] & 255) + "; " + EventUtils.eSrcMode.SRC_MCU_VERSION.getValue());
                                if (EventService.this.mCurrSendMode.getValue() == bArr[1]) {
                                    Log.i(EventService.TAG, "responseACK");
                                    if (EventService.this.mSendThread != null) {
                                        EventService.this.mSendThread.responseACK();
                                    }
                                }
                                if (bArr[1] == EventUtils.eSrcMode.SRC_MCU_VERSION.getValue()) {
                                    Log.i(EventService.TAG, "onCmdModeAck: bydata " + EventUtils.bytesToHexString(bArr));
                                    String str = new String(bArr, 2, bArr.length + -3);
                                    Log.i(EventService.TAG, "onCmdModeAck: strMcuVer = " + str);
                                    Log.i(EventService.TAG, "onCmdModeAck: strMcuVer = " + str.length());
                                    if (str.length() == 0) {
                                        EventService.this.sendMode(EventUtils.eSrcMode.SRC_MCU_VERSION);
                                    }
                                    EventService.this.mStrMcuVer = str;
                                    Log.i(EventService.TAG, "Mcu Ver: " + EventService.this.mStrMcuVer);
                                    if (EventService.this.m_iUITypeVer == 48) {
                                        if (str.startsWith("RL78")) {
                                            EventService.this.sendCHWYMcuVersionData((byte) 51);
                                            EventService.this.mSysProviderOpt.updateRecord(SysProviderOpt.MAISILUO_SYS_GOOGLEPLAY, "1");
                                        } else if (str.startsWith("RL7G")) {
                                            if (!Locale.getDefault().getLanguage().equals("zh") || !Locale.getDefault().getCountry().equals("rCN")) {
                                                LocalePicker.updateLocale(Locale.SIMPLIFIED_CHINESE);
                                            }
                                            EventService.this.sendCHWYMcuVersionData(EventUtils.MCU_KEY_NUM5_LONG);
                                            EventService.this.mSysProviderOpt.updateRecord(SysProviderOpt.MAISILUO_SYS_GOOGLEPLAY, "0");
                                        }
                                    }
                                    if (str.length() > 5) {
                                        String substring = str.substring(4, 5);
                                        Log.i(EventService.TAG, "strMcuSleepVer = " + substring);
                                        if ("c".equalsIgnoreCase(substring)) {
                                            boolean unused2 = EventService.this.bAccSleepEnable = true;
                                        } else {
                                            boolean unused3 = EventService.this.bAccSleepEnable = false;
                                        }
                                    }
                                } else if (bArr[1] == EventUtils.eSrcMode.SRC_TFT_VERSION.getValue()) {
                                    EventService.this.mStrTFTVer = new String(bArr, 2, bArr.length - 3);
                                    Log.i(EventService.TAG, "TFT Ver: " + EventService.this.mStrTFTVer);
                                }
                            }
                        }

                        private void onCmdSysEvent(byte[] bArr) {
                            if (bArr.length >= 3) {
                                byte b = bArr[1];
                                byte b2 = bArr[2];
                                boolean z = (b & EventUtils.CMD_FREQ_SEL) > 0;
                                if (EventService.this.mDiscInDVD != z) {
                                    boolean unused = EventService.this.mDiscInDVD = z;
                                    Log.i(EventService.TAG, "Mcu DVD EVT");
                                    EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_DVD_CONNECTED_EVT);
                                    EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_DVD_DISCONNECTED_EVT);
                                    Log.i(EventService.TAG, "onCmdSysEvent 1111111111 mDiscInDVD = " + EventService.this.mDiscInDVD);
                                    if (!EventService.this.mDiscInDVD) {
                                        EventService.this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_DVD_DISCONNECTED_EVT);
                                    } else if (SystemClock.uptimeMillis() - ((long) EventService.this.m_iDiscAutoInCount) < 5000) {
                                        EventService.this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_DVD_DISCONNECTED_EVT);
                                        int unused2 = EventService.this.m_iDiscAutoInCount = 0;
                                    } else {
                                        EventService.this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_DVD_CONNECTED_EVT);
                                    }
                                }
                                boolean z2 = (b & 32) > 0;
                                if (EventService.this.mDiscInCard != z2) {
                                    boolean unused3 = EventService.this.mDiscInCard = z2;
                                    Log.i(EventService.TAG, "Mcu SD EVT");
                                    EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_SD_CONNECTED_EVT);
                                    EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_SD_DISCONNECTED_EVT);
                                    if (EventService.this.mDiscInCard) {
                                        EventService.this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_SD_CONNECTED_EVT);
                                    } else {
                                        EventService.this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_SD_DISCONNECTED_EVT);
                                    }
                                }
                                boolean z3 = (b & 16) > 0;
                                if (EventService.this.mIPodConnected != z3) {
                                    boolean unused4 = EventService.this.mIPodConnected = z3;
                                }
                                boolean z4 = (b & 8) > 0;
                                if (EventService.this.mLAMPConntected != z4) {
                                    boolean unused5 = EventService.this.mLAMPConntected = z4;
                                    Log.i(EventService.TAG, "Mcu LAMP EVT");
                                    EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_LAMP_EVT);
                                    EventService.this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_LAMP_EVT);
                                    boolean unused6 = EventService.this.mLAMPConntected;
                                    int unused7 = EventService.this.mSysNightDayMode = EventService.this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SYS_DAY_NIGHT_MODE, 0);
                                    if (EventService.this.mSysNightDayMode == 0) {
                                        EventService.this.setDayNightMode(EventService.this.mSysNightDayMode);
                                    }
                                }
                                boolean z5 = (b & 4) > 0;
                                if (EventService.this.mBreakConnected != z5) {
                                    boolean unused8 = EventService.this.mBreakConnected = z5;
                                    Log.i(EventService.TAG, "Mcu Break EVT");
                                    EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_BREAK_EVT);
                                    EventService.this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_BREAK_EVT);
                                }
                                boolean z6 = (b & 2) > 0;
                                if (EventService.this.mBackcarConnected != z6) {
                                    boolean unused9 = EventService.this.mBackcarConnected = z6;
                                    EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_BACKCAR_START);
                                    EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_BACKCAR_END);
                                    if (EventService.this.mBackcarConnected) {
                                        Log.i(EventService.TAG, "onCmdSysEvent: GetCurrDim() = " + EventService.this.GetCurrDim());
                                        if (EventService.this.GetPowerStatus()) {
                                            EventService.this.SendBlackState(false);
                                        }
                                        if (EventService.this.GetCurrDim() == -1) {
                                            EventService.this.SendBlackState(false);
                                            int LoadNLightVal = EventService.this.LoadNLightVal();
                                            EventService.this.putSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, 20);
                                            EventService.this.SendBLVal((byte) 20, (byte) LoadNLightVal);
                                        }
                                        if (EventService.this.mValidMode == EventUtils.eSrcMode.SRC_DVD) {
                                            EventService.this.SendBlackState(true);
                                            EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_DVD_BACKCAR_DELAY);
                                            EventService.this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_DVD_BACKCAR_DELAY, 500);
                                        }
                                        if (EventService.this.mCurTopClassName.startsWith("com.autonavi.amapauto")) {
                                            boolean unused10 = EventService.this.isAutoNavi = true;
                                        }
                                        EventService.this.EnterBackcarMode();
                                        EventService.this.mEventHandler.removeMessages(EventService.WHAT_SHOW_RADAR_EVT);
                                        EventService.this.mEventHandler.sendEmptyMessageDelayed(EventService.WHAT_SHOW_RADAR_EVT, 500);
                                        EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_BACKCAR_START);
                                        EventService.this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_BACKCAR_START, 500);
                                    } else {
                                        if (EventService.this.GetPowerStatus()) {
                                            EventService.this.SendBlackState(true);
                                        }
                                        if (EventService.this.isAutoNavi) {
                                            boolean unused11 = EventService.this.isAutoNavi = false;
                                            EventUtils.startActivityIfNotRuning(EventService.mAppContext, "com.autonavi.amapauto", "com.autonavi.auto.remote.fill.UsbFillActivity");
                                        }
                                        EventService.this.mEventHandler.removeMessages(EventService.WHAT_HIDE_RADAR_WND);
                                        EventService.this.mEventHandler.sendEmptyMessageDelayed(EventService.WHAT_HIDE_RADAR_WND, 50);
                                        EventService.this.mEventHandler.removeMessages(EventUtils.HANDLER_BACKCAR_END);
                                        EventService.this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_BACKCAR_END, 50);
                                        EventService.this.mEventHandler.removeMessages(EventService.HANDLER_NOTIFY_BACKEVENT_END);
                                        EventService.this.mEventHandler.sendEmptyMessageDelayed(EventService.HANDLER_NOTIFY_BACKEVENT_END, 500);
                                    }
                                    Log.i(EventService.TAG, "Mcu Backcar EVT");
                                }
                                byte b3 = 1 & b;
                                int unused12 = EventService.this.iMcanSignalState = (b2 & EventUtils.CMD_FREQ_SEL) >> 7;
                            }
                        }

                        private void onCmdKSWDataType0x00Event(byte[] bArr) {
                            if (bArr.length >= 4) {
                                byte b = bArr[2];
                                if (b == -95) {
                                    onCmdKSW0x00_0xA1Event(bArr);
                                } else if (b == 24) {
                                    onCmdKSW0x00_0x18Event(bArr);
                                } else if (b != 25) {
                                    switch (b) {
                                        case 16:
                                            onCmdKSW0x00_0x10Event(bArr);
                                            return;
                                        case 17:
                                            onCmdKSW0x00_0x11Event(bArr);
                                            return;
                                        case 18:
                                            onCmdKSW0x00_0x12Event(bArr);
                                            return;
                                        case 19:
                                            onCmdKSW0x00_0x13Event(bArr);
                                            return;
                                        case 20:
                                            onCmdKSW0x00_0x14Event(bArr);
                                            return;
                                        case 21:
                                            onCmdKSW0x00_0x15Event(bArr);
                                            return;
                                        case 22:
                                            onCmdKSW0x00_0x16Event(bArr);
                                            return;
                                        default:
                                            switch (b) {
                                                case 27:
                                                    onCmdKSW0x00_0x1BEvent(bArr);
                                                    return;
                                                case 28:
                                                    onCmdKSW0x00_0x1CEvent(bArr);
                                                    return;
                                                case 29:
                                                    onCmdKSW0x00_0x1DEvent(bArr);
                                                    return;
                                                default:
                                                    switch (b) {
                                                        case 39:
                                                            onCmdKSW0x00_0x27Event(bArr);
                                                            return;
                                                        case 40:
                                                            onCmdKSW0x00_0x28Event(bArr);
                                                            return;
                                                        case 41:
                                                            onCmdKSW0x00_0x29Event(bArr);
                                                            return;
                                                        case 42:
                                                            onCmdKSW0x00_0x2aEvent(bArr);
                                                            return;
                                                        default:
                                                            return;
                                                    }
                                            }
                                    }
                                } else {
                                    onCmdKSW0x00_0x19Event(bArr);
                                }
                            }
                        }

                        private void onCmdKSWDataType0xA0Event(byte[] bArr) {
                            Log.d(EventService.TAG, "onCmdKSWDataType0xA0Event");
                            if (bArr.length >= 4) {
                                if (bArr[2] != -32 || bArr[4] != 4) {
                                    Intent intent = new Intent(EventUtils.KSW_ZXW_MCUUPGRADE_MCU_ARM_EVT);
                                    intent.putExtra(EventUtils.KSW_ZXW_MCUUPGRADE_MCU_ARM_DATA, bArr);
                                    Log.d(EventService.TAG, "sendBroadcast KSW_ZXW_MCUUPGRADE_MCU_ARM_EVT extra = " + EventUtils.bytesToHexString(bArr));
                                    EventService.this.sendBroadcast(intent);
                                } else if (!EventService.this.mHasCancelUpgradeMcu && EventService.this.mDialogRepairMcu == null) {
                                    EventService.this.mDialogRepairMcu = new DialogRepairMcu(EventService.this);
                                    EventService.this.mDialogRepairMcu.showDialog();
                                    EventService.this.mHasCancelUpgradeMcu = true;
                                }
                            }
                        }

                        private void onCmdKSW0x00_0x10Event(byte[] bArr) {
                            if (bArr.length >= 6) {
                                if (bArr[4] == 0) {
                                    EventService.this.sendBroadcast(new Intent(EventUtils.MCU_MSG_ACC_DISCONNECTED_EVT));
                                    EventService.this.SendConnetCan(false);
                                    EventService.this.sendSysRTCTimer();
                                    EventService.this.SaveSystemData();
                                    EventService.this.sendKeyDownUpSync(4);
                                    EventService.this.notifyValidModeEvt(EventUtils.EVENT_POWER, 0, 0, (byte[]) null, (String) null);
                                    try {
                                        Runtime.getRuntime().exec("sync");
                                        Thread.sleep(200);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    Log.i(EventService.TAG, "--->>> KESAIWEI POWER OFF");
                                    EventService.this.sendKSW_0x00_0x69((byte) 16, (byte) 1, (byte) 0);
                                } else if (bArr[4] == 1) {
                                    boolean unused = EventService.this.handshakeSuccess = true;
                                    EventService.this.sendHandInitData();
                                }
                            }
                        }

                        private void onCmdKSW0x00_0x11Event(byte[] bArr) {
                            if (bArr.length >= 5) {
                                switch (bArr[4]) {
                                    case 1:
                                        onCmdKSW0x00_0x11_0x01Event(bArr);
                                        return;
                                    case 2:
                                        onCmdKSW0x00_0x11_0x02Event(bArr);
                                        return;
                                    case 3:
                                        onCmdKSW0x00_0x11_0x03Event(bArr);
                                        return;
                                    case 4:
                                        onCmdKSW0x00_0x11_0x04Event(bArr);
                                        return;
                                    case 5:
                                        onCMdKSW0x00_0x11_0x05Event(bArr);
                                        return;
                                    case 6:
                                        onCmdKSW0x00_0x11_0x06Event(bArr);
                                        return;
                                    case 7:
                                        onCmdKSW0x00_0x11_0x07Event(bArr);
                                        return;
                                    case 8:
                                        onCmdKSW0x00_0x11_0x08Event(bArr);
                                        return;
                                    case 9:
                                        onCmdKSW0x00_0x11_0x09Event(bArr);
                                        return;
                                    default:
                                        return;
                                }
                            }
                        }

                        private void onCmdKSW0x00_0x12Event(byte[] bArr) {
                            byte[] bArr2 = new byte[50];
                            for (int i = 4; i < bArr.length - 1; i++) {
                                bArr2[i - 4] = bArr[i];
                            }
                            String ASCIItoChar = EventService.ASCIItoChar(bArr2);
                            Log.i(EventService.TAG, "--->>> KSW strVersion == " + ASCIItoChar);
                            EventService.this.mStrMcuVer = ASCIItoChar;
                            EventService.this.sendBroadcastAsUser(new Intent(EventUtils.ZXW_CAN_VER_CHANGE), UserHandle.ALL);
                        }

                        private void onCmdKSW0x00_0x13Event(byte[] bArr) {
                            if (bArr.length >= 14) {
                                if (bArr[4] != 1) {
                                    byte b = bArr[4];
                                }
                                if (bArr[5] != 1) {
                                    byte b2 = bArr[5];
                                }
                                if (bArr[12] != 0 && bArr[12] != 1) {
                                    byte b3 = bArr[12];
                                }
                            }
                        }

                        private void onCmdKSW0x00_0x14Event(byte[] bArr) {
                            if (bArr.length >= 16) {
                                new String(bArr, 4, 15);
                            }
                        }

                        private void onCmdKSW0x00_0x15Event(byte[] bArr) {
                            if (bArr.length >= 6) {
                                Log.i(EventService.TAG, "onCmdKSW0x00_0x15Event: bydata[4] = " + bArr[4] + ", bydata[5] = " + bArr[5]);
                                EventService.this.start0x15EventMode(bArr);
                            }
                        }

                        private void onCmdKSW0x00_0x16Event(byte[] bArr) {
                            if (bArr.length >= 7) {
                                Intent intent = new Intent(EventUtils.KSW_MCU_SEND_ARM_DVD_EVENT);
                                intent.putExtra(EventUtils.KSW_MCU_SEND_ARM_DVD_EVENT_DATA, bArr);
                                EventService.this.getApplicationContext().sendBroadcast(intent);
                            }
                        }

                        private void onCmdKSW0x00_0x17Event(byte[] bArr) {
                            Log.d(EventService.TAG, "onCmdKSW0x00_0x17Event");
                            if (bArr.length >= 27) {
                                if (EventService.this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_RECORD_CAR_TYPE, 1) != (bArr[4] & 255)) {
                                    byte b = bArr[4] & 255;
                                    Log.d(EventService.TAG, "0x17Event carTypeIndex = " + b);
                                    SysProviderOpt sysProviderOpt = EventService.this.mSysProviderOpt;
                                    sysProviderOpt.updateRecord(SysProviderOpt.KESAIWEI_RECORD_CAR_TYPE, BuildConfig.FLAVOR + b);
                                }
                                if (EventService.this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_RECORD_AMPLIFIER, 0) != (bArr[5] & 255)) {
                                    byte b2 = bArr[5] & 255;
                                    Log.d(EventService.TAG, "0x17Event amplifierIndex = " + b2);
                                    SysProviderOpt sysProviderOpt2 = EventService.this.mSysProviderOpt;
                                    sysProviderOpt2.updateRecord(SysProviderOpt.KESAIWEI_RECORD_AMPLIFIER, BuildConfig.FLAVOR + b2);
                                }
                                if (EventService.this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_AGREEMENT_SELECT_INDEX, 5) != (bArr[12] & 255)) {
                                    byte b3 = bArr[12] & 255;
                                    Log.d(EventService.TAG, "0x17Event canIndex = " + b3);
                                    SysProviderOpt sysProviderOpt3 = EventService.this.mSysProviderOpt;
                                    sysProviderOpt3.updateRecord(SysProviderOpt.KSW_AGREEMENT_SELECT_INDEX, BuildConfig.FLAVOR + b3);
                                }
                                if (EventService.this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_RECORD_DVR, 0) != (bArr[7] & 255)) {
                                    byte b4 = bArr[7] & 255;
                                    Log.d(EventService.TAG, "0x17Event dvrIndex = " + b4);
                                    SysProviderOpt sysProviderOpt4 = EventService.this.mSysProviderOpt;
                                    sysProviderOpt4.updateRecord(SysProviderOpt.KESAIWEI_RECORD_DVR, BuildConfig.FLAVOR + b4);
                                }
                                int recordInteger = EventService.this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_RECORD_AUX_SWITCHING, 0);
                                if (recordInteger == 0 && bArr[8] == 0) {
                                    Log.d(EventService.TAG, "0x17Event auxSwitchIndex = 1");
                                    EventService.this.mSysProviderOpt.updateRecord(SysProviderOpt.KESAIWEI_RECORD_AUX_SWITCHING, "1");
                                }
                                if (recordInteger == 1 && bArr[8] == 1) {
                                    Log.d(EventService.TAG, "0x17Event auxSwitchIndex = 0");
                                    EventService.this.mSysProviderOpt.updateRecord(SysProviderOpt.KESAIWEI_RECORD_AUX_SWITCHING, "0");
                                }
                                int recordInteger2 = EventService.this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_SD_HOST, 1);
                                Log.d(EventService.TAG, "auxType index = " + recordInteger2);
                                if (recordInteger2 != (bArr[9] & 255)) {
                                    byte b5 = bArr[9] & 255;
                                    Log.d(EventService.TAG, "0x17Event auxTypeIndex = " + b5);
                                    SysProviderOpt sysProviderOpt5 = EventService.this.mSysProviderOpt;
                                    sysProviderOpt5.updateRecord(SysProviderOpt.KESAIWEI_SYS_SD_HOST, BuildConfig.FLAVOR + b5);
                                }
                            }
                        }

                        private void onCmdKSW0x00_0x18Event(byte[] bArr) {
                            if (bArr.length >= 5 && bArr[4] == 1) {
                                EventService.this.sendBroadcast(new Intent(EventUtils.KSW_BROADCASE_DVD_VIDEO_TO_LIST));
                            }
                        }

                        private void onCmdKSW0x00_0x19Event(byte[] bArr) {
                            byte b = bArr[4] & 255;
                            byte b2 = bArr[5] & 255;
                            byte b3 = bArr[6] & 255;
                            byte b4 = bArr[7] & 255;
                            if (EventService.this.mSysProviderOpt != null) {
                                SysProviderOpt sysProviderOpt = EventService.this.mSysProviderOpt;
                                sysProviderOpt.updateRecord(SysProviderOpt.KESAIWEI_AMBIENT_LIGHT_R_VALUE, b + BuildConfig.FLAVOR);
                                SysProviderOpt sysProviderOpt2 = EventService.this.mSysProviderOpt;
                                sysProviderOpt2.updateRecord(SysProviderOpt.KESAIWEI_AMBIENT_LIGHT_G_VALUE, b2 + BuildConfig.FLAVOR);
                                SysProviderOpt sysProviderOpt3 = EventService.this.mSysProviderOpt;
                                sysProviderOpt3.updateRecord(SysProviderOpt.KESAIWEI_AMBIENT_LIGHT_B_VALUE, b3 + BuildConfig.FLAVOR);
                                SysProviderOpt sysProviderOpt4 = EventService.this.mSysProviderOpt;
                                sysProviderOpt4.updateRecord(SysProviderOpt.KESAIWEI_CUR_SELECT_POSITION, b4 + BuildConfig.FLAVOR);
                            }
                        }

                        private void onCmdKSW0x00_0x1BEvent(byte[] bArr) {
                            int i;
                            int i2;
                            int i3;
                            int i4;
                            int i5;
                            float f;
                            byte b = bArr[3] == 12 ? bArr[15] & 255 : 0;
                            int i6 = ((bArr[4] << 8) & 65535) + (bArr[5] & 255);
                            int i7 = ((bArr[10] << 8) & 65535) + (bArr[11] & 255);
                            int i8 = ((bArr[6] << 8) & 65535) + (bArr[7] & 255);
                            int i9 = ((bArr[12] << 8) & 65535) + (bArr[13] & 255);
                            byte b2 = bArr[8] & 255;
                            byte b3 = bArr[14] & 255;
                            Log.i(EventService.TAG, "onCmdKSW0x00_0x1BEvent: receiveData touchType = " + b + ", x1 y1 iDown1 = " + i6 + " " + i8 + " " + b2 + ", x2 y2 iDown2 = " + i7 + " " + i9 + " " + b3);
                            if (b != 1) {
                                if (b != 2) {
                                    f = 255.0f;
                                    i = (int) ((((float) (i6 * EventService.this.screenWidth)) * 1.0f) / 255.0f);
                                    i3 = (int) ((((float) (i7 * EventService.this.screenWidth)) * 1.0f) / 255.0f);
                                    i2 = (int) ((((float) ((255 - i8) * EventService.this.screenHeight)) * 1.0f) / 255.0f);
                                    i9 = 255 - i9;
                                    i5 = EventService.this.screenHeight;
                                } else {
                                    f = 4095.0f;
                                    i = (int) ((((float) (i6 * EventService.this.screenWidth)) * 1.0f) / 4095.0f);
                                    i3 = (int) ((((float) (i7 * EventService.this.screenWidth)) * 1.0f) / 4095.0f);
                                    i2 = (int) ((((float) (i8 * EventService.this.screenHeight)) * 1.0f) / 4095.0f);
                                    i5 = EventService.this.screenHeight;
                                }
                                i4 = (int) ((((float) (i9 * i5)) * 1.0f) / f);
                            } else {
                                i = (int) ((((float) (i6 * EventService.this.screenWidth)) * 1.0f) / 1920.0f);
                                i3 = (int) ((((float) (i7 * EventService.this.screenWidth)) * 1.0f) / 1920.0f);
                                i4 = (int) ((((float) (i9 * EventService.this.screenHeight)) * 1.0f) / 720.0f);
                                i2 = (int) ((((float) (i8 * EventService.this.screenHeight)) * 1.0f) / 720.0f);
                            }
                            Log.i(EventService.TAG, "onCmdKSW0x00_0x1BEvent: touchType = " + b + ", tempX1 tempY1 iDown1 = " + i + " " + i2 + " " + b2 + ", tempX2 tempY2 iDown2 = " + i3 + " " + i4 + " " + b3);
                            InputTouchManage.getInputManager().injectTouch(b2, (float) i, (float) i2, b3, (float) i3, (float) i4);
                            if (EventService.this.m_iUITypeVer == 41) {
                                EventService.this.backLightOn_KSW();
                            }
                        }

                        private void onCmdKSW0x00_0x1CEvent(byte[] bArr) {
                            if (bArr.length >= 5) {
                                byte b = bArr[4] & 255;
                                if (!EventService.this.hasSendBtStatus && !EventService.this.hasEnterBackcar && !EventService.this.isUpgradeMode()) {
                                    if ((b == 1 && EventService.this.interfaceStatus == 2) || (b == 2 && EventService.this.interfaceStatus == 1)) {
                                        Log.d(EventService.TAG, "0x1C Interface status is not synchronized status = " + b + ", interfaceStatus = " + EventService.this.interfaceStatus);
                                        EventService.this.sendKSW_0x00_0x69((byte) 18, (byte) b, (byte) 0);
                                    }
                                }
                            }
                        }

                        private void onCmdKSW0x00_0x1DEvent(byte[] bArr) {
                            if (bArr.length >= 11) {
                                ArrayList arrayList = new ArrayList();
                                arrayList.add(Integer.valueOf(bArr[4] & 255));
                                arrayList.add(Integer.valueOf(bArr[5] & 255));
                                arrayList.add(Integer.valueOf(bArr[6] & 255));
                                int i = 1;
                                arrayList.add(Integer.valueOf((bArr[7] & 255) == 1 ? 1 : 0));
                                if ((bArr[8] & 255) != 1) {
                                    i = 0;
                                }
                                arrayList.add(Integer.valueOf(i));
                                arrayList.add(Integer.valueOf(bArr[9] & 255));
                                for (int i2 = 0; i2 < arrayList.size(); i2++) {
                                    Log.d(EventService.TAG, " data" + i2 + " = " + arrayList.get(i2));
                                }
                                Intent intent = new Intent(EventUtils.ZXW_ACTION_UPDATE_BENZ_CONTROL_DATA_SEND);
                                intent.putIntegerArrayListExtra("data", arrayList);
                                EventService.this.sendBroadcast(intent);
                            }
                        }

                        private void onCmdKSW0x00_0xA1Event(byte[] bArr) {
                            if (bArr.length >= 5) {
                                boolean z = false;
                                if (bArr[4] == 24) {
                                    ConnectivityManager connectivityManager = (ConnectivityManager) EventService.this.getSystemService("connectivity");
                                    if (connectivityManager == null || connectivityManager.getActiveNetworkInfo() == null) {
                                        Log.i(EventService.TAG, "--->>> connect null cwjManager");
                                    } else {
                                        z = connectivityManager.getActiveNetworkInfo().isAvailable();
                                    }
                                    if (z) {
                                        Log.i(EventService.TAG, "--->>> connect");
                                    } else {
                                        Log.i(EventService.TAG, "--->>> connect not");
                                    }
                                    if (EventService.this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_USER_TIME_TYPE, 1) == 0) {
                                        onCmdKSW0x00_0xA1_0x18Event(bArr);
                                    }
                                } else if (bArr[4] == 23) {
                                    onCmdKSW0x00_0xA1_0x17Event(bArr);
                                } else if (bArr[4] == 16) {
                                    onCmdKSW0x00_0xA1_0x10Event(bArr);
                                } else if (bArr[4] == 26) {
                                    if (bArr.length >= 6) {
                                        Log.i(EventService.TAG, "--->>> onCmdKSW0x00_0xA1Event bydata[5]= " + bArr[5]);
                                        if (bArr[5] == 1) {
                                            int unused = EventService.this.iInterfaceStatus_KSW = 1;
                                            int unused2 = EventService.this.interfaceStatus = 1;
                                            EventService.this.ksw_original_end();
                                            EventService.this.sendBroadcast(new Intent("com.szchoiceway.eventcenter.KSW_ORIGINAL_END"));
                                            EventService.this.sendBroadcast(new Intent(EventUtils.ZXW_ACTION_EXIT_AUX));
                                            if (EventService.this.m_iModeSet == 5 || EventService.this.m_iModeSet == 9) {
                                                EventService.this.getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, 26);
                                                int settingInt = EventService.this.getSettingInt(EventUtils.KEY_KSW_VOL_VAL_05, 10);
                                                EventService.this.putSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, settingInt);
                                                EventService.this.appySetting();
                                                EventService.this.commitSetting();
                                                EventService.this.SendVol_KSW(false, 1, 1, settingInt);
                                                EventService.this.sendBroadcast(new Intent(EventUtils.KSW_UPDATE_VOL_SET_VIEW));
                                            }
                                        } else if (bArr[5] == 2) {
                                            int unused3 = EventService.this.iInterfaceStatus_KSW = 2;
                                            int unused4 = EventService.this.interfaceStatus = 2;
                                            EventService.this.ksw_original_start();
                                            EventService.this.sendBroadcast(new Intent("com.szchoiceway.eventcenter.KSW_ORIGINAL_START"));
                                        }
                                    }
                                } else if (bArr[4] == 27) {
                                    onCmdKSW0x00_0xA1_0x1BEvent(bArr);
                                } else if (bArr[4] == 28) {
                                    onCmdKSW0x00_0xA1_0x1CEvent(bArr);
                                } else if (bArr[4] == 29) {
                                    onCmdKSW0x00_0xA1_0x1DEvent(bArr);
                                } else if (bArr[4] == 25) {
                                    onCmdKSW0x00_0xA1_0x19Event(bArr);
                                } else if (bArr[4] == 18) {
                                    onCmdKSW0x00_0xA1_0x12Event(bArr);
                                } else if (bArr[4] == 19) {
                                    onCmdKSW0x00_0xA1_0x13Event(bArr);
                                } else if (bArr[4] == 20) {
                                    onCmdKSW0x00_0xA1_0x14Event(bArr);
                                } else if (bArr[4] == 21) {
                                    onCmdKSW0x00_0xA1_0x15Event(bArr);
                                } else {
                                    onCmdCanbusAll(bArr);
                                }
                            }
                        }

                        private void onCmdKSW0x00_0x27Event(byte[] bArr) {
                            Log.d(EventService.TAG, "onCmdKSW0x00_0x27Event: " + EventUtils.bytesToHexString(bArr));
                            if (bArr.length >= 8) {
                                if ((bArr[4] & 1) > 0) {
                                    Intent intent = new Intent(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST);
                                    intent.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_KEY, "door");
                                    intent.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_VALUE, 1);
                                    EventService.this.sendBroadcast(intent);
                                    Log.d(EventService.TAG, "车门未关");
                                } else {
                                    Intent intent2 = new Intent(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST);
                                    intent2.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_KEY, "door");
                                    intent2.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_VALUE, 0);
                                    EventService.this.sendBroadcast(intent2);
                                    Log.d(EventService.TAG, "车门已关");
                                }
                                if ((bArr[4] & 2) > 0) {
                                    Intent intent3 = new Intent(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST);
                                    intent3.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_KEY, "seatBelt");
                                    intent3.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_VALUE, 1);
                                    EventService.this.sendBroadcast(intent3);
                                    Log.d(EventService.TAG, "安全带未系");
                                } else {
                                    Intent intent4 = new Intent(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST);
                                    intent4.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_KEY, "seatBelt");
                                    intent4.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_VALUE, 0);
                                    EventService.this.sendBroadcast(intent4);
                                    Log.d(EventService.TAG, "安全带已系");
                                }
                                if ((bArr[4] & 4) > 0) {
                                    Intent intent5 = new Intent(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST);
                                    intent5.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_KEY, "oil");
                                    intent5.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_VALUE, 1);
                                    EventService.this.sendBroadcast(intent5);
                                    Log.d(EventService.TAG, "剩余油量不足");
                                } else {
                                    Intent intent6 = new Intent(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST);
                                    intent6.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_KEY, "oil");
                                    intent6.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_VALUE, 0);
                                    EventService.this.sendBroadcast(intent6);
                                    Log.d(EventService.TAG, "剩余油量正常");
                                }
                                if ((8 & bArr[4]) > 0) {
                                    Intent intent7 = new Intent(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST);
                                    intent7.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_KEY, "speed");
                                    intent7.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_VALUE, 1);
                                    EventService.this.sendBroadcast(intent7);
                                    Log.d(EventService.TAG, "超出限速范围");
                                } else {
                                    Intent intent8 = new Intent(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST);
                                    intent8.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_KEY, "speed");
                                    intent8.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_VALUE, 0);
                                    EventService.this.sendBroadcast(intent8);
                                    Log.d(EventService.TAG, "限速范围内");
                                }
                                if ((bArr[4] & 16) > 0) {
                                    Intent intent9 = new Intent(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST);
                                    intent9.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_KEY, "temperature");
                                    intent9.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_VALUE, 1);
                                    EventService.this.sendBroadcast(intent9);
                                    Log.d(EventService.TAG, "环境温度过低");
                                    return;
                                }
                                Intent intent10 = new Intent(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST);
                                intent10.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_KEY, "temperature");
                                intent10.putExtra(EventUtils.ZXW_ACTION_TXZ_VOICE__BROADCAST_VALUE, 0);
                                EventService.this.sendBroadcast(intent10);
                                Log.d(EventService.TAG, "正常环境温度");
                            }
                        }

                        private void onCmdKSW0x00_0x28Event(byte[] bArr) {
                            if (bArr.length >= 9) {
                                if (bArr[4] == 1) {
                                    EventService.this.mEventHandler.post(
                                    /*  JADX ERROR: Method code generation error
                                        jadx.core.utils.exceptions.CodegenException: Error generate insn: 0x0017: INVOKE  
                                          (wrap: android.os.Handler : 0x0010: IGET  (r4v3 android.os.Handler) = 
                                          (wrap: com.szchoiceway.eventcenter.EventService : 0x000e: IGET  (r4v2 com.szchoiceway.eventcenter.EventService) = 
                                          (wrap: com.szchoiceway.eventcenter.EventService$3 : 0x000c: IGET  (r4v1 com.szchoiceway.eventcenter.EventService$3) = 
                                          (r3v0 'this' com.szchoiceway.eventcenter.EventService$3$1 A[THIS])
                                         com.szchoiceway.eventcenter.EventService.3.1.this$1 com.szchoiceway.eventcenter.EventService$3)
                                         com.szchoiceway.eventcenter.EventService.3.this$0 com.szchoiceway.eventcenter.EventService)
                                         com.szchoiceway.eventcenter.EventService.mEventHandler android.os.Handler)
                                          (wrap: com.szchoiceway.eventcenter.-$$Lambda$EventService$3$1$NWAZny6WhFsTF1RUKL7CNCBe1_U : 0x0014: CONSTRUCTOR  (r0v6 com.szchoiceway.eventcenter.-$$Lambda$EventService$3$1$NWAZny6WhFsTF1RUKL7CNCBe1_U) = 
                                          (r3v0 'this' com.szchoiceway.eventcenter.EventService$3$1 A[THIS])
                                         call: com.szchoiceway.eventcenter.-$$Lambda$EventService$3$1$NWAZny6WhFsTF1RUKL7CNCBe1_U.<init>(com.szchoiceway.eventcenter.EventService$3$1):void type: CONSTRUCTOR)
                                         android.os.Handler.post(java.lang.Runnable):boolean type: VIRTUAL in method: com.szchoiceway.eventcenter.EventService.3.1.onCmdKSW0x00_0x28Event(byte[]):void, dex: classes.dex
                                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:256)
                                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:221)
                                        	at jadx.core.codegen.RegionGen.makeSimpleBlock(RegionGen.java:109)
                                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:55)
                                        	at jadx.core.codegen.RegionGen.makeSimpleRegion(RegionGen.java:92)
                                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:58)
                                        	at jadx.core.codegen.RegionGen.makeRegionIndent(RegionGen.java:98)
                                        	at jadx.core.codegen.RegionGen.makeIf(RegionGen.java:142)
                                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                                        	at jadx.core.codegen.RegionGen.makeSimpleRegion(RegionGen.java:92)
                                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:58)
                                        	at jadx.core.codegen.RegionGen.makeRegionIndent(RegionGen.java:98)
                                        	at jadx.core.codegen.RegionGen.makeIf(RegionGen.java:142)
                                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                                        	at jadx.core.codegen.RegionGen.makeSimpleRegion(RegionGen.java:92)
                                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:58)
                                        	at jadx.core.codegen.MethodGen.addRegionInsns(MethodGen.java:211)
                                        	at jadx.core.codegen.MethodGen.addInstructions(MethodGen.java:204)
                                        	at jadx.core.codegen.ClassGen.addMethodCode(ClassGen.java:318)
                                        	at jadx.core.codegen.ClassGen.addMethod(ClassGen.java:271)
                                        	at jadx.core.codegen.ClassGen.lambda$addInnerClsAndMethods$2(ClassGen.java:240)
                                        	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
                                        	at java.util.ArrayList.forEach(ArrayList.java:1259)
                                        	at java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
                                        	at java.util.stream.Sink$ChainedReference.end(Sink.java:258)
                                        	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
                                        	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
                                        	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
                                        	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
                                        	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
                                        	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
                                        	at jadx.core.codegen.ClassGen.addInnerClsAndMethods(ClassGen.java:236)
                                        	at jadx.core.codegen.ClassGen.addClassBody(ClassGen.java:227)
                                        	at jadx.core.codegen.InsnGen.inlineAnonymousConstructor(InsnGen.java:676)
                                        	at jadx.core.codegen.InsnGen.makeConstructor(InsnGen.java:607)
                                        	at jadx.core.codegen.InsnGen.makeInsnBody(InsnGen.java:364)
                                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:231)
                                        	at jadx.core.codegen.InsnGen.addWrappedArg(InsnGen.java:123)
                                        	at jadx.core.codegen.InsnGen.addArg(InsnGen.java:107)
                                        	at jadx.core.codegen.InsnGen.makeInsnBody(InsnGen.java:429)
                                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:250)
                                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:221)
                                        	at jadx.core.codegen.RegionGen.makeSimpleBlock(RegionGen.java:109)
                                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:55)
                                        	at jadx.core.codegen.RegionGen.makeSimpleRegion(RegionGen.java:92)
                                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:58)
                                        	at jadx.core.codegen.MethodGen.addRegionInsns(MethodGen.java:211)
                                        	at jadx.core.codegen.MethodGen.addInstructions(MethodGen.java:204)
                                        	at jadx.core.codegen.ClassGen.addMethodCode(ClassGen.java:318)
                                        	at jadx.core.codegen.ClassGen.addMethod(ClassGen.java:271)
                                        	at jadx.core.codegen.ClassGen.lambda$addInnerClsAndMethods$2(ClassGen.java:240)
                                        	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
                                        	at java.util.ArrayList.forEach(ArrayList.java:1259)
                                        	at java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
                                        	at java.util.stream.Sink$ChainedReference.end(Sink.java:258)
                                        	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
                                        	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
                                        	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
                                        	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
                                        	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
                                        	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
                                        	at jadx.core.codegen.ClassGen.addInnerClsAndMethods(ClassGen.java:236)
                                        	at jadx.core.codegen.ClassGen.addClassBody(ClassGen.java:227)
                                        	at jadx.core.codegen.InsnGen.inlineAnonymousConstructor(InsnGen.java:676)
                                        	at jadx.core.codegen.InsnGen.makeConstructor(InsnGen.java:607)
                                        	at jadx.core.codegen.InsnGen.makeInsnBody(InsnGen.java:364)
                                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:231)
                                        	at jadx.core.codegen.InsnGen.addWrappedArg(InsnGen.java:123)
                                        	at jadx.core.codegen.InsnGen.addArg(InsnGen.java:107)
                                        	at jadx.core.codegen.InsnGen.generateMethodArguments(InsnGen.java:787)
                                        	at jadx.core.codegen.InsnGen.makeConstructor(InsnGen.java:640)
                                        	at jadx.core.codegen.InsnGen.makeInsnBody(InsnGen.java:364)
                                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:231)
                                        	at jadx.core.codegen.InsnGen.addWrappedArg(InsnGen.java:123)
                                        	at jadx.core.codegen.InsnGen.addArg(InsnGen.java:107)
                                        	at jadx.core.codegen.InsnGen.addArgDot(InsnGen.java:91)
                                        	at jadx.core.codegen.InsnGen.makeInvoke(InsnGen.java:697)
                                        	at jadx.core.codegen.InsnGen.makeInsnBody(InsnGen.java:368)
                                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:250)
                                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:221)
                                        	at jadx.core.codegen.RegionGen.makeSimpleBlock(RegionGen.java:109)
                                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:55)
                                        	at jadx.core.codegen.RegionGen.makeSimpleRegion(RegionGen.java:92)
                                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:58)
                                        	at jadx.core.codegen.RegionGen.makeRegionIndent(RegionGen.java:98)
                                        	at jadx.core.codegen.RegionGen.makeIf(RegionGen.java:142)
                                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:62)
                                        	at jadx.core.codegen.RegionGen.makeSimpleRegion(RegionGen.java:92)
                                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:58)
                                        	at jadx.core.codegen.RegionGen.makeSimpleRegion(RegionGen.java:92)
                                        	at jadx.core.codegen.RegionGen.makeRegion(RegionGen.java:58)
                                        	at jadx.core.codegen.MethodGen.addRegionInsns(MethodGen.java:211)
                                        	at jadx.core.codegen.MethodGen.addInstructions(MethodGen.java:204)
                                        	at jadx.core.codegen.ClassGen.addMethodCode(ClassGen.java:318)
                                        	at jadx.core.codegen.ClassGen.addMethod(ClassGen.java:271)
                                        	at jadx.core.codegen.ClassGen.lambda$addInnerClsAndMethods$2(ClassGen.java:240)
                                        	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
                                        	at java.util.ArrayList.forEach(ArrayList.java:1259)
                                        	at java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
                                        	at java.util.stream.Sink$ChainedReference.end(Sink.java:258)
                                        	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)
                                        	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
                                        	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
                                        	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
                                        	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
                                        	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
                                        	at jadx.core.codegen.ClassGen.addInnerClsAndMethods(ClassGen.java:236)
                                        	at jadx.core.codegen.ClassGen.addClassBody(ClassGen.java:227)
                                        	at jadx.core.codegen.ClassGen.addClassCode(ClassGen.java:112)
                                        	at jadx.core.codegen.ClassGen.makeClass(ClassGen.java:78)
                                        	at jadx.core.codegen.CodeGen.wrapCodeGen(CodeGen.java:44)
                                        	at jadx.core.codegen.CodeGen.generateJavaCode(CodeGen.java:33)
                                        	at jadx.core.codegen.CodeGen.generate(CodeGen.java:21)
                                        	at jadx.core.ProcessClass.generateCode(ProcessClass.java:61)
                                        	at jadx.core.dex.nodes.ClassNode.decompile(ClassNode.java:273)
                                        Caused by: jadx.core.utils.exceptions.CodegenException: Error generate insn: 0x0014: CONSTRUCTOR  (r0v6 com.szchoiceway.eventcenter.-$$Lambda$EventService$3$1$NWAZny6WhFsTF1RUKL7CNCBe1_U) = 
                                          (r3v0 'this' com.szchoiceway.eventcenter.EventService$3$1 A[THIS])
                                         call: com.szchoiceway.eventcenter.-$$Lambda$EventService$3$1$NWAZny6WhFsTF1RUKL7CNCBe1_U.<init>(com.szchoiceway.eventcenter.EventService$3$1):void type: CONSTRUCTOR in method: com.szchoiceway.eventcenter.EventService.3.1.onCmdKSW0x00_0x28Event(byte[]):void, dex: classes.dex
                                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:256)
                                        	at jadx.core.codegen.InsnGen.addWrappedArg(InsnGen.java:123)
                                        	at jadx.core.codegen.InsnGen.addArg(InsnGen.java:107)
                                        	at jadx.core.codegen.InsnGen.generateMethodArguments(InsnGen.java:787)
                                        	at jadx.core.codegen.InsnGen.makeInvoke(InsnGen.java:728)
                                        	at jadx.core.codegen.InsnGen.makeInsnBody(InsnGen.java:368)
                                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:250)
                                        	... 114 more
                                        Caused by: jadx.core.utils.exceptions.JadxRuntimeException: Expected class to be processed at this point, class: com.szchoiceway.eventcenter.-$$Lambda$EventService$3$1$NWAZny6WhFsTF1RUKL7CNCBe1_U, state: NOT_LOADED
                                        	at jadx.core.dex.nodes.ClassNode.ensureProcessed(ClassNode.java:260)
                                        	at jadx.core.codegen.InsnGen.makeConstructor(InsnGen.java:606)
                                        	at jadx.core.codegen.InsnGen.makeInsnBody(InsnGen.java:364)
                                        	at jadx.core.codegen.InsnGen.makeInsn(InsnGen.java:231)
                                        	... 120 more
                                        */
                                    /*
                                        this = this;
                                        int r0 = r4.length
                                        r1 = 9
                                        if (r0 >= r1) goto L_0x0006
                                        return
                                    L_0x0006:
                                        r0 = 4
                                        byte r1 = r4[r0]
                                        r2 = 1
                                        if (r1 != r2) goto L_0x001b
                                        com.szchoiceway.eventcenter.EventService$3 r4 = com.szchoiceway.eventcenter.EventService.AnonymousClass3.this
                                        com.szchoiceway.eventcenter.EventService r4 = com.szchoiceway.eventcenter.EventService.this
                                        android.os.Handler r4 = r4.mEventHandler
                                        com.szchoiceway.eventcenter.-$$Lambda$EventService$3$1$NWAZny6WhFsTF1RUKL7CNCBe1_U r0 = new com.szchoiceway.eventcenter.-$$Lambda$EventService$3$1$NWAZny6WhFsTF1RUKL7CNCBe1_U
                                        r0.<init>(r3)
                                        r4.post(r0)
                                        goto L_0x002d
                                    L_0x001b:
                                        byte r0 = r4[r0]
                                        if (r0 != 0) goto L_0x002d
                                        com.szchoiceway.eventcenter.EventService$3 r0 = com.szchoiceway.eventcenter.EventService.AnonymousClass3.this
                                        com.szchoiceway.eventcenter.EventService r0 = com.szchoiceway.eventcenter.EventService.this
                                        android.os.Handler r0 = r0.mEventHandler
                                        com.szchoiceway.eventcenter.-$$Lambda$EventService$3$1$jcUxpg0b00u2mSGvBrThshU0rnE r1 = new com.szchoiceway.eventcenter.-$$Lambda$EventService$3$1$jcUxpg0b00u2mSGvBrThshU0rnE
                                        r1.<init>(r3, r4)
                                        r0.post(r1)
                                    L_0x002d:
                                        return
                                    */
                                    throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.AnonymousClass3.AnonymousClass1.onCmdKSW0x00_0x28Event(byte[]):void");
                                }

                                public /* synthetic */ void lambda$onCmdKSW0x00_0x28Event$0$EventService$3$1() {
                                    EventService.this.b_Original_View = true;
                                    EventService.this.mBackcarEvtHw.startCamera(1, 0);
                                }

                                public /* synthetic */ void lambda$onCmdKSW0x00_0x28Event$1$EventService$3$1(byte[] bArr) {
                                    EventService.this.mBackcarEvtHw.startCamera(2, bArr[5] & 255);
                                }

                                private void onCmdKSW0x00_0x29Event(byte[] bArr) {
                                    if (bArr.length >= 30 && EventService.this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_DATA_DECODER_V3, false)) {
                                        EventService.this.decoderResolution = EventUtils.getDecoderResolution(bArr[4]);
                                        Log.d(EventService.TAG, "onCmdKSW0x00_0x29Event decoderResolution = " + EventService.this.decoderResolution);
                                        if (!EventService.this.decoderResolution.equalsIgnoreCase(EventService.this.mSysProviderOpt.getRecordValue(SysProviderOpt.RESOLUTION, BuildConfig.FLAVOR))) {
                                            EventService.this.mSysProviderOpt.updateRecord(SysProviderOpt.RESOLUTION, EventService.this.decoderResolution);
                                            if (EventService.this.checkConfig()) {
                                                Message message = new Message();
                                                message.what = 1;
                                                message.obj = 5;
                                                EventService.this.mHandler.sendMessage(message);
                                            }
                                        }
                                    }
                                }

                                private void onCmdKSW0x00_0x2aEvent(byte[] bArr) {
                                    if (bArr.length >= 11) {
                                        byte[] unused = EventService.this.mAxisAttitudeData = new byte[6];
                                        for (int i = 0; i < 6; i++) {
                                            EventService.this.mAxisAttitudeData[i] = bArr[i + 4];
                                        }
                                    }
                                }

                                private void onCmdKSW0x00_0xA1_0x18Event(byte[] bArr) {
                                    if (bArr.length >= 12) {
                                        int i = bArr[5] + 2000;
                                        byte b = bArr[6];
                                        byte b2 = bArr[7];
                                        byte b3 = bArr[8];
                                        byte b4 = bArr[9];
                                        byte b5 = bArr[10];
                                        byte b6 = bArr[11];
                                        Log.i(EventService.TAG, "--->>> iYear = " + i + ", iMonth = " + b + ", iDay = " + b2 + ", iHour = " + b3 + ", iMin = " + b4 + ", iSec = " + b5 + "; i24Hour = " + b6);
                                        Integer.parseInt(EventService.this.mSysProviderOpt.getRecordValue(SysProviderOpt.SYS_APP_VERSION).substring(0, 4));
                                        Calendar instance = Calendar.getInstance();
                                        instance.set(i, b + -1, b2, b3, b4, b5);
                                        Log.d(EventService.TAG, "set original time");
                                        ((AlarmManager) EventService.this.getSystemService(NotificationCompat.CATEGORY_ALARM)).setTime(instance.getTimeInMillis());
                                    }
                                }

                                private void onCmdKSW0x00_0xA1_0x17Event(byte[] bArr) {
                                    String topPackageName;
                                    String topPackageName2;
                                    int i;
                                    String topPackageName3;
                                    String topPackageName4;
                                    byte[] bArr2 = bArr;
                                    if (!EventService.this.b_Conn_KSW && bArr2.length >= 7) {
                                        EventService.this.backLightOn_KSW();
                                        if (bArr2[6] == 1) {
                                            int unused = EventService.this.iCAN_RECE_BUTTON_FLAG = 0;
                                            int unused2 = EventService.this.receive_can_key_time = 0;
                                            if (bArr2[5] != 0) {
                                                int unused3 = EventService.this.iCanCar_button = bArr2[5] & 255;
                                                Log.i(EventService.TAG, "iCanCar_button == " + EventService.this.iCanCar_button);
                                                int unused4 = EventService.this.iCAN_RECE_BUTTON_FLAG = 1;
                                                if (EventService.this.iCanCar_button == 23) {
                                                    int unused5 = EventService.this.receive_can_key_time = 0;
                                                    int unused6 = EventService.this.iCAN_RECE_BUTTON_FLAG = 0;
                                                    Log.d(EventService.TAG, "isLetterConnect = " + EventService.this.isLetterConnect);
                                                    if (EventService.this.isLetterConnect) {
                                                        EventService.this.sendLetterKeyCode(CarletterInterface.KEYCODE_MEDIA_PREV);
                                                    }
                                                    int unused7 = EventService.this.g_byKeyVal = 3;
                                                    int unused8 = EventService.this.iCanCar_button = 0;
                                                    Log.d(EventService.TAG, "send MCU_KEY_PREV");
                                                    Message obtainMessage = EventService.this.mEventHandler.obtainMessage();
                                                    obtainMessage.what = EventUtils.HANDLER_CAN_KEY_EVENT;
                                                    obtainMessage.arg1 = 3;
                                                    EventService.this.mEventHandler.sendMessageDelayed(obtainMessage, 500);
                                                    int unused9 = EventService.this.g_byKeyVal = 0;
                                                } else if (EventService.this.iCanCar_button == 24) {
                                                    int unused10 = EventService.this.receive_can_key_time = 0;
                                                    int unused11 = EventService.this.iCAN_RECE_BUTTON_FLAG = 0;
                                                    Log.d(EventService.TAG, "isLetterConnect = " + EventService.this.isLetterConnect);
                                                    if (EventService.this.isLetterConnect) {
                                                        EventService.this.sendLetterKeyCode(CarletterInterface.KEYCODE_MEDIA_NEXT);
                                                    }
                                                    int unused12 = EventService.this.g_byKeyVal = 2;
                                                    int unused13 = EventService.this.iCanCar_button = 0;
                                                    Log.d(EventService.TAG, "send MCU_KEY_NEXT");
                                                    Message obtainMessage2 = EventService.this.mEventHandler.obtainMessage();
                                                    obtainMessage2.what = EventUtils.HANDLER_CAN_KEY_EVENT;
                                                    obtainMessage2.arg1 = 2;
                                                    EventService.this.mEventHandler.sendMessageDelayed(obtainMessage2, 500);
                                                    int unused14 = EventService.this.g_byKeyVal = 0;
                                                } else if (EventService.this.iCanCar_button == 6) {
                                                    int unused15 = EventService.this.receive_can_key_time = 0;
                                                    int unused16 = EventService.this.iCAN_RECE_BUTTON_FLAG = 0;
                                                    if (EventService.this.bZlinkCarplayResume) {
                                                        EventService.this.sendKeyDownUpSync(1502);
                                                    } else {
                                                        boolean recordBoolean = Build.VERSION.SDK_INT < 26 ? EventService.this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.MAISILUO_LAUNCHER_APPS_CUSTOMIZE_RESUM, false) : false;
                                                        if (EventService.this.ksw_m_b_amap_auto_front && EventService.this.m_iBTStatus <= 3 && ((topPackageName4 = EventUtils.getTopPackageName(EventService.this)) == null || !topPackageName4.equals("com.autonavi.amapauto"))) {
                                                            boolean unused17 = EventService.this.ksw_m_b_amap_auto_front = false;
                                                        }
                                                        if (EventService.this.ksw_m_b_amap_auto_front && EventService.this.m_iBTStatus <= 3) {
                                                            EventService.this.ksw_send_amap_auto(true);
                                                        } else if (recordBoolean) {
                                                            EventService.this.sendKeyDownUpSync(22);
                                                        } else if (EventService.this.isLetterTop() && EventService.this.mConnectMode != 7) {
                                                            long currentTimeMillis = System.currentTimeMillis();
                                                            if (Math.abs(currentTimeMillis - this.sendLetterKnobTime) > 50) {
                                                                EventService.this.sendLetterKeyCode(257);
                                                                this.sendLetterKnobTime = currentTimeMillis;
                                                            }
                                                        } else if (EventService.this.isOtherTop()) {
                                                            EventService.this.sendKeyDownUpSync(61);
                                                        } else {
                                                            Intent intent = new Intent(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_EVT);
                                                            if (EventService.this.bIsAutoKit) {
                                                                intent.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_DATA, 2);
                                                            } else {
                                                                intent.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_DATA, 8);
                                                            }
                                                            intent.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_THIRD_PARTY_DATA, 8);
                                                            EventService.this.sendBroadcast(intent);
                                                        }
                                                    }
                                                    int unused18 = EventService.this.iCanCar_button = 0;
                                                    return;
                                                } else if (EventService.this.iCanCar_button == 7) {
                                                    int unused19 = EventService.this.receive_can_key_time = 0;
                                                    int unused20 = EventService.this.iCAN_RECE_BUTTON_FLAG = 0;
                                                    if (EventService.this.bZlinkCarplayResume) {
                                                        EventService.this.sendKeyDownUpSync(1501);
                                                    } else {
                                                        boolean recordBoolean2 = Build.VERSION.SDK_INT < 26 ? EventService.this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.MAISILUO_LAUNCHER_APPS_CUSTOMIZE_RESUM, false) : false;
                                                        if (EventService.this.ksw_m_b_amap_auto_front && EventService.this.m_iBTStatus <= 3 && ((topPackageName3 = EventUtils.getTopPackageName(EventService.this)) == null || !topPackageName3.equals("com.autonavi.amapauto"))) {
                                                            boolean unused21 = EventService.this.ksw_m_b_amap_auto_front = false;
                                                        }
                                                        if (EventService.this.ksw_m_b_amap_auto_front && EventService.this.m_iBTStatus <= 3) {
                                                            EventService.this.ksw_send_amap_auto(false);
                                                        } else if (recordBoolean2) {
                                                            EventService.this.sendKeyDownUpSync(21);
                                                        } else if (EventService.this.isLetterTop() && EventService.this.mConnectMode != 7) {
                                                            long currentTimeMillis2 = System.currentTimeMillis();
                                                            if (Math.abs(currentTimeMillis2 - this.sendLetterKnobTime) > 50) {
                                                                EventService.this.sendLetterKeyCode(256);
                                                                this.sendLetterKnobTime = currentTimeMillis2;
                                                            }
                                                        } else if (EventService.this.isOtherTop()) {
                                                            EventService.this.sendKeyDownUpSync(19);
                                                        } else {
                                                            Intent intent2 = new Intent(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_EVT);
                                                            if (EventService.this.bIsAutoKit) {
                                                                intent2.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_DATA, 1);
                                                                i = 7;
                                                            } else {
                                                                Log.d(EventService.TAG, "sendBroadcast ZXW_ORIGINAL_MCU_KEY_LEFT_HANDED");
                                                                i = 7;
                                                                intent2.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_DATA, 7);
                                                            }
                                                            intent2.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_THIRD_PARTY_DATA, i);
                                                            EventService.this.sendBroadcast(intent2);
                                                        }
                                                    }
                                                    int unused22 = EventService.this.iCanCar_button = 0;
                                                    return;
                                                } else if (EventService.this.iCanCar_button == 5) {
                                                    Intent intent3 = new Intent(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_EVT);
                                                    intent3.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_DATA, 6);
                                                    EventService.this.sendBroadcast(intent3);
                                                }
                                            }
                                        } else if (bArr2[6] == 0) {
                                            int unused23 = EventService.this.receive_can_key_time = 0;
                                            if (EventService.this.iCAN_RECE_BUTTON_FLAG == 1) {
                                                int unused24 = EventService.this.iCAN_RECE_BUTTON_FLAG = 0;
                                                if (EventService.this.iCanCar_button <= 255) {
                                                    Log.i(EventService.TAG, "onCmdKSW0x00_0xA1_0x17Event: iCanCar_button = " + EventService.this.iCanCar_button);
                                                    if (EventService.this.iCanCar_button == 1) {
                                                        if (EventService.this.bZlinkCarplayResume) {
                                                            EventService.this.sendKeyDownUpSync(19);
                                                        } else {
                                                            int unused25 = EventService.this.g_byKeyVal = 25;
                                                            Intent intent4 = new Intent(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_EVT);
                                                            Customer.getUIIndex(EventService.this);
                                                            intent4.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_DATA, 3);
                                                            EventService.this.sendBroadcast(intent4);
                                                        }
                                                    } else if (EventService.this.iCanCar_button == 2) {
                                                        if (EventService.this.bZlinkCarplayResume) {
                                                            EventService.this.sendKeyDownUpSync(20);
                                                        } else {
                                                            int unused26 = EventService.this.g_byKeyVal = 26;
                                                            Intent intent5 = new Intent(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_EVT);
                                                            if (!EventService.bLauncherIsResume) {
                                                                intent5.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_DATA, 4);
                                                            }
                                                            EventService.this.sendBroadcast(intent5);
                                                        }
                                                    } else if (EventService.this.iCanCar_button == 3) {
                                                        if (EventService.this.bZlinkCarplayResume) {
                                                            EventService.this.sendKeyDownUpSync(21);
                                                        } else {
                                                            if (EventService.this.m_iUITypeVer != 41) {
                                                                int unused27 = EventService.this.g_byKeyVal = 85;
                                                            } else if (EventService.this.isLetterTop() && EventService.this.mConnectMode != 7) {
                                                                EventService.this.sendLetterKeyCode(258);
                                                            } else if (EventService.this.isOtherTop()) {
                                                                EventService.this.sendKeyDownUpSync(21);
                                                            } else if (EventService.this.mValidMode == EventUtils.eSrcMode.SRC_BT || EventService.this.mValidMode == EventUtils.eSrcMode.SRC_BTMUSIC || EventService.this.mValidMode == EventUtils.eSrcMode.SRC_MUSIC || EventService.this.mValidMode == EventUtils.eSrcMode.SRC_MOVIE || EventUtils.SET_MODE_PACKAGE_NAME.equals(EventUtils.getTopPackageName(EventService.this)) || EventService.this.mSysProviderOpt.getRecordBoolean("ZXW_LAUNCHER_IS_RESUME", false)) {
                                                                Intent intent6 = new Intent(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_EVT);
                                                                intent6.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_DATA, 1);
                                                                EventService.this.sendBroadcast(intent6);
                                                            } else {
                                                                int unused28 = EventService.this.g_byKeyVal = 85;
                                                            }
                                                            Intent intent7 = new Intent(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_EVT);
                                                            intent7.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_THIRD_PARTY_DATA, 1);
                                                            EventService.this.sendBroadcast(intent7);
                                                        }
                                                    } else if (EventService.this.iCanCar_button == 4) {
                                                        if (EventService.this.bZlinkCarplayResume) {
                                                            EventService.this.sendKeyDownUpSync(22);
                                                        } else {
                                                            if (EventService.this.m_iUITypeVer == 41) {
                                                                if (EventService.this.isLetterTop() && EventService.this.mConnectMode != 7) {
                                                                    EventService.this.sendLetterKeyCode(259);
                                                                } else if (EventService.this.isOtherTop()) {
                                                                    EventService.this.sendKeyDownUpSync(22);
                                                                } else {
                                                                    Intent intent8 = new Intent(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_EVT);
                                                                    intent8.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_DATA, 2);
                                                                    EventService.this.sendBroadcast(intent8);
                                                                }
                                                            }
                                                            Intent intent9 = new Intent(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_EVT);
                                                            intent9.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_THIRD_PARTY_DATA, 2);
                                                            EventService.this.sendBroadcast(intent9);
                                                        }
                                                    } else if (EventService.this.iCanCar_button == 5) {
                                                        if (EventService.this.isLetterTop() && EventService.this.mConnectMode != 7) {
                                                            EventService.this.sendLetterKeyCode(288);
                                                        } else if (EventService.this.bZlinkCarplayResume && EventService.this.mZlinLinkMode == 5) {
                                                            EventService.this.sendKeyDownUpSync(23);
                                                        } else if (EventService.this.isOtherTop()) {
                                                            EventService.this.sendKeyDownUpSync(66);
                                                        } else {
                                                            Intent intent10 = new Intent(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_EVT);
                                                            intent10.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_DATA, 5);
                                                            intent10.putExtra(EventUtils.ZXW_ORIGINAL_MCU_KEY_FOCUS_MOVE_THIRD_PARTY_DATA, 5);
                                                            EventService.this.sendBroadcast(intent10);
                                                        }
                                                        int unused29 = EventService.this.g_byKeyVal = 0;
                                                        return;
                                                    } else if (!(EventService.this.iCanCar_button == 6 || EventService.this.iCanCar_button == 7)) {
                                                        if (EventService.this.iCanCar_button == 8) {
                                                            Log.i(EventService.TAG, "--->>> KeyEvent.KEYCODE_HOME aaaaaaaa");
                                                            if (EventService.this.cameraUtilXYQ != null && EventService.this.show360Dialog) {
                                                                EventService.this.cameraUtilXYQ.exit360();
                                                            } else if (EventService.this.bZlinkCarplayResume) {
                                                                EventService.this.sendKeyDownUpSync(3);
                                                            } else {
                                                                int unused30 = EventService.this.g_byKeyVal = 9;
                                                            }
                                                        } else if (!(EventService.this.iCanCar_button == 9 || EventService.this.iCanCar_button == 10)) {
                                                            if (EventService.this.iCanCar_button == 11) {
                                                                if (!EventService.this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_ORIGINAL_CAR_VIDEO_DISPLAY, true)) {
                                                                    EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventUtils.BT_MODE_PACKAGE_NAME, EventUtils.BT_MODE_CLASS_NAME);
                                                                } else if ("XinCheng".equalsIgnoreCase(EventService.this.xml_client)) {
                                                                    EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventUtils.BT_MODE_PACKAGE_NAME, EventUtils.BT_MODE_CLASS_NAME);
                                                                }
                                                            } else if (EventService.this.iCanCar_button == 12) {
                                                                if (!EventService.this.isAuxModeTxz() && Math.abs(System.currentTimeMillis() - EventService.this.exitAuxTime) >= 3000) {
                                                                    if (EventService.this.cameraUtilXYQ == null || !EventService.this.show360Dialog) {
                                                                        int unused31 = EventService.this.g_byKeyVal = 85;
                                                                    } else {
                                                                        EventService.this.cameraUtilXYQ.exit360();
                                                                    }
                                                                } else {
                                                                    return;
                                                                }
                                                            } else if (EventService.this.iCanCar_button == 13) {
                                                                int unused32 = EventService.this.g_byKeyVal = 20;
                                                            } else if (EventService.this.iCanCar_button == 14) {
                                                                Log.i(EventService.TAG, "onCmdKSW0x00_0xA1_0x17Event: topPackageName = " + EventUtils.getTopPackageName(EventService.this.getApplicationContext()));
                                                                if (EventService.this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_MAP_KEY_FUNCTION_INDEX, 0) != 1) {
                                                                    int unused33 = EventService.this.g_byKeyVal = 55;
                                                                }
                                                            } else if (EventService.this.iCanCar_button != 15) {
                                                                if (EventService.this.iCanCar_button == 16) {
                                                                    Log.i(EventService.TAG, "onCmdKSW0x00_0xA1_0x17Event: modeswitch");
                                                                    if (!EventUtils.XYQ_MODE_PACKAGE_NAME.equals(EventUtils.getTopPackageNameUnfiltered(EventService.this))) {
                                                                        if (EventService.this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_MODE_KEY_FUNCTION_INDEX, 0) == 0) {
                                                                            int unused34 = EventService.this.g_byKeyVal = 16;
                                                                        }
                                                                    } else {
                                                                        return;
                                                                    }
                                                                } else if (EventService.this.iCanCar_button == 17 || EventService.this.iCanCar_button == 30) {
                                                                    int recordInteger = EventService.this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_PHONE_KEY_FUNCTION_INDEX, 0);
                                                                    Log.d(EventService.TAG, "m_iBTStatus = " + EventService.this.m_iBTStatus);
                                                                    if (recordInteger == 1) {
                                                                        if (EventService.this.mConnectState > 0) {
                                                                            if (EventService.this.mTelephoneState > 0) {
                                                                                EventService.this.sendLetterKeyCode(CarletterInterface.KEYCODE_TEL_TOGGLE_ACCEPT_REJECT);
                                                                            } else if ((EventService.this.mConnectMode != 3 && EventService.this.mConnectMode != 4) || EventService.this.m_iBTStatus <= 3) {
                                                                                EventUtils.startLetter(EventService.this);
                                                                            } else if (EventService.this.m_iBTStatus == 5) {
                                                                                int unused35 = EventService.this.g_byKeyVal = 23;
                                                                            } else if (EventService.this.m_iBTStatus == 4 || EventService.this.m_iBTStatus == 6) {
                                                                                int unused36 = EventService.this.g_byKeyVal = 22;
                                                                            }
                                                                        } else if (!EventService.this.bZlinkCarplayConnected || EventService.this.mZlinLinkMode == 3 || EventService.this.mZlinLinkMode == 4) {
                                                                            if (EventService.this.m_iBTStatus == 5) {
                                                                                int unused37 = EventService.this.g_byKeyVal = 23;
                                                                            } else if (EventService.this.m_iBTStatus == 4 || EventService.this.m_iBTStatus == 6) {
                                                                                int unused38 = EventService.this.g_byKeyVal = 22;
                                                                            } else {
                                                                                String topPackageName5 = EventUtils.getTopPackageName(EventService.this);
                                                                                String topActivityName = EventUtils.getTopActivityName(EventService.this);
                                                                                if (!EventUtils.BT_MODE_PACKAGE_NAME.equals(topPackageName5) || !EventUtils.BT_MODE_CLASS_NAME.equals(topActivityName)) {
                                                                                    EventService.this.postRunModeActivity(EventUtils.eSrcMode.SRC_BT.getIntValue());
                                                                                } else {
                                                                                    int unused39 = EventService.this.g_byKeyVal = 23;
                                                                                }
                                                                            }
                                                                        } else if (EventService.this.mZlinLinkMode == 1 || EventService.this.mZlinLinkMode == 5) {
                                                                            if (EventService.this.m_iBTStatus == 5) {
                                                                                Intent intent11 = new Intent(EventUtils.ZLINK_MODE_PACKAGE_NAME);
                                                                                intent11.putExtra("command", "REQ_SPEC_FUNC_CMD");
                                                                                intent11.putExtra("specFuncCode", 5);
                                                                                EventService.this.sendBroadcast(intent11);
                                                                            } else if (EventService.this.m_iBTStatus == 4 || EventService.this.m_iBTStatus == 6) {
                                                                                Intent intent12 = new Intent(EventUtils.ZLINK_MODE_PACKAGE_NAME);
                                                                                intent12.putExtra("command", "REQ_SPEC_FUNC_CMD");
                                                                                intent12.putExtra("specFuncCode", 6);
                                                                                EventService.this.sendBroadcast(intent12);
                                                                            }
                                                                        } else if (!EventService.this.bZlinkCarplayPhoneOn) {
                                                                            EventUtils.startZlink(EventService.this);
                                                                        } else if (EventService.this.bZlinkCarplayMic) {
                                                                            Intent intent13 = new Intent(EventUtils.ZLINK_MODE_PACKAGE_NAME);
                                                                            intent13.putExtra("command", "REQ_SPEC_FUNC_CMD");
                                                                            intent13.putExtra("specFuncCode", 6);
                                                                            EventService.this.sendBroadcast(intent13);
                                                                        } else {
                                                                            Intent intent14 = new Intent(EventUtils.ZLINK_MODE_PACKAGE_NAME);
                                                                            intent14.putExtra("command", "REQ_SPEC_FUNC_CMD");
                                                                            intent14.putExtra("specFuncCode", 5);
                                                                            EventService.this.sendBroadcast(intent14);
                                                                        }
                                                                    } else if (recordInteger == 0) {
                                                                        EventService.this.sendSwitchOriginaCar();
                                                                    }
                                                                } else if (EventService.this.iCanCar_button == 18) {
                                                                    int unused40 = EventService.this.g_byKeyVal = 15;
                                                                } else if (EventService.this.iCanCar_button != 19) {
                                                                    if (EventService.this.iCanCar_button == 20) {
                                                                        Log.d(EventService.TAG, "TXZ_TRIGGERRECORD_BUTTON_KEYWORDS");
                                                                        if (EventService.this.bZlinkCarplayConnected) {
                                                                            Intent intent15 = new Intent();
                                                                            intent15.setAction(EventUtils.ZLINK_MODE_PACKAGE_NAME);
                                                                            intent15.setPackage(EventUtils.ZLINK_MODE_PACKAGE_NAME);
                                                                            intent15.putExtra("command", "REQ_SPEC_FUNC_CMD");
                                                                            intent15.putExtra("specFuncCode", 1500);
                                                                            EventService.this.sendBroadcast(intent15);
                                                                        } else {
                                                                            EventService.this.sendBroadcastAsUser(new Intent(EventUtils.TXZ_TRIGGERRECORD_BUTTON_KEYWORDS), UserHandle.ALL);
                                                                            EventService.this.sendBroadcastAsUser(new Intent(EventUtils.TXZ_TRIGGERRECORD_BUTTON_KEYWORDS2), UserHandle.ALL);
                                                                        }
                                                                    } else if (EventService.this.iCanCar_button == 21) {
                                                                        if (EventService.this.m_iModeSet != 14 || !"high-grade".equalsIgnoreCase(EventService.this.xml_client)) {
                                                                            if (EventService.this.bBtSpeak_Keydisable_KSW) {
                                                                                int settingInt = EventService.this.getSettingInt(EventUtils.KEY_KSW_VOL_VAL_01, 30) + 1;
                                                                                if (settingInt > 40) {
                                                                                    settingInt = 40;
                                                                                }
                                                                                EventService.this.putSettingInt(EventUtils.KEY_KSW_VOL_VAL_01, settingInt);
                                                                                EventService.this.appySetting();
                                                                                EventService.this.commitSetting();
                                                                                EventService.this.SendVol_KSW(false, 1, 2, settingInt);
                                                                            } else {
                                                                                int settingInt2 = EventService.this.getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, 26) + 1;
                                                                                if (settingInt2 > 40) {
                                                                                    settingInt2 = 40;
                                                                                }
                                                                                EventService.this.putSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, settingInt2);
                                                                                EventService.this.appySetting();
                                                                                EventService.this.commitSetting();
                                                                                EventService.this.SendVol_KSW(false, 1, 1, settingInt2);
                                                                            }
                                                                            EventService.this.sendBroadcast(new Intent(EventUtils.KSW_UPDATE_VOL_SET_VIEW));
                                                                        } else {
                                                                            if (EventService.this.mAudioMgr == null) {
                                                                                EventService.this.mAudioMgr = (AudioManager) EventService.this.getSystemService("audio");
                                                                            }
                                                                            EventService.this.mAudioMgr.adjustStreamVolume(3, 1, 1);
                                                                        }
                                                                    } else if (EventService.this.iCanCar_button == 22) {
                                                                        if (EventService.this.m_iModeSet != 14 || !"high-grade".equalsIgnoreCase(EventService.this.xml_client)) {
                                                                            if (EventService.this.bBtSpeak_Keydisable_KSW) {
                                                                                int settingInt3 = EventService.this.getSettingInt(EventUtils.KEY_KSW_VOL_VAL_01, 30) - 1;
                                                                                if (settingInt3 < 0) {
                                                                                    settingInt3 = 0;
                                                                                }
                                                                                EventService.this.putSettingInt(EventUtils.KEY_KSW_VOL_VAL_01, settingInt3);
                                                                                EventService.this.appySetting();
                                                                                EventService.this.commitSetting();
                                                                                EventService.this.SendVol_KSW(false, 1, 2, settingInt3);
                                                                            } else {
                                                                                int settingInt4 = EventService.this.getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, 30) - 1;
                                                                                if (settingInt4 < 0) {
                                                                                    settingInt4 = 0;
                                                                                }
                                                                                EventService.this.putSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, settingInt4);
                                                                                EventService.this.appySetting();
                                                                                EventService.this.commitSetting();
                                                                                EventService.this.SendVol_KSW(false, 1, 1, settingInt4);
                                                                            }
                                                                            EventService.this.sendBroadcast(new Intent(EventUtils.KSW_UPDATE_VOL_SET_VIEW));
                                                                        } else {
                                                                            if (EventService.this.mAudioMgr == null) {
                                                                                EventService.this.mAudioMgr = (AudioManager) EventService.this.getSystemService("audio");
                                                                            }
                                                                            EventService.this.mAudioMgr.adjustStreamVolume(3, -1, 1);
                                                                        }
                                                                    } else if (EventService.this.iCanCar_button == 25) {
                                                                        int unused41 = EventService.this.g_byKeyVal = 6;
                                                                        EventService.this.sendBroadcast(new Intent(EventUtils.DDBOX_KEY_PLAY_PAUSE));
                                                                    } else if (EventService.this.iCanCar_button == 26) {
                                                                        if (EventService.this.m_iModeSet == 14 && "high-grade".equalsIgnoreCase(EventService.this.xml_client)) {
                                                                            if (EventService.this.mAudioMgr == null) {
                                                                                EventService.this.mAudioMgr = (AudioManager) EventService.this.getSystemService("audio");
                                                                            }
                                                                            int streamVolume = EventService.this.mAudioMgr.getStreamVolume(3);
                                                                            Log.i(EventService.TAG, "onReceive: streamVolume = " + streamVolume);
                                                                            if (streamVolume == 0) {
                                                                                EventService.this.mAudioMgr.adjustStreamVolume(3, 100, 1);
                                                                            } else {
                                                                                EventService.this.mAudioMgr.adjustStreamVolume(3, -100, 1);
                                                                            }
                                                                            int streamVolume2 = EventService.this.mAudioMgr.getStreamVolume(3);
                                                                            if (streamVolume2 == 0) {
                                                                                EventService.this.SendVol_KSW(true, 1, 1, 0);
                                                                                EventService.this.sendMuteState(true);
                                                                            } else {
                                                                                EventService.this.SendVol_KSW(false, 1, 1, streamVolume2);
                                                                                EventService.this.sendMuteState(false);
                                                                            }
                                                                        }
                                                                    } else if (EventService.this.iCanCar_button == 27) {
                                                                        if ("XinCheng".equalsIgnoreCase(EventService.this.xml_client)) {
                                                                            EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventUtils.DASHBOARD_MODE_PACKAGE_NAME, EventUtils.DASHBOARD_MODE_CLASS_NAME);
                                                                        }
                                                                    } else if (EventService.this.iCanCar_button == 28) {
                                                                        boolean unused42 = EventService.this.bGestureIsAdd = true;
                                                                        if (EventService.this.mEventHandler != null) {
                                                                            EventService.this.mEventHandler.sendEmptyMessageDelayed(EventService.WHAT_SHOW_GESTURE_EVT, 200);
                                                                        }
                                                                    } else if (EventService.this.iCanCar_button == 29) {
                                                                        boolean unused43 = EventService.this.bGestureIsAdd = false;
                                                                        if (EventService.this.mEventHandler != null) {
                                                                            EventService.this.mEventHandler.sendEmptyMessageDelayed(EventService.WHAT_SHOW_GESTURE_EVT, 200);
                                                                        }
                                                                    } else if (EventService.this.iCanCar_button != 30) {
                                                                        if (EventService.this.iCanCar_button == 31) {
                                                                            if (EventService.this.isLetterConnect) {
                                                                                EventService.this.sendLetterKeyCode(513);
                                                                            } else {
                                                                                int unused44 = EventService.this.g_byKeyVal = 22;
                                                                            }
                                                                        } else if (EventService.this.iCanCar_button == 48) {
                                                                            if (EventService.this.ksw_m_b_amap_auto_front && EventService.this.m_iBTStatus <= 3 && ((topPackageName2 = EventUtils.getTopPackageName(EventService.this)) == null || !topPackageName2.equals("com.autonavi.amapauto"))) {
                                                                                boolean unused45 = EventService.this.ksw_m_b_amap_auto_front = false;
                                                                            }
                                                                            if (EventService.this.ksw_m_b_amap_auto_front && EventService.this.m_iBTStatus <= 3) {
                                                                                EventService.this.ksw_send_amap_auto(true);
                                                                            }
                                                                        } else if (EventService.this.iCanCar_button == 49) {
                                                                            if (EventService.this.ksw_m_b_amap_auto_front && EventService.this.m_iBTStatus <= 3 && ((topPackageName = EventUtils.getTopPackageName(EventService.this)) == null || !topPackageName.equals("com.autonavi.amapauto"))) {
                                                                                boolean unused46 = EventService.this.ksw_m_b_amap_auto_front = false;
                                                                            }
                                                                            if (EventService.this.ksw_m_b_amap_auto_front && EventService.this.m_iBTStatus <= 3) {
                                                                                EventService.this.ksw_send_amap_auto(false);
                                                                            }
                                                                        } else if (EventService.this.iCanCar_button == 50) {
                                                                            EventService.this.m_iCurrDim = EventService.this.GetCurrDim();
                                                                            EventService.this.m_iCurrDim++;
                                                                            if (EventService.this.m_iCurrDim > 3) {
                                                                                EventService.this.m_iCurrDim = 0;
                                                                            }
                                                                            if (EventService.this.m_iCurrDim == 0) {
                                                                                EventService.this.SendBLVal((byte) 0, (byte) 0);
                                                                                EventService.this.putSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, 0);
                                                                            } else if (EventService.this.m_iCurrDim == 1) {
                                                                                EventService.this.SendBLVal((byte) 33, (byte) 0);
                                                                                EventService.this.putSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, 33);
                                                                            } else if (EventService.this.m_iCurrDim == 2) {
                                                                                EventService.this.SendBLVal((byte) 66, (byte) 0);
                                                                                EventService.this.putSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, 66);
                                                                            } else if (EventService.this.m_iCurrDim == 3) {
                                                                                EventService.this.SendBLVal(EventUtils.MCU_KEY_LEFT_TEMP_ADD, (byte) 0);
                                                                                EventService.this.putSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, 100);
                                                                            }
                                                                            EventService.this.appySetting();
                                                                            EventService.this.commitSetting();
                                                                            EventService.this.SetCurrDim(EventService.this.m_iCurrDim);
                                                                            EventService.this.sendToOSData();
                                                                            Intent intent16 = new Intent();
                                                                            intent16.setAction("com.szchoiceway.settings.bl");
                                                                            EventService.this.sendBroadcast(intent16);
                                                                        } else if (EventService.this.iCanCar_button == 51) {
                                                                            int settingInt5 = EventService.this.getSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, 50) + 1;
                                                                            if (settingInt5 > 100) {
                                                                                settingInt5 = 100;
                                                                            }
                                                                            EventService.this.SendBLVal((byte) settingInt5, (byte) 0);
                                                                            EventService.this.putSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, settingInt5);
                                                                            Intent intent17 = new Intent();
                                                                            intent17.setAction("com.szchoiceway.settings.bl");
                                                                            EventService.this.sendBroadcast(intent17);
                                                                            if (settingInt5 < 33) {
                                                                                EventService.this.m_iCurrDim = 0;
                                                                            } else if (settingInt5 < 66) {
                                                                                EventService.this.m_iCurrDim = 1;
                                                                            } else if (settingInt5 < 100) {
                                                                                EventService.this.m_iCurrDim = 2;
                                                                            } else {
                                                                                EventService.this.m_iCurrDim = 3;
                                                                            }
                                                                            EventService.this.SetCurrDim(EventService.this.m_iCurrDim);
                                                                            EventService.this.sendToOSData();
                                                                        } else if (EventService.this.iCanCar_button == 52) {
                                                                            int settingInt6 = EventService.this.getSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, 50) - 1;
                                                                            if (settingInt6 < 0) {
                                                                                settingInt6 = 0;
                                                                            }
                                                                            EventService.this.SendBLVal((byte) settingInt6, (byte) 0);
                                                                            EventService.this.putSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, settingInt6);
                                                                            Intent intent18 = new Intent();
                                                                            intent18.setAction("com.szchoiceway.settings.bl");
                                                                            EventService.this.sendBroadcast(intent18);
                                                                            if (settingInt6 < 33) {
                                                                                EventService.this.m_iCurrDim = 0;
                                                                            } else if (settingInt6 < 66) {
                                                                                EventService.this.m_iCurrDim = 1;
                                                                            } else if (settingInt6 < 100) {
                                                                                EventService.this.m_iCurrDim = 2;
                                                                            } else {
                                                                                EventService.this.m_iCurrDim = 3;
                                                                            }
                                                                            EventService.this.SetCurrDim(EventService.this.m_iCurrDim);
                                                                            EventService.this.sendToOSData();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    int unused47 = EventService.this.iCanCar_button = 0;
                                                }
                                            }
                                        } else if (bArr2[6] == 2) {
                                            EventService.access$3108(EventService.this);
                                            if (EventService.this.iCanCar_button == 13) {
                                                int unused48 = EventService.this.iCAN_RECE_BUTTON_FLAG = 0;
                                                String topPackageName6 = EventUtils.getTopPackageName(EventService.this.getApplicationContext());
                                                if ("cld.navi.c3588.mainframe".equals(topPackageName6) || "com.autonavi.amapauto".equals(topPackageName6) || topPackageName6.startsWith("cld.navi")) {
                                                    int unused49 = EventService.this.g_byKeyVal = 0;
                                                } else {
                                                    int unused50 = EventService.this.g_byKeyVal = 55;
                                                }
                                            } else if (EventService.this.iCanCar_button == 20) {
                                                int unused51 = EventService.this.iCAN_RECE_BUTTON_FLAG = 0;
                                                String topPackageName7 = EventUtils.getTopPackageName(EventService.this.getApplicationContext());
                                                if ("cld.navi.c3588.mainframe".equals(topPackageName7) || "com.autonavi.amapauto".equals(topPackageName7) || topPackageName7.startsWith("cld.navi")) {
                                                    int unused52 = EventService.this.g_byKeyVal = 0;
                                                } else {
                                                    int unused53 = EventService.this.g_byKeyVal = 55;
                                                }
                                            } else {
                                                int unused54 = EventService.this.g_byKeyVal = 0;
                                            }
                                        }
                                        if (EventService.this.iCAN_RECE_BUTTON_FLAG == 0 && EventService.this.g_byKeyVal != 0) {
                                            Log.i(EventService.TAG, "Can key Num == " + EventService.this.g_byKeyVal);
                                            EventService.this.sendBroadcastCanKeyExtra(EventUtils.ZXW_CAN_KEY_EVT, EventService.this.g_byKeyVal);
                                            int unused55 = EventService.this.g_byKeyVal = 0;
                                        }
                                    }
                                }

                                private void onCmdKSW0x00_0xA1_0x1BEvent(byte[] bArr) {
                                    if (bArr.length >= 6 && bArr[5] != 0) {
                                        byte b = bArr[5];
                                    }
                                }

                                private void onCmdKSW0x00_0xA1_0x1CEvent(byte[] bArr) {
                                    boolean unused = EventService.this.airWindChange = false;
                                    boolean unused2 = EventService.this.airTempChange = false;
                                    if ((bArr[5] & EventUtils.CMD_FREQ_SEL) > 0) {
                                        EventService.this.mCarAirStruct.bAirOn = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirOn = false;
                                    }
                                    if ((bArr[5] & 64) > 0) {
                                        EventService.this.mCarAirStruct.bAirAcOn = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirAcOn = false;
                                    }
                                    if ((bArr[5] & 32) > 0) {
                                        EventService.this.mCarAirStruct.bAirCulatOn = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirCulatOn = false;
                                    }
                                    byte b = bArr[5];
                                    if ((bArr[5] & 8) > 0) {
                                        EventService.this.mCarAirStruct.bAirFrontWin = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirFrontWin = false;
                                    }
                                    byte b2 = bArr[5];
                                    if ((bArr[5] & 2) > 0) {
                                        EventService.this.mCarAirStruct.bAirRearWin = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirRearWin = false;
                                    }
                                    if ((bArr[5] & 1) > 0) {
                                        EventService.this.mCarAirStruct.bAirSync = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirSync = false;
                                    }
                                    if ((bArr[6] & EventUtils.CMD_FREQ_SEL) > 0) {
                                        EventService.this.mCarAirStruct.bAirLeftFunUp = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirLeftFunUp = false;
                                    }
                                    if ((bArr[6] & 64) > 0) {
                                        EventService.this.mCarAirStruct.bAirLeftFunParalle = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirLeftFunParalle = false;
                                    }
                                    if ((bArr[6] & 32) > 0) {
                                        EventService.this.mCarAirStruct.bAirLeftFunDown = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirLeftFunDown = false;
                                    }
                                    if ((bArr[6] & 16) > 0) {
                                        EventService.this.mCarAirStruct.bAirLeftFunAtuo = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirLeftFunAtuo = false;
                                    }
                                    if ((bArr[6] & 8) > 0) {
                                        EventService.this.mCarAirStruct.bAirRightFunUp = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirRightFunUp = false;
                                    }
                                    if ((bArr[6] & 4) > 0) {
                                        EventService.this.mCarAirStruct.bAirRightFunParalle = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirRightFunParalle = false;
                                    }
                                    if ((bArr[6] & 2) > 0) {
                                        EventService.this.mCarAirStruct.bAirRightFunDown = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirRightFunDown = false;
                                    }
                                    if ((bArr[6] & 1) > 0) {
                                        EventService.this.mCarAirStruct.bAirRightFunAtuo = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirRightFunAtuo = false;
                                    }
                                    if (!(EventService.this.mCarAirStruct.iAirLeftTemp == (bArr[7] & 255) && EventService.this.mCarAirStruct.iAirRightTemp == (bArr[8] & 255))) {
                                        boolean unused3 = EventService.this.airTempChange = true;
                                    }
                                    EventService.this.mCarAirStruct.iAirLeftTemp = bArr[7] & 255;
                                    EventService.this.mCarAirStruct.iAirRightTemp = bArr[8] & 255;
                                    if ((bArr[9] & 64) > 0) {
                                        EventService.this.mCarAirStruct.bAirFunSpeedHalf = false;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirFunSpeedHalf = true;
                                    }
                                    if ((bArr[9] & 32) > 0) {
                                        EventService.this.mCarAirStruct.bAirEco = true;
                                    } else {
                                        EventService.this.mCarAirStruct.bAirEco = false;
                                    }
                                    if ((bArr[9] & 16) > 0) {
                                        if (!EventService.this.mCarAirStruct.bAirFunSpeedAuto && !EventService.this.airWindChange) {
                                            boolean unused4 = EventService.this.airWindChange = true;
                                        }
                                        EventService.this.mCarAirStruct.bAirFunSpeedAuto = true;
                                    } else {
                                        if (EventService.this.mCarAirStruct.bAirFunSpeedAuto && !EventService.this.airWindChange) {
                                            boolean unused5 = EventService.this.airWindChange = true;
                                        }
                                        EventService.this.mCarAirStruct.bAirFunSpeedAuto = false;
                                    }
                                    if (EventService.this.mCarAirStruct.iAirFunSpeed != (bArr[9] & 15) && !EventService.this.airWindChange) {
                                        boolean unused6 = EventService.this.airWindChange = true;
                                    }
                                    EventService.this.mCarAirStruct.iAirFunSpeed = bArr[9] & 15;
                                    System.arraycopy(bArr, 0, EventService.this.mCarAirStruct.mAirDataOld, 0, 10);
                                    if (!Arrays.equals(EventService.this.mCarAirStruct.mAirData, EventService.this.mCarAirStruct.mAirDataOld)) {
                                        System.arraycopy(EventService.this.mCarAirStruct.mAirDataOld, 0, EventService.this.mCarAirStruct.mAirData, 0, 10);
                                        if (Customer.getUIIndex(EventService.this) != 4 || EventService.this.m_iModeSet == 29) {
                                            EventService.this.mEventHandler.removeMessages(EventService.WHAT_CAN_AIR_EVT);
                                            EventService.this.mEventHandler.sendEmptyMessage(EventService.WHAT_CAN_AIR_EVT);
                                        } else if (EventService.this.mCarAirStruct.bAirOn) {
                                            EventService.this.mEventHandler.removeMessages(EventService.WHAT_CAN_AIR_EVT);
                                            EventService.this.mEventHandler.sendEmptyMessage(EventService.WHAT_CAN_AIR_EVT);
                                        } else {
                                            EventService.this.mEventHandler.removeMessages(EventService.WHAT_HIDE_AIR_WND);
                                            EventService.this.mEventHandler.sendEmptyMessage(EventService.WHAT_HIDE_AIR_WND);
                                        }
                                    }
                                }

                                private void onCmdKSW0x00_0xA1_0x1DEvent(byte[] bArr) {
                                    byte[] bArr2;
                                    String str;
                                    EventService.this.mEventHandler.removeMessages(EventUtils.EVENT_CAN_GATHER_END);
                                    EventService.this.mEventHandler.sendEmptyMessageDelayed(EventUtils.EVENT_CAN_GATHER_END, 2000);
                                    StringBuilder sb = new StringBuilder(BuildConfig.FLAVOR);
                                    byte[] bArr3 = new byte[1];
                                    byte b = bArr[9] & 15;
                                    String str2 = b == 0 ? "数据帧" : b == 2 ? "远程帧" : BuildConfig.FLAVOR;
                                    byte b2 = bArr[10] & 15;
                                    if (b2 == 0) {
                                        bArr2 = new byte[2];
                                        System.arraycopy(bArr, 7, bArr2, 0, 2);
                                        str = "标准帧";
                                    } else if (b2 == 4) {
                                        bArr2 = new byte[4];
                                        System.arraycopy(bArr, 7, bArr2, 0, 4);
                                        str = "扩展帧";
                                    } else {
                                        bArr2 = null;
                                        str = BuildConfig.FLAVOR;
                                    }
                                    int i = bArr[11] & 15;
                                    System.arraycopy(bArr, 11, bArr3, 0, 1);
                                    byte[] bArr4 = new byte[i];
                                    System.arraycopy(bArr, 12, bArr4, 0, i);
                                    sb.append(EventUtils.bytesToHexString2(bArr2) + " ");
                                    sb.append(str2 + " ");
                                    sb.append(str + " ");
                                    sb.append(EventUtils.bytesToHexString2(bArr3) + " ");
                                    sb.append(EventUtils.bytesToHexString(bArr4));
                                    Log.i(EventService.TAG, "onCmdKSW0x00_0xA1_0x1DEvent: stringBuilder.toString() = " + sb.toString());
                                    if (!BuildConfig.FLAVOR.equals(EventService.this.canGatherPath)) {
                                        EventUtils.saveCanDataToExternal(sb.toString().getBytes(), EventService.this.canGatherPath);
                                    }
                                }

                                private void onCmdKSW0x00_0xA1_0x19Event(byte[] bArr) {
                                    if (bArr.length >= 20) {
                                        EventService.this.notifyDashBoardCallbackEvt(90, 0, 0, bArr, (String) null);
                                        byte[] bArr2 = (!EventService.this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_SHOW_AIR, false) || EventService.this.mCarAirStruct == null) ? new byte[]{0, 0} : new byte[]{(byte) EventService.this.mCarAirStruct.iAirLeftTemp, (byte) EventService.this.mCarAirStruct.iAirRightTemp};
                                        Log.d(EventService.TAG, "KESAIWEI_1280X480_AIR_TEMP tempData = " + EventUtils.bytesToHexString(bArr2));
                                        EventService.this.notifyDashBoardCallbackEvt(95, 0, 0, bArr2, (String) null);
                                        byte[] bArr3 = new byte[10];
                                        bArr3[0] = (byte) EventService.this.gearType;
                                        bArr3[1] = EventService.this.bILLSignal;
                                        bArr3[2] = EventService.this.leftLight;
                                        bArr3[3] = EventService.this.rightLight;
                                        for (int i = 0; i < 6; i++) {
                                            if (EventService.this.mAxisAttitudeData == null || EventService.this.mAxisAttitudeData.length != 6) {
                                                bArr3[i + 4] = 0;
                                            } else {
                                                bArr3[i + 4] = EventService.this.mAxisAttitudeData[i];
                                            }
                                        }
                                        Log.d(EventService.TAG, "KESAIWEI_1280X480_0XA1_0X10_DATA basicData = " + EventUtils.bytesToHexString(bArr3));
                                        EventService.this.notifyDashBoardCallbackEvt(96, 0, 0, bArr3, (String) null);
                                        EventService.this.ksw_0x00_0xA1_0x19_refreshData(bArr);
                                    }
                                }

                                private void onCmdKSW0x00_0xA1_0x12Event(byte[] bArr) {
                                    if (bArr.length >= 6) {
                                        EventService.this.ksw_0x00_0xA1_0x12_refreshData(bArr);
                                        EventService.this.notifyDashBoardCallbackEvt(93, 0, 0, bArr, (String) null);
                                        boolean z = true;
                                        boolean unused = EventService.this.doorRightBack = (bArr[5] & EventUtils.CMD_FREQ_SEL) > 0;
                                        boolean unused2 = EventService.this.doorLeftBack = (bArr[5] & 64) > 0;
                                        boolean unused3 = EventService.this.doorRightFront = (bArr[5] & 32) > 0;
                                        boolean unused4 = EventService.this.doorLeftFront = (bArr[5] & 16) > 0;
                                        boolean unused5 = EventService.this.doorFront = (bArr[5] & 8) > 0;
                                        EventService eventService = EventService.this;
                                        if ((bArr[5] & 4) <= 0) {
                                            z = false;
                                        }
                                        boolean unused6 = eventService.doorBack = z;
                                        EventService.this.sendDoorMessageToLD();
                                        EventService.this.sendDoorMessageToXYQ();
                                    }
                                }

                                private void onCmdKSW0x00_0xA1_0x13Event(byte[] bArr) {
                                    boolean unused = EventService.this.angleRight = (bArr[5] & EventUtils.CMD_FREQ_SEL) > 0;
                                    int unused2 = EventService.this.angle = ((bArr[5] & EventUtils.CMD_UPGRADE_ACK) * 256) + (bArr[6] & 255);
                                    if (EventService.this.angle > 540) {
                                        int unused3 = EventService.this.angle = 540;
                                    }
                                    Log.d(EventService.TAG, "onCmdKSW0x00_0xA1_0x13Event angle = " + EventService.this.angle + ", angleRight = " + EventService.this.angleRight);
                                    EventService.this.sendWheelMessageToLD();
                                    EventService.this.sendWheelMessageToXYQ();
                                }

                                private void onCmdKSW0x00_0xA1_0x14Event(byte[] bArr) {
                                    int unused = EventService.this.radarFrontLeft = bArr[5] & 255;
                                    int unused2 = EventService.this.radarFrontLeftMiddle = bArr[6] & 255;
                                    int unused3 = EventService.this.radarFrontRightMiddle = bArr[7] & 255;
                                    int unused4 = EventService.this.radarFrontRight = bArr[8] & 255;
                                    EventService.this.sendRadarMessageToLD();
                                    EventService.this.sendRadarMessageToXYQ();
                                    if (EventService.this.mBackcarEvtHw != null) {
                                        EventService.this.mBackcarEvtHw.setFrontRadarData(new int[]{EventService.this.radarFrontLeft, EventService.this.radarFrontLeftMiddle, EventService.this.radarFrontRightMiddle, EventService.this.radarFrontRight});
                                    }
                                }

                                private void onCmdKSW0x00_0xA1_0x15Event(byte[] bArr) {
                                    int unused = EventService.this.radarBackLeft = bArr[5] & 255;
                                    int unused2 = EventService.this.radarBackLeftMiddle = bArr[6] & 255;
                                    int unused3 = EventService.this.radarBackRightMiddle = bArr[7] & 255;
                                    int unused4 = EventService.this.radarBackRight = bArr[8] & 255;
                                    EventService.this.sendRadarMessageToLD();
                                    EventService.this.sendRadarMessageToXYQ();
                                    if (EventService.this.mBackcarEvtHw != null) {
                                        EventService.this.mBackcarEvtHw.setRearRadarData(new int[]{EventService.this.radarBackLeft, EventService.this.radarBackLeftMiddle, EventService.this.radarBackRightMiddle, EventService.this.radarBackRight});
                                    }
                                }

                                private void onCmdKSW0x00_0xA1_0x10Event(byte[] bArr) {
                                    if (bArr.length >= 8) {
                                        boolean z = false;
                                        if ((bArr[5] & 1) > 0) {
                                            if (!EventService.this.bILLSignal && !CarletterInterface.getInstance().isNightMode(EventService.this)) {
                                                CarletterInterface.getInstance().sendNightMode(EventService.this, 1);
                                            }
                                            boolean unused = EventService.this.bILLSignal = true;
                                        } else {
                                            if (EventService.this.bILLSignal && CarletterInterface.getInstance().isNightMode(EventService.this)) {
                                                CarletterInterface.getInstance().sendNightMode(EventService.this, 0);
                                            }
                                            boolean unused2 = EventService.this.bILLSignal = false;
                                        }
                                        if (EventService.this.mBackcarEvtHw != null) {
                                            EventService.this.mBackcarEvtHw.setLightData(EventService.this.bILLSignal);
                                        }
                                        if ((bArr[5] & 8) > 0) {
                                            if (!EventService.this.b_kesaiwei_bPark) {
                                                boolean unused3 = EventService.this.b_kesaiwei_bPark = true;
                                                EventService.this.sendBroadcastPark_KSW();
                                            }
                                        } else if (EventService.this.b_kesaiwei_bPark) {
                                            boolean unused4 = EventService.this.b_kesaiwei_bPark = false;
                                            EventService.this.sendBroadcastPark_KSW();
                                        }
                                        EventService.this.b_kesaiwei_bPKey = (bArr[5] & 4) > 0;
                                        if (EventService.this.m_iUiIndex == 5) {
                                            EventService.this.refreshLRBottomViewPChk(EventService.this.b_kesaiwei_bPKey);
                                        }
                                        EventService.this.b_kesaiwei_bAutoPark = (bArr[5] & 2) > 0;
                                        boolean z2 = (bArr[6] & 1) > 0;
                                        int unused5 = EventService.this.gearType = (bArr[6] >> 1) & 3;
                                        Log.d(EventService.TAG, "onCmdKSW0x00_0xA1_0x10Event 000 gearType = " + EventService.this.gearType + ", hasEnterBackcar = " + EventService.this.hasEnterBackcar);
                                        if (EventService.this.i_kesaiwei_Camera_Selection == 3) {
                                            EventService.this.sendGearMessageToLD();
                                            EventService.this.sendGearMessageToXYQ();
                                            if (EventService.this.gearType == 3) {
                                                Log.i(EventService.TAG, "--->>> KSW BackCar 进入安卓360倒车");
                                                boolean unused6 = EventService.this.hasEnterBackcar = true;
                                            } else if (EventService.this.hasEnterBackcar) {
                                                Log.i(EventService.TAG, "--->>> KSW BackCar 退出安卓360倒车");
                                                boolean unused7 = EventService.this.hasEnterBackcar = false;
                                            }
                                        }
                                        Log.d(EventService.TAG, "onCmdKSW0x00_0xA1_0x10Event 111 hasEnterBackcar = " + EventService.this.hasEnterBackcar);
                                        boolean unused8 = EventService.this.leftLight = (8 & bArr[6]) > 0;
                                        EventService eventService = EventService.this;
                                        if ((bArr[6] & 16) > 0) {
                                            z = true;
                                        }
                                        boolean unused9 = eventService.rightLight = z;
                                        Log.d(EventService.TAG, "左转 = " + EventService.this.leftLight + ", 右转 = " + EventService.this.rightLight);
                                        EventService.this.sendLightMessageToLD();
                                        EventService.this.sendLightMessageToXYQ();
                                        if (EventService.this.mBackcarEvtHw != null) {
                                            EventService.this.mBackcarEvtHw.setLightData(EventService.this.bILLSignal);
                                        }
                                        Log.i(EventService.TAG, "onCmdKSW0x00_0xA1Event: 0x10");
                                        Intent intent = new Intent(EventUtils.ZXW_SENDBROADCAST8902MOD);
                                        intent.putExtra(EventUtils.ZXW_SENDBROADCAST8902MOD_EXTRA, 16);
                                        intent.putExtra(EventUtils.ZXW_SENDBROADCAST8902MOD_shousha, EventService.this.b_kesaiwei_bPark);
                                        intent.putExtra(EventUtils.ZXW_SENDBROADCAST8902MOD_anquandai, z2);
                                        EventService.this.sendBroadcast(intent);
                                        SysProviderOpt sysProviderOpt = EventService.this.mSysProviderOpt;
                                        sysProviderOpt.updateRecord(SysProviderOpt.KESAIWEI_RECORD_PARK, (EventService.this.b_kesaiwei_bPark ? 1 : 0) + BuildConfig.FLAVOR);
                                        SysProviderOpt sysProviderOpt2 = EventService.this.mSysProviderOpt;
                                        sysProviderOpt2.updateRecord(SysProviderOpt.KESAIWEI_RECORD_BELT, (z2 ? 1 : 0) + BuildConfig.FLAVOR);
                                        EventService.this.notifyDashBoardCallbackEvt(91, 0, 0, bArr, (String) null);
                                        if (EventService.this.mBackcarEvtHw != null) {
                                            EventService.this.mBackcarEvtHw.setBeltData(!z2);
                                            EventService.this.mBackcarEvtHw.setHandBrakeData(EventService.this.b_kesaiwei_bPark);
                                        }
                                    }
                                }

                                private void onCmdKSW0x00_0x11_0x01Event(byte[] bArr) {
                                    if (bArr.length >= 6) {
                                        if (bArr[5] == 1) {
                                            Log.i(EventService.TAG, "--->>> KSW BackCar 进入后装倒车");
                                            if (EventService.this.i_kesaiwei_Camera_Selection == 0) {
                                                EventService.this.backcarConnected_KeSaiWei(true);
                                            }
                                            int unused = EventService.this.iBackCarState_KSW = 1;
                                            boolean recordBoolean = EventService.this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_ORIGINAL_CAR_VIDEO_DISPLAY, true);
                                            if (EventService.this.b_Original_View && !recordBoolean && EventService.this.mPowerOffEvt != null) {
                                                EventService.this.mPowerOffEvt.hidePoweroffWnd();
                                            }
                                            if (EventService.this.mMipiScreen && EventService.this.mBackcarEvtHw != null && EventService.this.mBackcarEvtHw.mShowOriginalView) {
                                                EventService.this.mBackcarEvtHw.hideOriginalView();
                                                EventService.this.mBackcarEvtHw.showBgView();
                                            }
                                        } else if (bArr[5] == 0) {
                                            Log.i(EventService.TAG, "--->>> KSW BackCar 退出后装倒车");
                                            boolean recordBoolean2 = EventService.this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_ORIGINAL_CAR_VIDEO_DISPLAY, true);
                                            if (EventService.this.b_Original_View && !recordBoolean2 && EventService.this.mPowerOffEvt != null) {
                                                EventService.this.mPowerOffEvt.showPoweroffWnd();
                                            }
                                            if (EventService.this.i_kesaiwei_Camera_Selection == 0) {
                                                EventService.this.backcarConnected_KeSaiWei(false);
                                                EventService.this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_END_BACKCAR, 3000);
                                            }
                                            int unused2 = EventService.this.iBackCarState_KSW = 0;
                                            if (EventService.this.mMipiScreen && EventService.this.mBackcarEvtHw != null && EventService.this.mBackcarEvtHw.reverseWhenOriginal) {
                                                EventService.this.mBackcarEvtHw.hideReverseView();
                                                EventService.this.mBackcarEvtHw.showBgView();
                                            }
                                        }
                                    }
                                }

                                private void onCmdKSW0x00_0x11_0x02Event(byte[] bArr) {
                                    if (bArr.length >= 6) {
                                        if (bArr[5] == 1) {
                                            Log.i(EventService.TAG, "--->>> KSW BackCar 进入后装360倒车");
                                            if (EventService.this.i_kesaiwei_Camera_Selection == 2) {
                                                EventService.this.backcarConnected_KeSaiWei(true);
                                            }
                                            if (EventService.this.mMipiScreen && EventService.this.mBackcarEvtHw != null && EventService.this.mBackcarEvtHw.mShowOriginalView) {
                                                EventService.this.mBackcarEvtHw.hideOriginalView();
                                                EventService.this.mBackcarEvtHw.showBgView();
                                            }
                                        } else if (bArr[5] == 0) {
                                            Log.i(EventService.TAG, "--->>> KSW BackCar 退出后装360倒车");
                                            if (EventService.this.i_kesaiwei_Camera_Selection == 2) {
                                                EventService.this.backcarConnected_KeSaiWei(false);
                                            }
                                            if (EventService.this.mMipiScreen && EventService.this.mBackcarEvtHw != null && EventService.this.mBackcarEvtHw.reverseWhenOriginal) {
                                                EventService.this.mBackcarEvtHw.hideReverseView();
                                                EventService.this.mBackcarEvtHw.showBgView();
                                            }
                                        }
                                    }
                                }

                                private void onCmdKSW0x00_0x11_0x03Event(byte[] bArr) {
                                    if (bArr.length >= 6) {
                                        if (bArr[5] == 1) {
                                            Log.i(EventService.TAG, "--->>> KSW BackCar 进入前装倒车");
                                            if (EventService.this.i_kesaiwei_Camera_Selection == 1) {
                                                EventService.this.backcarConnected_KeSaiWei(true);
                                            }
                                            if (EventService.this.mMipiScreen && EventService.this.mBackcarEvtHw != null && EventService.this.mBackcarEvtHw.mShowOriginalView) {
                                                EventService.this.mBackcarEvtHw.hideOriginalView();
                                                EventService.this.mBackcarEvtHw.showBgView();
                                            }
                                        } else if (bArr[5] == 0) {
                                            Log.i(EventService.TAG, "--->>> KSW BackCar 退出前装倒车");
                                            if (EventService.this.i_kesaiwei_Camera_Selection == 1) {
                                                EventService.this.backcarConnected_KeSaiWei(false);
                                            }
                                            if (EventService.this.mMipiScreen && EventService.this.mBackcarEvtHw != null && EventService.this.mBackcarEvtHw.reverseWhenOriginal) {
                                                EventService.this.mBackcarEvtHw.hideReverseView();
                                                EventService.this.mBackcarEvtHw.showBgView();
                                            }
                                        }
                                    }
                                }

                                private void onCmdKSW0x00_0x11_0x04Event(byte[] bArr) {
                                    if (bArr.length >= 6) {
                                        if (bArr[5] == 1) {
                                            EventService.this.backLightOn_KSW();
                                        } else if (bArr[5] == 0) {
                                            EventService.this.backLightOff_KSW();
                                        }
                                    }
                                }

                                private void onCMdKSW0x00_0x11_0x05Event(byte[] bArr) {
                                    if (bArr.length >= 6) {
                                        if (bArr[5] == 0) {
                                            try {
                                                Runtime.getRuntime().exec("sync");
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                            EventService.this.ksw_m_b_acc_off = true;
                                            Intent intent = new Intent(EventUtils.KSW_ZXW_ACC_CONTROL_BEFORE);
                                            intent.putExtra(EventUtils.KSW_ZXW_ACC_CONTROL_BEFORE_DATA, true);
                                            EventService.this.sendBroadcast(intent);
                                            Log.i(EventService.TAG, "--->>> ksw_m_b_acc_off true");
                                            EventService.this.setOutput(false);
                                        } else if (bArr[5] == 1) {
                                            EventService.this.ksw_m_b_acc_off = false;
                                            Intent intent2 = new Intent(EventUtils.KSW_ZXW_ACC_CONTROL_BEFORE);
                                            intent2.putExtra(EventUtils.KSW_ZXW_ACC_CONTROL_BEFORE_DATA, false);
                                            EventService.this.sendBroadcast(intent2);
                                            Log.i(EventService.TAG, "--->>> ksw_m_b_acc_off false");
                                            EventService.this.setOutput(true);
                                        }
                                        if (EventService.this.cameraUtil != null) {
                                            EventService.this.cameraUtil.sendPowerMessage(EventService.this.ksw_m_b_acc_off);
                                        }
                                    }
                                }

                                private void onCmdKSW0x00_0x11_0x06Event(byte[] bArr) {
                                    if (bArr.length >= 6) {
                                        boolean z = true;
                                        if (bArr[5] != 1) {
                                            byte b = bArr[5];
                                            z = false;
                                        }
                                        if (EventService.this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_FAST_CHARGE, false) != z) {
                                            EventService.this.mSysProviderOpt.updateRecord(SysProviderOpt.KSW_FAST_CHARGE, z ? "1" : "0");
                                            EventService.this.sendBroadcast(new Intent(EventUtils.ZXW_ACTION_KSW_UPDRADE_FAST_CHARGING_STATUS));
                                        }
                                    }
                                }

                                private void onCmdKSW0x00_0x11_0x07Event(byte[] bArr) {
                                    if (bArr.length >= 6 && bArr[5] != 1) {
                                        byte b = bArr[5];
                                    }
                                }

                                private void onCmdKSW0x00_0x11_0x08Event(byte[] bArr) {
                                    if (bArr.length < 6) {
                                    }
                                }

                                private void onCmdKSW0x00_0x11_0x09Event(byte[] bArr) {
                                    byte b;
                                    if (bArr.length >= 6 && (b = bArr[5] & 255) >= 0 && b <= 100) {
                                        EventService.this.putSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, b);
                                        Intent intent = new Intent();
                                        intent.setAction("com.szchoiceway.settings.bl");
                                        EventService.this.sendBroadcast(intent);
                                        if (b < 33) {
                                            EventService.this.m_iCurrDim = 0;
                                        } else if (b < 66) {
                                            EventService.this.m_iCurrDim = 1;
                                        } else if (b < 100) {
                                            EventService.this.m_iCurrDim = 2;
                                        } else {
                                            EventService.this.m_iCurrDim = 3;
                                        }
                                        EventService.this.SetCurrDim(EventService.this.m_iCurrDim);
                                        EventService.this.sendToOSData();
                                    }
                                }

                                private void onCmdKeyEvent(byte[] bArr) {
                                    if (bArr.length >= 3) {
                                        Log.i(EventService.TAG, "onCmdKeyEvent: MCU_KEY_POWER-bydata[1] = " + bArr[1]);
                                        if (!EventService.this.mBackcarConnected || bArr[1] == 1) {
                                            Log.i(EventService.TAG, "onCmdKeyEvent " + (bArr[1] & 255));
                                            byte b = bArr[1];
                                            if (b != -14) {
                                                if (b != -13) {
                                                    if (b == -10) {
                                                        EventService.this.DIMMode();
                                                    } else if (b == -9) {
                                                        Log.i(EventService.TAG, "m_bPowerOff ******** = " + EventService.this.m_bPowerOff);
                                                        if (!EventService.this.isStandyMode()) {
                                                            EventService.this.setStandyMode(true);
                                                            EventService.this.PowerOff(true);
                                                            EventService.this.sendMode(EventUtils.eSrcMode.SRC_IDLE_MODE);
                                                            return;
                                                        }
                                                        EventService.this.setStandyMode(false);
                                                        EventService.this.PowerOff(false);
                                                        EventService.this.sendMode(EventUtils.eSrcMode.SRC_IDLE_REST);
                                                        return;
                                                    } else if (b == 1) {
                                                        Log.i(EventService.TAG, "onCmdKeyEvent: MCU_KEY_POWER");
                                                        EventService.this.sendBroadcastAsUser(new Intent(EventUtils.MCU_MSG_ACC_DISCONNECTED_EVT), UserHandle.ALL);
                                                        EventService.this.SendConnetCan(false);
                                                        EventService.this.sendSysRTCTimer();
                                                        EventService.this.SaveSystemData();
                                                        EventService.this.sendKeyDownUpSync(4);
                                                        EventService.this.notifyValidModeEvt(EventUtils.EVENT_POWER, 0, 0, (byte[]) null, (String) null);
                                                        try {
                                                            Thread.sleep(8000);
                                                        } catch (InterruptedException unused) {
                                                        }
                                                        EventService.this.sendMode(EventUtils.eSrcMode.SRC_POWEROFF);
                                                        try {
                                                            Thread.sleep(50);
                                                        } catch (InterruptedException unused2) {
                                                        }
                                                        EventService.this.sendMode(EventUtils.eSrcMode.SRC_POWEROFF);
                                                        try {
                                                            Thread.sleep(50);
                                                        } catch (InterruptedException unused3) {
                                                        }
                                                        EventService.this.sendMode(EventUtils.eSrcMode.SRC_POWEROFF);
                                                        try {
                                                            Thread.sleep(50);
                                                        } catch (InterruptedException unused4) {
                                                        }
                                                        EventService.this.sendMode(EventUtils.eSrcMode.SRC_POWEROFF);
                                                    } else if (b == 2) {
                                                        EventService.this.sendBroadcast(new Intent(EventUtils.DDBOX_KEY_NEXT));
                                                        if (EventService.this.bModeNull) {
                                                            EventService.this.sendKeyDownUpSync(87);
                                                        }
                                                    } else if (b == 3) {
                                                        EventService.this.sendBroadcast(new Intent(EventUtils.DDBOX_KEY_PREV));
                                                        if (EventService.this.bModeNull) {
                                                            EventService.this.sendKeyDownUpSync(88);
                                                        }
                                                    } else if (b != 9) {
                                                        if (b != 51) {
                                                            if (b == 82) {
                                                                EventService.this.sendSystemKey(13);
                                                            } else if (b == 85) {
                                                                Log.i(EventService.TAG, "MCU_KEY_RETURN ******");
                                                                EventService.this.sendKeyDownUpSync(4);
                                                                EventService.this.beep();
                                                            } else if (b == 22) {
                                                                if ((EventService.this.m_iCanbustype == 17 || EventService.this.m_iCanbustype == 28) && EventService.this.m_iCarstype_ID == 3) {
                                                                    int i = EventService.this.m_iCarCanbusName_ID;
                                                                }
                                                                if (EventService.this.getBTStatus() <= 5) {
                                                                    EventUtils.sendBTBroadcast(EventService.this.getApplicationContext(), EventUtils.MCU_KEY_INFOR_ACTION, 22);
                                                                }
                                                            } else if (b != 23) {
                                                                if (b != 54) {
                                                                    if (b != 55) {
                                                                        switch (b) {
                                                                            case 14:
                                                                                break;
                                                                            case 15:
                                                                                if (EventService.this.miLastMode != EventUtils.eSrcMode.SRC_DVD.getIntValue()) {
                                                                                    EventService.this.sendSystemKey(15);
                                                                                    break;
                                                                                }
                                                                                break;
                                                                            case 16:
                                                                                EventService.this.switchMode();
                                                                                break;
                                                                            case 17:
                                                                                if (!EventUtils.getInstallStatus(EventService.this.getApplicationContext(), "com.szchoiceway.dsp")) {
                                                                                    EventUtils.sendSysBroadcast(EventService.this.getApplicationContext(), EventUtils.ZXW_SYS_KEY_EVT, 17);
                                                                                    break;
                                                                                } else {
                                                                                    EventUtils.sendBroadcastToDsp(EventService.this.getApplicationContext(), EventUtils.ZXW_ACTION_SYS_DSP_VOL_EVT, EventUtils.ZXW_ACTION_SYS_DSP_VOL_EVT_EXTRA_MUTE);
                                                                                    break;
                                                                                }
                                                                            case 18:
                                                                                if (!EventUtils.getInstallStatus(EventService.this.getApplicationContext(), "com.szchoiceway.dsp")) {
                                                                                    EventUtils.sendSysBroadcast(EventService.this.getApplicationContext(), EventUtils.ZXW_SYS_KEY_EVT, 18);
                                                                                    break;
                                                                                } else {
                                                                                    EventUtils.sendBroadcastToDsp(EventService.this.getApplicationContext(), EventUtils.ZXW_ACTION_SYS_DSP_VOL_EVT, EventUtils.ZXW_ACTION_SYS_DSP_VOL_EVT_EXTRA_ADD);
                                                                                    break;
                                                                                }
                                                                            case 19:
                                                                                if (!EventUtils.getInstallStatus(EventService.this.getApplicationContext(), "com.szchoiceway.dsp")) {
                                                                                    EventUtils.sendSysBroadcast(EventService.this.getApplicationContext(), EventUtils.ZXW_SYS_KEY_EVT, 19);
                                                                                    break;
                                                                                } else {
                                                                                    EventUtils.sendBroadcastToDsp(EventService.this.getApplicationContext(), EventUtils.ZXW_ACTION_SYS_DSP_VOL_EVT, EventUtils.ZXW_ACTION_SYS_DSP_VOL_EVT_EXTRA_SUB);
                                                                                    break;
                                                                                }
                                                                            case 20:
                                                                                EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventUtils.SET_MODE_PACKAGE_NAME, EventUtils.SET_MODE_CLASS_NAME);
                                                                                break;
                                                                            default:
                                                                                switch (b) {
                                                                                    case 57:
                                                                                        EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventUtils.DVD_MODE_PACKAGE_NAME, EventUtils.DVD_MODE_CLASS_NAME);
                                                                                        break;
                                                                                    case 58:
                                                                                        break;
                                                                                    case 59:
                                                                                        EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventUtils.BT_MODE_PACKAGE_NAME, EventUtils.BT_MODE_CLASS_NAME);
                                                                                        EventUtils.sendSysBroadcast(EventService.this.getApplicationContext(), EventUtils.ZXW_SYS_KEY_EVT, 23);
                                                                                        break;
                                                                                    case 60:
                                                                                        break;
                                                                                    default:
                                                                                        switch (b) {
                                                                                            case 112:
                                                                                                EventService.this.mEventHandler.removeMessages(257);
                                                                                                EventService.this.mEventHandler.sendEmptyMessage(257);
                                                                                                break;
                                                                                            case 113:
                                                                                                if (EventService.this.m_iCanbustype == 21 && EventService.this.m_iCarstype_ID == 4 && EventService.this.m_iCarCanbusName_ID == 2) {
                                                                                                    if (!EventService.this.mBackcarConnected) {
                                                                                                        EventService.this.endBackcar();
                                                                                                        Log.i(EventService.TAG, "--->>> KSW endBackCar 111");
                                                                                                        break;
                                                                                                    }
                                                                                                } else {
                                                                                                    EventService.this.SendAvmMode(2);
                                                                                                    break;
                                                                                                }
                                                                                                break;
                                                                                            case 114:
                                                                                                EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), "com.example.administrator.atslcarconsole", "com.example.administrator.atslcarconsole.MainActivity");
                                                                                                return;
                                                                                            case 115:
                                                                                                Log.i(EventService.TAG, "MCU_KEY_CAR_MEDIA");
                                                                                                EventService.this.switchCarMedia();
                                                                                                return;
                                                                                        }
                                                                                }
                                                                        }
                                                                    } else if (EventService.this.m_iUITypeVer == 41) {
                                                                        EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventService.this.mSysProviderOpt.getRecordValue(SysProviderOpt.NAV_PACKAGENAME, "com.szchoiceway.navigation"), EventService.this.mSysProviderOpt.getRecordValue(SysProviderOpt.NAV_ACTIVITYNAME, EventUtils.NAV_MODE_CLASS_NAME));
                                                                    } else if (EventService.byGPSMode == 0) {
                                                                        byte unused5 = EventService.byGPSMode = (byte) 1;
                                                                        EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), "com.szchoiceway.navigation", EventUtils.NAV_MODE_CLASS_NAME);
                                                                    } else {
                                                                        byte unused6 = EventService.byGPSMode = (byte) 0;
                                                                        EventService.this.ExecuteLastMode();
                                                                    }
                                                                }
                                                                if (EventService.this.mValidMode != EventUtils.eSrcMode.SRC_RADIO || EventService.this.bModeNull || EventService.this.bModeHome) {
                                                                    EventService.this.bModeHome = false;
                                                                    if (EventUtils.getInstallStatus(EventService.this.getApplicationContext(), EventUtils.RADIO_DSP_MODE_PACKAGE_NAME)) {
                                                                        EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventUtils.RADIO_DSP_MODE_PACKAGE_NAME, EventUtils.RADIO_DSP_MODE_CLASS_NAME);
                                                                        return;
                                                                    } else {
                                                                        EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventUtils.RADIO_MODE_PACKAGE_NAME, EventUtils.RADIO_MODE_CLASS_NAME);
                                                                        return;
                                                                    }
                                                                }
                                                            } else {
                                                                if (EventService.this.getBTStatus() <= 3 && EventService.this.mValidMode != EventUtils.eSrcMode.SRC_BT) {
                                                                    EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventUtils.BT_MODE_PACKAGE_NAME, EventUtils.BT_MODE_CLASS_NAME);
                                                                }
                                                                EventUtils.sendBTBroadcast(EventService.this.getApplicationContext(), EventUtils.MCU_KEY_INFOR_ACTION, 23);
                                                            }
                                                        }
                                                        ComponentName componentName = ((ActivityManager) EventService.this.getSystemService("activity")).getRunningTasks(1).get(0).topActivity;
                                                        String packageName = componentName.getPackageName();
                                                        String className = componentName.getClassName();
                                                        if (!packageName.equals(EventUtils.SET_MODE_PACKAGE_NAME) && !className.equals("com.szchoiceway.settings.EQSetActivity")) {
                                                            String unused7 = EventService.packageNameOld = packageName;
                                                            String unused8 = EventService.classNameOld = className;
                                                            EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventUtils.SET_MODE_PACKAGE_NAME, "com.szchoiceway.settings.EQSetActivity");
                                                        } else if (EventService.packageNameOld.length() > 0 && EventService.classNameOld.length() > 0) {
                                                            EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventService.packageNameOld, EventService.classNameOld);
                                                            EventUtils.sendSysBroadcast(EventService.this.getApplicationContext(), EventUtils.MCU_MSG_FINISH_EVT, 0);
                                                            String unused9 = EventService.packageNameOld = BuildConfig.FLAVOR;
                                                            String unused10 = EventService.classNameOld = BuildConfig.FLAVOR;
                                                        }
                                                    } else {
                                                        Log.i(EventService.TAG, "--->>> KeyEvent.KEYCODE_HOME 111");
                                                        EventService.this.sendKeyDownUpSync(3);
                                                    }
                                                }
                                                EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventUtils.MOVIE_MODE_PACKAGE_NAME, EventUtils.MOVIE_MODE_CLASS_NAME);
                                            } else {
                                                EventUtils.startActivityIfNotRuning(EventService.this.getApplicationContext(), EventUtils.MUSIC_MODE_PACKAGE_NAME, EventUtils.MUSIC_MODE_CLASS_NAME);
                                            }
                                            EventService.this.notifyValidModeEvt(4098, 0, bArr[1] & 255, (byte[]) null, (String) null);
                                        }
                                    }
                                }

                                private void onCmdRadioEvent(byte[] bArr) {
                                    if (bArr.length >= 3) {
                                        switch (bArr[1]) {
                                            case 0:
                                                onRadioState(bArr);
                                                return;
                                            case 1:
                                                onRadioBndNum(bArr);
                                                return;
                                            case 2:
                                                onRadioCurNum(bArr);
                                                return;
                                            case 3:
                                                onRadioCurFreq(bArr);
                                                return;
                                            case 4:
                                                onRadioFreqList(bArr);
                                                return;
                                            case 5:
                                                onRadioPTYType(bArr);
                                                return;
                                            case 6:
                                                onRadioPSName(bArr);
                                                return;
                                            default:
                                                return;
                                        }
                                    }
                                }

                                private void onRadioState(byte[] bArr) {
                                    if (bArr.length >= 4) {
                                        boolean z = true;
                                        boolean unused = EventService.this.mRadioRDSState = (bArr[3] & 1) > 0;
                                        boolean unused2 = EventService.this.mRadioPTYState = (bArr[3] & 2) > 0;
                                        boolean unused3 = EventService.this.mRadioAFState = (bArr[3] & 4) > 0;
                                        boolean unused4 = EventService.this.mRadioTAState = (bArr[3] & 8) > 0;
                                        boolean unused5 = EventService.this.mRadioSTState = (bArr[3] & 16) > 0;
                                        boolean unused6 = EventService.this.mRadioLOCState = (bArr[3] & 32) > 0;
                                        boolean unused7 = EventService.this.mRadioAMSState = (bArr[3] & 64) > 0;
                                        boolean unused8 = EventService.this.mRadioAPSState = (bArr[3] & EventUtils.CMD_FREQ_SEL) > 0;
                                        boolean unused9 = EventService.this.mRadioStIconState = (bArr[2] & 1) > 0;
                                        boolean unused10 = EventService.this.mRadioTpIconState = (bArr[2] & 2) > 0;
                                        EventService eventService = EventService.this;
                                        if ((4 & bArr[2]) <= 0) {
                                            z = false;
                                        }
                                        boolean unused11 = eventService.mRadioTrafficState = z;
                                        EventService.this.notifyRadioEvt(0, 0, ((bArr[3] << 8) | bArr[2]) & 65535, (byte[]) null, (String) null);
                                    }
                                }

                                private void onRadioBndNum(byte[] bArr) {
                                    if (bArr.length >= 3 && bArr[2] >= 0 && bArr[2] <= 4) {
                                        int unused = EventService.this.mRadioBndNum = bArr[2];
                                        EventService.this.notifyRadioEvt(1, 0, EventService.this.mRadioBndNum, (byte[]) null, (String) null);
                                        EventService.this.sendBroadcast(new Intent(EventUtils.ZXW_RADIO_INFO_EVT));
                                    }
                                }

                                private void onRadioCurNum(byte[] bArr) {
                                    if (bArr.length >= 3 && bArr[2] >= 0 && bArr[2] < 6) {
                                        int unused = EventService.this.mRadioTuneNum = bArr[2];
                                        EventService.this.notifyRadioEvt(2, 0, EventService.this.mRadioTuneNum, (byte[]) null, (String) null);
                                    }
                                }

                                private void onRadioCurFreq(byte[] bArr) {
                                    if (bArr.length >= 4) {
                                        int unused = EventService.this.mRadioCurFreq = (bArr[3] & 255) | ((bArr[2] << 8) & 65280);
                                        EventService.this.notifyRadioEvt(3, 0, EventService.this.mRadioCurFreq, (byte[]) null, (String) null);
                                        EventService.this.sendBroadcast(new Intent(EventUtils.ZXW_RADIO_INFO_EVT));
                                    }
                                }

                                private void onRadioFreqList(byte[] bArr) {
                                    if (bArr.length >= 5 && bArr[2] >= 0 && bArr[2] < 30) {
                                        EventService.this.mRadioFreqList[bArr[2]] = ((bArr[3] << 8) & 65280) | (bArr[4] & 255);
                                        EventService.this.notifyRadioEvt(4, bArr[2], EventService.this.mRadioFreqList[bArr[2]], (byte[]) null, (String) null);
                                    }
                                }

                                private void onRadioPTYType(byte[] bArr) {
                                    if (bArr.length >= 3) {
                                        int unused = EventService.this.mRadioPTYNum = bArr[2];
                                        EventService.this.notifyRadioEvt(5, 0, EventService.this.mRadioPTYNum, (byte[]) null, (String) null);
                                    }
                                }

                                private void onRadioPSName(byte[] bArr) {
                                    if (bArr.length >= 4) {
                                        String unused = EventService.this.mRadioPSName = new String(bArr, 3, bArr.length - 3);
                                        EventService.this.notifyRadioEvt(6, 0, 0, (byte[]) null, EventService.this.mRadioPSName);
                                    }
                                }

                                private void onCmdWheelEvent(byte[] bArr) {
                                    Log.i("onCmdWheelEvent", "onCmdWheelEvent: " + EventUtils.bytesToHexString(bArr));
                                    if (bArr.length >= 3 && bArr[1] <= 9) {
                                        Log.i("onCmdWheelEvent", "wsk key = : " + bArr[1]);
                                        Log.i("onCmdWheelEvent", "bydata[2] key = : " + bArr[2]);
                                        Intent intent = new Intent(EventUtils.STEER_WHEEL_INFOR);
                                        intent.putExtra(EventUtils.STEER_WHEEL_INFOR_LPARAM, bArr[1] + 1);
                                        if (bArr[2] == 0) {
                                            intent.putExtra(EventUtils.STEER_WHEEL_INFOR_WPARAM, 4);
                                        } else {
                                            intent.putExtra(EventUtils.STEER_WHEEL_INFOR_WPARAM, 3);
                                        }
                                        EventService.this.sendBroadcast(intent);
                                    }
                                }

                                private void onCmdTVEvent(byte[] bArr) {
                                    Log.i("onCmdTVEvent", "onCmdTVEvent: " + EventUtils.bytesToHexString(bArr));
                                }

                                private void onCmdBMTVolEvent(byte[] bArr) {
                                    Log.i("onCmdBMTVolEvent", "onCmdBMTVolEvent: " + EventUtils.bytesToHexString(bArr));
                                    byte unused = EventService.this.iBassVal = bArr[1];
                                    byte unused2 = EventService.this.iMiddleVal = bArr[2];
                                    byte unused3 = EventService.this.iTrebleVal = bArr[3];
                                    EventService.this.getApplicationContext().sendBroadcast(new Intent(EventUtils.MCU_MSG_BAL_FAD));
                                }

                                private void onCmdEQEvent(byte[] bArr) {
                                    Log.i("onCmdEQEvent", "onCmdEQEvent: " + EventUtils.bytesToHexString(bArr));
                                    byte unused = EventService.this.iEQMode = bArr[1];
                                }

                                private void onCmdMuteEvent(byte[] bArr) {
                                    Log.i("onCmdMuteEvent", "onCmdMuteEvent: " + EventUtils.bytesToHexString(bArr));
                                    if (bArr[1] == 0) {
                                        boolean unused = EventService.this.bMuteOn = true;
                                        Log.i("bMuteOn 1", "bMuteOn: " + EventService.this.bMuteOn);
                                    } else {
                                        boolean unused2 = EventService.this.bMuteOn = false;
                                        Log.i("bMuteOn 2", "bMuteOn: " + EventService.this.bMuteOn);
                                    }
                                    if (EventService.this.mSysProviderOpt != null) {
                                        EventService.this.mSysProviderOpt.updateRecord(SysProviderOpt.MCU_MSG_MUTE_STATE, EventService.this.bMuteOn ? "1" : "0");
                                    }
                                    EventService.this.getApplicationContext().sendBroadcast(new Intent(EventUtils.MCU_MSG_MUTE_STATE));
                                }

                                private void onCmdSwitchCarScreen(byte[] bArr) {
                                    boolean z = true;
                                    if (bArr[1] != 0) {
                                        byte b = bArr[1];
                                        z = false;
                                    }
                                    Intent intent = new Intent(EventUtils.MCU_MSG_SWITCH_CAR_SCREEN);
                                    intent.putExtra(EventUtils.SWITCH_CAR_SCREEN_DATA, z);
                                    EventService.this.getApplicationContext().sendBroadcast(intent);
                                }

                                private void onCmdMcu3DHData(byte[] bArr) {
                                    Intent intent = new Intent(EventUtils.MCU_3DH_INFO);
                                    intent.putExtra(EventUtils.CAR_AIR_DATA, bArr);
                                    EventService.this.sendBroadcastAsUser(intent, UserHandle.ALL);
                                    float f = (float) (bArr[5] + (bArr[6] * 256));
                                    double unused = EventService.this.xx = (Math.acos(((double) ((float) (bArr[1] + (bArr[2] * 256)))) / 16384.0d) / 3.141592653589793d) * 180.0d;
                                    double unused2 = EventService.this.yy = (Math.acos(((double) ((float) (bArr[3] + (bArr[4] * 256)))) / 16384.0d) / 3.141592653589793d) * 180.0d;
                                    double unused3 = EventService.this.zz = (Math.acos(((double) f) / 16384.0d) / 3.141592653589793d) * 180.0d;
                                    Message obtainMessage = EventService.this.mEventHandler.obtainMessage();
                                    Bundle bundle = new Bundle();
                                    bundle.putDouble("ChangeX", EventService.this.xx);
                                    bundle.putDouble("ChangeY", EventService.this.yy);
                                    bundle.putDouble("ChangeZ", EventService.this.zz);
                                    obtainMessage.what = EventService.EVT_CARCAHNGE_ROTE;
                                    obtainMessage.setData(bundle);
                                    EventService.this.mEventHandler.sendMessage(obtainMessage);
                                }

                                private void OnCmdCYMcuUpgradeData(byte[] bArr) {
                                    if (bArr.length > 0) {
                                        byte[] bArr2 = new byte[(bArr.length - 2)];
                                        for (int i = 2; i < bArr.length; i++) {
                                            bArr2[i - 2] = bArr[i];
                                        }
                                        if (bArr[1] == 2) {
                                            NotifyMcuUpgradeVer(bArr2);
                                        } else if (bArr[1] == 3) {
                                            NotifyMcuUpgradeAddr(bArr2);
                                        } else if (bArr[1] == 255) {
                                            NotifyMcuUpgradeDifferVer(bArr[0]);
                                        }
                                    }
                                }

                                private void NotifyMcuUpgradeVer(byte[] bArr) {
                                    Intent intent = new Intent(EventUtils.ZXW_MCU_NOTIFY_8902_MCUUPGRADE_VER_EVT);
                                    intent.putExtra(EventUtils.ZXW_MCU_MCUUPGRADE_VER_DATA, bArr);
                                    EventService.this.sendBroadcast(intent);
                                }

                                private void NotifyMcuUpgradeAddr(byte[] bArr) {
                                    Intent intent = new Intent(EventUtils.ZXW_MCU_NOTIFY_8902_MCUUPGRADE_ADDR_EVT);
                                    intent.putExtra(EventUtils.ZXW_MCU_MCUUPGRADE_ADDR_DATA, bArr);
                                    EventService.this.sendBroadcast(intent);
                                }

                                private void NotifyMcuUpgradeDifferVer(byte b) {
                                    if (b == 255) {
                                        EventService.this.sendBroadcast(new Intent(EventUtils.ZXW_MCU_UPGRADE_FAIL));
                                    }
                                }

                                private void onCmdMainVolEvent(byte[] bArr) {
                                    Log.i("onCmdMainVolEvent", "onCmdMainVolEvent: " + EventUtils.bytesToHexString(bArr));
                                    byte unused = EventService.this.iMainVal = bArr[1];
                                    if ((bArr[1] & EventUtils.CMD_FREQ_SEL) > 0) {
                                        byte unused2 = EventService.this.iMainVal = (byte) (EventService.this.iMainVal + EventUtils.CMD_FREQ_SEL);
                                    }
                                    Log.i(EventService.TAG, "--->>> 8888 iMainVal = " + EventService.this.iMainVal);
                                    EventService.this.sendToOSData();
                                }

                                private void onCmdBalanceEvent(byte[] bArr) {
                                    Log.i("onCmdBalanceEvent", "onCmdBalanceEvent: " + EventUtils.bytesToHexString(bArr));
                                    byte unused = EventService.this.iBALVal = bArr[1];
                                    byte unused2 = EventService.this.iFADVal = bArr[2];
                                    EventService.this.getApplicationContext().sendBroadcast(new Intent(EventUtils.MCU_MSG_BAL_FAD));
                                }

                                private void onCmdLoudnessEvent(byte[] bArr) {
                                    Log.i("onCmdLoudnessEvent", "onCmdLoudnessEvent: " + EventUtils.bytesToHexString(bArr));
                                    if (bArr[1] == 0) {
                                        boolean unused = EventService.this.bLoudOn = false;
                                    } else {
                                        boolean unused2 = EventService.this.bLoudOn = true;
                                    }
                                    Log.i(EventService.TAG, "--->>>bLoudOn = " + EventService.this.bLoudOn);
                                    EventService.this.getApplicationContext().sendBroadcast(new Intent(EventUtils.MCU_MSG_LOUD_EVT));
                                }

                                private void onCmdMcuInitEvent(byte[] bArr) {
                                    if (!(EventService.this.m_iUITypeVer == 101 || EventService.this.m_iUITypeVer == 48)) {
                                        int unused = EventService.this.miLastMode = 1;
                                    }
                                    EventService.this.bMcuInitComplete = true;
                                    Log.i("onCmdMcuInitEvent", "onCmdMcuInitEvent: " + EventUtils.bytesToHexString(bArr));
                                }

                                private void onCmdKeyADEvent(byte[] bArr) {
                                    Log.i("onCmdKeyADEvent", "onCmdKeyADEvent: " + EventUtils.bytesToHexString(bArr));
                                }

                                private void onCmdUpgradeAck(byte[] bArr) {
                                    if (bArr.length <= 2) {
                                        return;
                                    }
                                    if (EventService.this.mSendThread != null && EventService.this.mSendThread.isInWaitMcuReponseMode()) {
                                        EventService.this.mSendThread.responseMcuWriteSuccess();
                                    } else if ((bArr[1] & 255) == 79) {
                                        Log.i("mcu", "0x4F");
                                        if (EventService.this.mSendThread != null) {
                                            EventService.this.mSendThread.responseMcuWriteSuccess();
                                        }
                                    } else if ((bArr[1] & 255) == 69) {
                                        Log.i("mcu", "0x45");
                                        if (EventService.this.mSendThread != null) {
                                            EventService.this.mSendThread.responseMcuWriteError();
                                        }
                                    }
                                }

                                private void onCmdFreqSelectEvt(byte[] bArr) {
                                    Log.i("onCmdFreqSelectEvt", "onCmdFreqSelectEvt: " + EventUtils.bytesToHexString(bArr));
                                }

                                private void onCmdModePowerOnEvt(byte[] bArr) {
                                    Log.i(EventService.TAG, "onCmdModePowerOnEvt: " + EventUtils.bytesToHexString(bArr));
                                }

                                private void onCmdDiscAutoInEvt(byte[] bArr) {
                                    Log.i("onCmdDiscAutoInEvt", "onCmdDiscAutoInEvt: " + EventUtils.bytesToHexString(bArr));
                                    int unused = EventService.this.m_iDiscAutoInCount = (int) SystemClock.uptimeMillis();
                                }

                                private void onCmdSysRTCTimeEvt(byte[] bArr) {
                                    if (bArr.length > 6 && !EventService.this.mIsGPSGetLocation) {
                                        Log.i("onCmdSysRTCTimeEvt", "onCmdSysRTCTimeEvt: " + EventUtils.bytesToHexString(bArr));
                                        Calendar instance = Calendar.getInstance();
                                        byte b = bArr[2];
                                        byte b2 = bArr[3];
                                        byte b3 = bArr[4];
                                        byte b4 = bArr[5];
                                        byte b5 = bArr[6];
                                        instance.set(1, bArr[1] + 2000);
                                        instance.set(2, b);
                                        instance.set(5, b2);
                                        instance.set(11, b3);
                                        instance.set(12, b4);
                                        instance.set(13, b5);
                                        long timeInMillis = instance.getTimeInMillis();
                                        if (timeInMillis / 1000 < 2147483647L) {
                                            SystemClock.setCurrentTimeMillis(timeInMillis);
                                        }
                                    }
                                }

                                private void onCmd8825ValEvent(byte[] bArr) {
                                    Log.i("onCmd8825ValEvent", "onCmd8825ValEvent: " + EventUtils.bytesToHexString(bArr));
                                }

                                private void OnCmdWheelState(byte[] bArr) {
                                    if (bArr.length >= 2) {
                                        Log.i("OnCmdWheelState", "OnCmdWheelState: " + EventUtils.bytesToHexString(bArr));
                                        Intent intent = new Intent(EventUtils.STEER_WHEEL_STATUS);
                                        intent.putExtra(EventUtils.STEER_WHEEL_STUDY_STATUS, (bArr[2] & 255) | ((bArr[1] & 255) << 8));
                                        EventService.this.sendBroadcast(intent);
                                    }
                                }

                                private void onCmdCarAirEvent(byte[] bArr) {
                                    EventUtils.sendBroadcast(EventService.this.getApplicationContext(), EventUtils.MCU_MSG_CAR_AIR, bArr);
                                }

                                private void onCmdCarInfo(byte[] bArr) {
                                    EventUtils.sendBroadcast(EventService.this.getApplicationContext(), EventUtils.MCU_MSG_CAR_INFO, bArr);
                                }

                                private void onCmdCanbusAll(byte[] bArr) {
                                    if (EventService.this.m_iUITypeVer == 41) {
                                        EventUtils.sendBroadcast(EventService.this.getApplicationContext(), EventUtils.MCU_MSG_CAN_ALL_INFO, bArr);
                                    } else if (EventService.this.isCanUpgradeMode()) {
                                        EventUtils.sendBroadcast(EventService.this.getApplicationContext(), EventUtils.MCU_MSG_CAN_ALL_INFO, bArr);
                                    } else {
                                        byte[] bArr2 = new byte[(bArr.length - 1)];
                                        System.arraycopy(bArr, 0, bArr2, 0, bArr.length - 1);
                                        Log.i("onCmdCanbusAll", "--->>> onCmdCanbusAll mbyData =: " + EventUtils.bytesToHexString(bArr));
                                        EventUtils.sendBroadcast(EventService.this.getApplicationContext(), EventUtils.MCU_MSG_CAN_ALL_INFO, bArr2);
                                    }
                                }
                            };
                            Looper.loop();
                        }
                    }).start();
                }
            }

            /* access modifiers changed from: protected */
            public void stopProcessCmdThread() {
                Handler handler = this.mProcessHandler;
                if (handler != null) {
                    handler.sendEmptyMessage(256);
                }
            }

            /* access modifiers changed from: protected */
            public void startSendThread() {
                Log.d(TAG, "startSendThread");
                if (this.mSendThread == null) {
                    SendThread sendThread = new SendThread();
                    this.mSendThread = sendThread;
                    sendThread.start();
                    SystemClock.sleep(30);
                }
            }

            /* access modifiers changed from: protected */
            public void stopSendThread() {
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.exit();
                    this.mSendThread = null;
                }
            }

            /* JADX WARNING: Removed duplicated region for block: B:23:0x0035 A[SYNTHETIC, Splitter:B:23:0x0035] */
            /* JADX WARNING: Removed duplicated region for block: B:28:0x0040 A[SYNTHETIC, Splitter:B:28:0x0040] */
            /* JADX WARNING: Removed duplicated region for block: B:34:? A[RETURN, SYNTHETIC] */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void switchMicToBTPhone(boolean r4) {
                /*
                    r3 = this;
                    java.io.File r0 = new java.io.File
                    java.lang.String r1 = "/sys/touch_type/mic_switch"
                    r0.<init>(r1)
                    boolean r1 = r0.exists()
                    if (r1 != 0) goto L_0x000e
                    return
                L_0x000e:
                    r1 = 0
                    java.io.FileOutputStream r2 = new java.io.FileOutputStream     // Catch:{ Exception -> 0x002f }
                    r2.<init>(r0)     // Catch:{ Exception -> 0x002f }
                    if (r4 == 0) goto L_0x001d
                    java.lang.String r4 = "1"
                L_0x0018:
                    byte[] r4 = r4.getBytes()     // Catch:{ Exception -> 0x002a, all -> 0x0027 }
                    goto L_0x0020
                L_0x001d:
                    java.lang.String r4 = "0"
                    goto L_0x0018
                L_0x0020:
                    r2.write(r4)     // Catch:{ Exception -> 0x002a, all -> 0x0027 }
                    r2.close()     // Catch:{ IOException -> 0x0039 }
                    goto L_0x003d
                L_0x0027:
                    r4 = move-exception
                    r1 = r2
                    goto L_0x003e
                L_0x002a:
                    r4 = move-exception
                    r1 = r2
                    goto L_0x0030
                L_0x002d:
                    r4 = move-exception
                    goto L_0x003e
                L_0x002f:
                    r4 = move-exception
                L_0x0030:
                    r4.printStackTrace()     // Catch:{ all -> 0x002d }
                    if (r1 == 0) goto L_0x003d
                    r1.close()     // Catch:{ IOException -> 0x0039 }
                    goto L_0x003d
                L_0x0039:
                    r4 = move-exception
                    r4.printStackTrace()
                L_0x003d:
                    return
                L_0x003e:
                    if (r1 == 0) goto L_0x0048
                    r1.close()     // Catch:{ IOException -> 0x0044 }
                    goto L_0x0048
                L_0x0044:
                    r0 = move-exception
                    r0.printStackTrace()
                L_0x0048:
                    throw r4
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.switchMicToBTPhone(boolean):void");
            }

            /* access modifiers changed from: private */
            /* JADX WARNING: Can't wrap try/catch for region: R(6:0|1|2|3|4|(3:5|6|10)) */
            /* JADX WARNING: Failed to process nested try/catch */
            /* JADX WARNING: Missing exception handler attribute for start block: B:3:0x0023 */
            /* JADX WARNING: Missing exception handler attribute for start block: B:5:0x0032 */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void startVoiceService() {
                /*
                    r3 = this;
                    java.lang.String r0 = "EventService"
                    java.lang.String r1 = "--->>> com.zxwtxz.sdkdemo.service.TXZService"
                    android.util.Log.i(r0, r1)
                    android.content.Intent r0 = new android.content.Intent
                    java.lang.String r1 = "com.zxwtxz.sdkdemo.service.TXZService"
                    r0.<init>(r1)
                    java.lang.String r1 = "com.zxwtxz.sdkdemo"
                    r0.setPackage(r1)
                    r3.startService(r0)
                    android.content.Intent r0 = new android.content.Intent     // Catch:{ Exception -> 0x0023 }
                    java.lang.String r2 = "com.zxwtxz.sdkdemo.TXZToZXWService"
                    r0.<init>(r2)     // Catch:{ Exception -> 0x0023 }
                    r0.setPackage(r1)     // Catch:{ Exception -> 0x0023 }
                    r3.startService(r0)     // Catch:{ Exception -> 0x0023 }
                L_0x0023:
                    android.content.Intent r0 = new android.content.Intent     // Catch:{ Exception -> 0x0032 }
                    java.lang.String r1 = "com.lfg.szchoiceway.zxwgooglevoice.ZxwGoogleSpeechService"
                    r0.<init>(r1)     // Catch:{ Exception -> 0x0032 }
                    java.lang.String r1 = "com.lfg.szchoiceway.zxwgooglevoice"
                    r0.setPackage(r1)     // Catch:{ Exception -> 0x0032 }
                    r3.startService(r0)     // Catch:{ Exception -> 0x0032 }
                L_0x0032:
                    android.content.Intent r0 = new android.content.Intent     // Catch:{ Exception -> 0x0044 }
                    java.lang.String r1 = "txz.action.START_SMART_ADAPTER"
                    r0.<init>(r1)     // Catch:{ Exception -> 0x0044 }
                    java.lang.String r1 = "com.txznet.smartadapter"
                    r0.setPackage(r1)     // Catch:{ Exception -> 0x0044 }
                    android.os.UserHandle r1 = android.os.UserHandle.CURRENT     // Catch:{ Exception -> 0x0044 }
                    r3.startServiceAsUser(r0, r1)     // Catch:{ Exception -> 0x0044 }
                    goto L_0x0048
                L_0x0044:
                    r0 = move-exception
                    r0.printStackTrace()
                L_0x0048:
                    return
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.startVoiceService():void");
            }

            /* access modifiers changed from: private */
            public void startSleepThread() {
                synchronized (this.mSleep) {
                    Log.d(TAG, "isSleepThreadStarted " + this.isSleepThreadStarted);
                    Log.d(TAG, "isThreadExit " + this.isThreadExit);
                    if (!this.isSleepThreadStarted) {
                        this.isSleepThreadStarted = true;
                        this.isThreadExit = false;
                        new Thread(new Runnable() {
                            public void run() {
                                while (!EventService.this.isThreadExit) {
                                    Utils.killapps(EventService.this, Utils.mSysApkLstExt);
                                    try {
                                        Thread.sleep(1000);
                                    } catch (InterruptedException e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        }).start();
                    }
                }
            }

            /* access modifiers changed from: private */
            public void stopSleepThread() {
                Log.d(TAG, "stopSleepThread");
                this.isThreadExit = true;
                this.isSleepThreadStarted = false;
            }

            /* access modifiers changed from: private */
            public void reloadParam() {
                this.bMuteOn = false;
                sendMode(EventUtils.eSrcMode.SRC_POWERON, false);
                sendMode(EventUtils.eSrcMode.SRC_MCU_VERSION, false);
                PowerOff(false);
                sendMode(EventUtils.eSrcMode.SRC_NULL, false);
                SendFactorySet();
                sendSleepTime(this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SYS_SLEEP_TIME, 0));
                SendBLVal((byte) this.mSysProviderOpt.getRecordInteger(EventUtils.KEY_BRIGHTNESS_SETTINGS, 18), (byte) this.mSysProviderOpt.getRecordInteger(EventUtils.KEY_NBRIGHTNESS_SETTINGS, 10));
                if (this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SET_AUTO_RUN_GPS_KEY, false)) {
                    this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_AUTO_RUN_GPS, 5000);
                }
                deleteHomePwd();
                this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.TVOUT_OUTPUT_ALL, false);
                setOutputFormat();
                reloadService();
            }

            /* access modifiers changed from: private */
            public void setSysStandyMode(boolean z) {
                synchronized (this.mBackcarEvt) {
                    Log.i(TAG, "setSysStandyMode enable " + z + " mValidMode" + this.mValidMode);
                    Log.i(TAG, "getSysStandyModeState 1 = " + getSysStandyModeState() + " mAccOpenState " + this.mAccOpenState);
                    if (z != getSysStandyModeState()) {
                        if (z) {
                            if (this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_CARPLAY.getIntValue()) {
                                EventUtils.startLetter(this);
                            }
                            if (Build.VERSION.SDK_INT <= 27) {
                                this.lastStandByMode = this.mValidMode.getIntValue();
                            }
                            sendMode(EventUtils.eSrcMode.SRC_IDLE_MODE, false);
                            sendKeyDownUpSync(127);
                        } else {
                            sendMode(EventUtils.eSrcMode.SRC_IDLE_REST, false);
                            notifyModeKeyEvt(-57);
                            int i = Build.VERSION.SDK_INT;
                            sendKeyDownUpSync(126);
                            if (this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_CARPLAY.getIntValue()) {
                                EventUtils.startLetter(this);
                            }
                        }
                        Log.i(TAG, "getSysStandyModeState 2 = " + getSysStandyModeState());
                        this.mEventHandler.removeMessages(EventUtils.HANDLER_MENU_TOUCH_POS);
                    }
                }
            }

            /* access modifiers changed from: private */
            public void sendAccSleepStatusBroadcast(int i) {
                Intent intent = new Intent(EventUtils.ACTION_ACC_SLEEP_STATUS_EVT);
                intent.putExtra(EventUtils.ACTION_ACC_SLEEP_STATUS_EXTRA, i);
                sendBroadcastAsUser(intent, UserHandle.ALL);
            }

            /* access modifiers changed from: private */
            public void setSysAudioManager() {
                AudioManager audioManager2 = (AudioManager) getSystemService("audio");
                if (audioManager2 != null) {
                    try {
                        int streamMaxVolume = audioManager2.getStreamMaxVolume(4);
                        Log.i(TAG, "maxVolume STREAM_ALARM = " + streamMaxVolume);
                        audioManager2.setStreamVolume(4, streamMaxVolume, 0);
                        int streamMaxVolume2 = audioManager2.getStreamMaxVolume(3);
                        Log.i(TAG, "maxVolume STREAM_MUSIC = " + streamMaxVolume2);
                        audioManager2.setStreamVolume(3, streamMaxVolume2, 0);
                        int streamMaxVolume3 = audioManager2.getStreamMaxVolume(1);
                        Log.i(TAG, "maxVolume STREAM_SYSTEM = " + streamMaxVolume3);
                        audioManager2.setStreamVolume(1, streamMaxVolume3, 0);
                        int streamMaxVolume4 = audioManager2.getStreamMaxVolume(5);
                        Log.i(TAG, "maxVolume STREAM_NOTIFICATION = " + streamMaxVolume4);
                        audioManager2.setStreamVolume(5, streamMaxVolume4, 0);
                    } catch (Exception e) {
                        Log.i(TAG, "e = " + e);
                    }
                }
            }

            public void androidHome() {
                Log.i(TAG, "androidHome");
                sendKeyDownUpSync(3);
            }

            public void sendSleepTime(int i) {
                int i2 = i != 1 ? i != 2 ? i != 3 ? 480 : 2880 : 1440 : 960;
                byte[] bArr = {73, 5, (byte) ((i2 >> 8) & 255), (byte) (i2 & 255)};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private void deleteHomePwd() {
                if (new File("/mnt/usb_storage/zxwClearPwd.cfg").exists()) {
                    try {
                        Runtime.getRuntime().exec("rm -rf /data/system/gesture.key \n");
                        Runtime.getRuntime().exec("rm -rf /data/system/password.key \n");
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }

            /* access modifiers changed from: private */
            public void reloadService() {
                startVoiceService();
            }

            public boolean isStandyMode() {
                return this.mIsStandyMode;
            }

            public void setStandyMode(boolean z) {
                this.mIsStandyMode = z;
            }

            /* access modifiers changed from: private */
            public void disableAutoStartRecv() {
                new Thread(new Runnable() {
                    public void run() {
                        EventService.this.disableIntentRevc("android.intent.action.BOOT_COMPLETED");
                        EventService.this.disableIntentRevc("android.intent.action.TIME_TICK");
                        EventService.this.disableIntentRevc("android.intent.action.DATE_CHANGED");
                        EventService.this.disableIntentRevc("android.intent.action.TIME_SET");
                        EventService.this.disableIntentRevc("android.intent.action.TIMEZONE_CHANGED");
                        EventService.this.disableIntentRevc("android.intent.action.PACKAGE_REPLACED");
                        EventService.this.disableIntentRevc("android.intent.action.PACKAGE_REMOVED");
                        EventService.this.disableIntentRevc("android.intent.action.PACKAGE_ADDED");
                        EventService.this.disableIntentRevc("android.intent.action.MEDIA_MOUNTED");
                        EventService.this.disableIntentRevc("android.intent.action.MEDIA_UNMOUNTED");
                        EventService.this.disableIntentRevc("android.intent.action.MEDIA_EJECT");
                    }
                }).start();
            }

            /* access modifiers changed from: private */
            public void disableIntentRevc(String str) {
                boolean z;
                PackageInfo packageInfo;
                Intent intent = new Intent(str);
                if (this.packageManager == null) {
                    this.packageManager = getPackageManager();
                }
                List<ResolveInfo> queryBroadcastReceivers = this.packageManager.queryBroadcastReceivers(intent, 0);
                if (queryBroadcastReceivers.size() != 0) {
                    for (int i = 0; i < queryBroadcastReceivers.size(); i++) {
                        ResolveInfo resolveInfo = queryBroadcastReceivers.get(i);
                        int i2 = 0;
                        while (true) {
                            if (i2 >= this.sysApkLst.length) {
                                z = false;
                                break;
                            } else if (resolveInfo.activityInfo.packageName.startsWith(this.sysApkLst[i2])) {
                                z = true;
                                break;
                            } else {
                                i2++;
                            }
                        }
                        if (!z) {
                            try {
                                packageInfo = this.packageManager.getPackageInfo(resolveInfo.activityInfo.packageName, 0);
                            } catch (PackageManager.NameNotFoundException e) {
                                e.printStackTrace();
                                packageInfo = null;
                            }
                            if (!(packageInfo == null || (packageInfo.applicationInfo.flags & 1) == 0)) {
                                z = true;
                            }
                        }
                        if (!z) {
                            this.packageManager.setComponentEnabledSetting(new ComponentName(resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.name), 2, 1);
                            Log.i(TAG, "action: " + str);
                            Log.i(TAG, "disable: " + resolveInfo.activityInfo.packageName + "|" + resolveInfo.activityInfo.name);
                        }
                    }
                }
            }

            public void SendARMUpgrade(int i) {
                this.isSystemUpgrade = true;
                this.mEventHandler.removeMessages(267);
                byte[] bArr = {70, (byte) i};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void sendHeartBeatReset(byte b, byte b2) {
                byte[] bArr = {73, b, b2};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void sendSystemReset() {
                byte[] bArr = {59, 0};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void sendSoftWareReboot() {
                this.mEventHandler.removeMessages(267);
                byte[] bArr = {73, 27, 1};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void rebootService() {
                if (this.isImportBackup) {
                    this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_REBOOT);
                    this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_REBOOT, 1000);
                } else if (!this.reboot) {
                    Log.i(TAG, "rebootService: reboot。。。。。。。。。。。");
                    try {
                        this.reboot = true;
                        Runtime.getRuntime().exec("sync");
                        Thread.sleep(2000);
                    } catch (Exception e) {
                        e.printStackTrace();
                        this.reboot = false;
                    }
                    sendKSW_0x00_0x69((byte) 16, (byte) 1, (byte) 0);
                    ((PowerManager) getSystemService("power")).reboot("重启");
                }
            }

            /* access modifiers changed from: protected */
            public void SaveSystemData() {
                if (this.mValidMode.getIntValue() != EventUtils.eSrcMode.SRC_MOBILE_APP.getIntValue()) {
                    this.mEditor.putInt(EventUtils.KEY_SYS_LAST_MODE, this.miLastMode);
                    this.mEditor.apply();
                    this.mEditor.commit();
                    Log.i(TAG, "***SaveSystemData***" + this.miLastMode);
                }
            }

            /* access modifiers changed from: protected */
            public int GetPwrOnMode() {
                return this.miLastMode;
            }

            public void sendMode(EventUtils.eSrcMode esrcmode) {
                sendMode(esrcmode, true);
            }

            public void sendMode(EventUtils.eSrcMode esrcmode, boolean z) {
                Log.i(TAG, "--->>> Send eSrcMode: " + esrcmode + ", mValidMode = " + this.mValidMode);
                if (this.mValidMode != esrcmode) {
                    if (esrcmode != EventUtils.eSrcMode.SRC_DVR) {
                        this.mValidMode = esrcmode;
                    } else {
                        this.isDvrMode = true;
                    }
                }
                if (isEffectiveMode(esrcmode.getIntValue()) || esrcmode.getIntValue() == EventUtils.eSrcMode.SRC_THIRD_APP.getIntValue()) {
                    sendKSW_0x00_0x67(esrcmode, false);
                    this.miLastMode = esrcmode.getIntValue();
                    Log.d(TAG, "--->>> Send miLastMode = " + this.miLastMode);
                    SaveSystemData();
                }
                Intent intent = new Intent(EventUtils.ZXW_ACTION_SYS_MODE_CHANGE_EVT);
                intent.putExtra(EventUtils.ZXW_ACTION_SYS_MODE_CHANGE_EXTRA_EVT, esrcmode.getIntValue());
                sendBroadcastAsUser(intent, UserHandle.ALL);
            }

            public void sendRadioKey(int i) {
                Log.i(TAG, "sendRadioKey: key = " + i);
                byte[] bArr = {2, (byte) (i & 255)};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void sendPlayState(boolean z) {
                if (this.m_iUITypeVer != 41) {
                    byte[] bArr = {25, z ^ true ? (byte) 1 : 0};
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                    }
                } else if (this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_BT.getIntValue() || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_BTMUSIC.getIntValue()) {
                    this.m_iBTPlayStatus = z;
                } else if (!this.m_iBTPlayStatus) {
                } else {
                    if (this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_NULL.getIntValue() || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_THIRD_APP.getIntValue()) {
                        this.m_iBTPlayStatus = false;
                        sendKSW_0x00_0x67_third();
                    }
                }
            }

            public void sendResetDVD(boolean z) {
                byte[] bArr = {22, z ? (byte) 1 : 0};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void sendSysRTCTimer() {
                Calendar instance2 = Calendar.getInstance();
                byte[] bArr = new byte[7];
                bArr[0] = 19;
                int i = instance2.get(1);
                bArr[1] = (byte) (i > 2000 ? i - 2000 : 2015);
                bArr[2] = (byte) instance2.get(2);
                bArr[3] = (byte) instance2.get(5);
                bArr[4] = (byte) instance2.get(11);
                bArr[5] = (byte) instance2.get(12);
                bArr[6] = (byte) instance2.get(13);
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private void initSysProvideParam() {
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    this.m_iCanbustype = sysProviderOpt.getRecordInteger(SysProviderOpt.SET_Canbustype_KEY, this.m_iCanbustype);
                    this.m_iCarstype_ID = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SET_Carstype_ID_KEY, this.m_iCarstype_ID);
                    this.m_iCarCanbusName_ID = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SET_CarCanbusName_ID_KEY, this.m_iCarCanbusName_ID);
                    Log.i(TAG, "initSysProvideParam: m_iCanbustype  = " + this.m_iCanbustype);
                    Log.i(TAG, "initSysProvideParam: m_iCarstype_ID  = " + this.m_iCarstype_ID);
                    Log.i(TAG, "initSysProvideParam: m_iCarCanbusName_ID  = " + this.m_iCarCanbusName_ID);
                    this.m_bBackCarAid = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_BACKCAR_AID, this.m_bBackCarAid);
                    this.m_bWheelTrack = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_WHEEL_TRACK, this.m_bWheelTrack);
                    this.m_bBackcarSnd = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_BACKCAR_SND, this.m_bBackcarSnd);
                    this.m_bBackcarSndAtt = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_BACKCAR_SND_ATT, this.m_bBackcarSndAtt);
                    this.bLEDColorSetStatus = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_LEDCOLOR_SET_KEY, this.bLEDColorSetStatus);
                    this.bGPSMix = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_GPSMIXSET_KEY, this.bGPSMix);
                    this.m_iGPSVolVal = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SYS_GPSVOL_VAL, this.m_iGPSVolVal);
                    this.m_bModeMemory = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_MODE_MEMORY, this.m_bModeMemory);
                    this.m_iCurrDim = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SET_DIM_LIGHT_KEY, this.m_iCurrDim);
                    this.m_bZhongJiPan = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_FAT_SET_ZHONGJIPAN, this.m_bZhongJiPan);
                    this.mSysProviderOpt.updateRecord(SysProviderOpt.KESAIWEI_RECORD_BT_CONNECT_MENU, "0");
                    if (this.m_iUITypeVer == 41) {
                        this.iMainVal = (byte) getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, this.iMainVal);
                        Log.i(TAG, "initSysProvideParam: iMainVal = " + this.iMainVal);
                        boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_USB_HOST_MODE, true);
                        Log.d(TAG, "KSW_USB_HOST_MODE = " + recordBoolean);
                        new Thread(new Runnable(recordBoolean, checkAdb()) {
                            public final /* synthetic */ boolean f$1;
                            public final /* synthetic */ boolean f$2;

                            {
                                this.f$1 = r2;
                                this.f$2 = r3;
                            }

                            public final void run() {
                                EventService.this.lambda$initSysProvideParam$2$EventService(this.f$1, this.f$2);
                            }
                        }).start();
                    }
                    int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SYS_BT_TYPE_KEY, this.m_iBTTypeVer);
                    this.m_iBTTypeVer = recordInteger;
                    if (recordInteger == 5 && !"als".equalsIgnoreCase(this.xml_client)) {
                        this.mSysProviderOpt.updateRecord(SysProviderOpt.SYS_BT_TYPE_KEY, "3");
                        this.m_iBTTypeVer = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SYS_BT_TYPE_KEY, this.m_iBTTypeVer);
                    }
                    if (this.m_iUITypeVer == 102) {
                        this.mSysProviderOpt.updateRecord(SysProviderOpt.SYS_BT_TYPE_KEY, "9");
                        if (Build.VERSION.SDK_INT > 28) {
                            this.mSysProviderOpt.updateRecord(SysProviderOpt.SYS_BT_TYPE_KEY, "10");
                        }
                        this.m_iBTTypeVer = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SYS_BT_TYPE_KEY, this.m_iBTTypeVer);
                    }
                    Log.i(TAG, "initSysProvideParam: m_iBTTypeVer = " + this.m_iBTTypeVer);
                    this.m_iBackCarVideoStatus = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SET_BACKCAR_VIDEO, this.m_iBackCarVideoStatus);
                    Log.i(TAG, "m_iBackCarVideoStatus  = " + this.m_iBackCarVideoStatus);
                    boolean recordBoolean2 = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_ASSISTIVE_TOUCH, false);
                    Log.i(TAG, "bAssistiveTouch  = " + recordBoolean2);
                    if (SysProviderOpt.m_bSupportFocusMove) {
                        recordBoolean2 = true;
                    }
                    if (recordBoolean2) {
                        Intent intent = new Intent(this, TopFloatService.class);
                        intent.setPackage("com.szchoiceway.eventcenter.AssistiveTouch");
                        startService(intent);
                        TopFloatService.SetEvtServiceContext(this);
                    }
                    if (this.m_iUITypeVer == 41) {
                        this.bAfterArmUpgrade = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_INIT_ARM_UPGRADE, true);
                        Log.i(TAG, "initSysProvideParam: bAfterArmUpgrade = " + this.bAfterArmUpgrade);
                        if (this.bAfterArmUpgrade) {
                            this.mSysProviderOpt.updateRecord(SysProviderOpt.KSW_INIT_ARM_UPGRADE, "0");
                            SharedPreferences.Editor editor = this.mEditor;
                            if (editor != null) {
                                editor.putBoolean("BT_AutoAnswer", false);
                                this.mEditor.apply();
                                this.mEditor.commit();
                            }
                        }
                    }
                    sendToOSData();
                }
            }

            public /* synthetic */ void lambda$initSysProvideParam$2$EventService(boolean z, boolean z2) {
                if (z && !z2) {
                    try {
                        closeAdb(false);
                        Thread.sleep(500);
                        closeAdb(true);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                if (!z && z2) {
                    closeAdb(false);
                }
            }

            private void initSysProvideParam2() {
                AssetManager assets;
                SharedPreferences sharedPreferences = getSharedPreferences(EventUtils.ZXW_DATABASE_SCREEN_DENSITY_CODE, 4);
                SharedPreferences.Editor edit = sharedPreferences.edit();
                if (sharedPreferences.getAll().size() < 9) {
                    edit.clear();
                    edit.putString("800x480", "A");
                    edit.putString("1024x600", "B");
                    edit.putString("1280x480", "C");
                    edit.putString("1280x720", "D");
                    edit.putString("1440x540", "E");
                    edit.putString("1560x700", "F");
                    edit.putString("1920x720", "G");
                    edit.putString("720x1920", "H");
                    edit.apply();
                }
                if (Customer.getUIIndex(this) == 8) {
                    this.mSysProviderOpt.setRecordDefaultValue("persist.system.ui", "sailor");
                }
                File file2 = new File(ksw_backup_path + ksw_factory_xml_copy_filename);
                Log.d(TAG, "initSysProvideParam2 config file exist " + file2.exists());
                if (!file2.exists()) {
                    if (!this.mSysProviderOpt.checkRecordExist(SysProviderOpt.KESAIWEI_SYS_USER_TIME_TYPE)) {
                        this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_SYS_USER_TIME_TYPE, "1");
                        Settings.System.putString(getContentResolver(), "time_12_24", "24");
                    }
                    if (!this.mSysProviderOpt.checkRecordExist(SysProviderOpt.KESAIWEI_SYS_LANGUAGE)) {
                        this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_SYS_LANGUAGE, "0");
                        LocalePicker.updateLocale(Locale.SIMPLIFIED_CHINESE);
                    }
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_DATA_CAR_MANUFACTURER_INDEX, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_DATA_PRODUCT_INDEX, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSE_TXZ_WARING_VALUE_OIL, "8");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSE_TXZ_WARING_VALUE_SPEED, "200");
                    this.mSysProviderOpt.setRecordDefaultValue(EventUtils.KEY_KSW_VOL_VAL_00, "26");
                    this.mSysProviderOpt.setRecordDefaultValue(EventUtils.KEY_KSW_VOL_VAL_01, "28");
                    this.mSysProviderOpt.setRecordDefaultValue(EventUtils.KEY_KSW_VOL_VAL_03, "20");
                    this.mSysProviderOpt.setRecordDefaultValue(EventUtils.KEY_KSW_VOL_VAL_04, "20");
                    this.mSysProviderOpt.setRecordDefaultValue(EventUtils.KESAIWEI_EQ_MODE_SELECT, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(EventUtils.KESAIWEI_EQ_USER_LOW, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(EventUtils.KESAIWEI_EQ_USER_MID, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(EventUtils.KESAIWEI_EQ_USER_HIGHT, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_SYS_FRONT_MIRROR, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_SYS_BACKCAR_MIRROR, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_SYS_REVERSING_TRACK, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_SYS_RADAR, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_REVEERSING_MUTE_SELECT_INDEX, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_SYS_CAMERA_SELECTION, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_AHD_CAMERA_TYPE, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_SYS_VIDEO_DRIVING_BAN, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_BACKLIGHT_CONTROL_INDEX, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(EventUtils.KEY_BRIGHTNESS_SETTINGS, "70");
                    this.mSysProviderOpt.setRecordDefaultValue("KESAIWEI_RECORD_BT_INDEX", "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_DISTACNE_UNIT, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_OIL_UNIT, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_TEMP_UNIT, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_RECORD_DVR, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_RECORD_AUX_SWITCHING, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_SYS_SD_HOST, "2");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_AUX_ITEM_POSITION, "2");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_AUX_ITEM_POSITION2, "2");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_BOOT_MODE_MEMORY_INDEX, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_FACTORY_SET_PASSWORD, "1314");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_USB_HOST_MODE, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_HAVE_CARAUTO, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_HAVE_HICAR, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.MAISILUO_SYS_GOOGLEPLAY, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_HAVE_AUX, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_HAVE_TV, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_HAVE_ECAR, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_HAVE_ESEXPLORER, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_HAVE_MANUAL, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_HAVE_EQ, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_HAVE_WEATHER, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_HAVE_FRONT_CAMERA, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_SCREEN_CAST_MS9120, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_SEND_TOUCH_DATA_CONTINUED, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_RECORD_AMPLIFIER, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_HORN_SELECTION, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_ORIGINAL_CAR_VIDEO_DISPLAY, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_CCC_IDRIVE_TYPE, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_360_CAMERA_TYPE_INDEX, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_HANDSET_AUTOMATIC_SET_INDEX, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_WHELLTRACK_INDEX, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_REVERSE_EXIT_TIME_INDEX, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_REVERSE_EXIT_TIME_CUSTOMIZE, "3");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.SYS_DOOR_SET_VALUE_INDEX_KEY, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.SYS_DOOR_DISPLAYSET_VALUE_INDEX_KEY, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.SYS_BENZ_CONTROL_INDEX, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_SHOW_AIR, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_SPEED_TYPE_SELECTION, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_BOOT_360_CAMERA_INDEX, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_TURN_SIGNAL_CONTROL, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_EXTERNAL_INTERNAL_MIC_SELECTION, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_ORIGINAL_INSTALL_MIC_SELECTION, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_MAP_KEY_FUNCTION_INDEX, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_MODE_KEY_FUNCTION_INDEX, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_VOICE_KEY_FUNCTION_INDEX, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_PHONE_KEY_FUNCTION_INDEX, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_DASHBOARD_SELECT, "0");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_RECORD_CAR_TYPE, "1");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_AGREEMENT_SELECT_INDEX, "5");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KESAIWEI_SYS_MODE_SELECTION, "16");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.RESOLUTION, "1920x720");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_UI_RESOLUTION, "1920x720");
                    this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_AUTO_IMPORT_FACTORY_SETTINGS, "1");
                    if (!"GT7-CAR".equals(Build.MODEL) && !this.mSysProviderOpt.checkRecordExist(SysProviderOpt.SYS_SETLOGO_INDEX) && (assets = getAssets()) != null) {
                        String str = "logo_1920x720_default.bmp";
                        try {
                            String recordValue = this.mSysProviderOpt.getRecordValue(SysProviderOpt.KSW_UI_RESOLUTION, "1920x720");
                            if ("1280x480".equalsIgnoreCase(recordValue)) {
                                str = "logo_1280x480_default.bmp";
                            } else if ("1024x600".equals(recordValue)) {
                                str = "logo_1024x600_default.bmp";
                            } else if ("1280x720".equals(recordValue)) {
                                str = "logo_1280x720_default.bmp";
                            } else if ("1440x540".equalsIgnoreCase(recordValue)) {
                                str = "logo_1440x540_default.bmp";
                            } else if ("1560x700".equalsIgnoreCase(recordValue)) {
                                str = "logo_1560x700_default.bmp";
                            }
                            InputStream open = assets.open(str);
                            ksw_set_logo(BitmapFactory.decodeStream(open));
                            open.close();
                            this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.SYS_SETLOGO_INDEX, "1");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }

            /* JADX WARNING: Can't wrap try/catch for region: R(2:19|20) */
            /* JADX WARNING: Can't wrap try/catch for region: R(2:8|9) */
            /* JADX WARNING: Can't wrap try/catch for region: R(5:14|15|16|17|18) */
            /* JADX WARNING: Code restructure failed: missing block: B:10:0x00c5, code lost:
                r9 = move-exception;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:12:?, code lost:
                r10 = new java.io.FileInputStream(ksw_product_path + "customer_1920x720.xml");
                android.util.Log.d(TAG, "customer.xml is exist --- product");
             */
            /* JADX WARNING: Code restructure failed: missing block: B:13:0x00e1, code lost:
                r8 = r10;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:15:?, code lost:
                r10 = new java.io.FileInputStream("/system/app/" + "customer_1920x720.xml");
                android.util.Log.d(TAG, "customer.xml is exist --- system");
             */
            /* JADX WARNING: Code restructure failed: missing block: B:17:?, code lost:
                r4 = new java.io.FileInputStream("/oem/app/customer.xml");
             */
            /* JADX WARNING: Code restructure failed: missing block: B:18:0x0106, code lost:
                r8 = r4;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:20:?, code lost:
                r4 = new java.io.FileInputStream("/system/app/customer.xml");
             */
            /* JADX WARNING: Code restructure failed: missing block: B:21:0x0110, code lost:
                android.util.Log.i(TAG, "loadXmlFile: e = " + r9.toString());
             */
            /* JADX WARNING: Code restructure failed: missing block: B:9:?, code lost:
                r9 = new java.io.FileInputStream("/oem/app/" + "customer_1920x720.xml");
             */
            /* JADX WARNING: Failed to process nested try/catch */
            /* JADX WARNING: Missing exception handler attribute for start block: B:14:0x00e3 */
            /* JADX WARNING: Missing exception handler attribute for start block: B:16:0x00ff */
            /* JADX WARNING: Missing exception handler attribute for start block: B:19:0x0108 */
            /* JADX WARNING: Missing exception handler attribute for start block: B:8:0x00ae */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            private java.util.Map<java.lang.String, java.lang.String> loadXmlFile() {
                /*
                    r13 = this;
                    java.lang.String r0 = "value"
                    java.lang.String r1 = "name"
                    java.lang.String r2 = android.os.Build.MODEL
                    java.lang.StringBuilder r3 = new java.lang.StringBuilder
                    r3.<init>()
                    java.lang.String r4 = "loadXmlFile: model = "
                    r3.append(r4)
                    r3.append(r2)
                    java.lang.String r2 = r3.toString()
                    java.lang.String r3 = "EventService"
                    android.util.Log.i(r3, r2)
                    com.szchoiceway.eventcenter.SysProviderOpt r2 = r13.mSysProviderOpt
                    java.lang.String r4 = "RESOLUTION"
                    java.lang.String r5 = ""
                    java.lang.String r2 = r2.getRecordValue(r4, r5)
                    java.lang.StringBuilder r4 = new java.lang.StringBuilder
                    r4.<init>()
                    java.lang.String r5 = "loadXmlFile: strResolution = "
                    r4.append(r5)
                    r4.append(r2)
                    java.lang.String r2 = r4.toString()
                    android.util.Log.i(r3, r2)
                    com.szchoiceway.eventcenter.SysProviderOpt r2 = r13.mSysProviderOpt
                    java.lang.String r4 = "KESAIWEI_SYS_MODE_SELECTION"
                    r5 = 0
                    r2.getRecordInteger(r4, r5)
                    com.szchoiceway.eventcenter.SysProviderOpt r2 = r13.mSysProviderOpt
                    java.lang.String r4 = "IMITAGE_ORIGINAL_CAL_STYLE_INDEX"
                    int r2 = r2.getRecordInteger(r4, r5)
                    r13.mImitateOriginalCarUiIndex = r2
                    java.lang.StringBuilder r2 = new java.lang.StringBuilder
                    r2.<init>()
                    java.lang.String r4 = "loadXmlFile: strCustomerFileName = "
                    r2.append(r4)
                    java.lang.String r4 = "customer_1920x720.xml"
                    r2.append(r4)
                    java.lang.String r2 = r2.toString()
                    android.util.Log.i(r3, r2)
                    java.util.HashMap r2 = new java.util.HashMap
                    r2.<init>()
                    javax.xml.parsers.DocumentBuilderFactory r6 = javax.xml.parsers.DocumentBuilderFactory.newInstance()
                    java.lang.String r7 = "test"
                    java.lang.String r8 = "start"
                    android.util.Log.i(r7, r8)
                    r8 = 0
                    javax.xml.parsers.DocumentBuilder r6 = r6.newDocumentBuilder()     // Catch:{ ParserConfigurationException -> 0x0078 }
                    goto L_0x0095
                L_0x0078:
                    r6 = move-exception
                    r6.printStackTrace()
                    java.lang.StringBuilder r9 = new java.lang.StringBuilder
                    r9.<init>()
                    java.lang.String r10 = "err=="
                    r9.append(r10)
                    java.lang.String r6 = r6.getMessage()
                    r9.append(r6)
                    java.lang.String r6 = r9.toString()
                    android.util.Log.i(r7, r6)
                    r6 = r8
                L_0x0095:
                    java.io.FileInputStream r9 = new java.io.FileInputStream     // Catch:{ FileNotFoundException -> 0x00ae }
                    java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ FileNotFoundException -> 0x00ae }
                    r10.<init>()     // Catch:{ FileNotFoundException -> 0x00ae }
                    java.lang.String r11 = "/odm/app/"
                    r10.append(r11)     // Catch:{ FileNotFoundException -> 0x00ae }
                    r10.append(r4)     // Catch:{ FileNotFoundException -> 0x00ae }
                    java.lang.String r10 = r10.toString()     // Catch:{ FileNotFoundException -> 0x00ae }
                    r9.<init>(r10)     // Catch:{ FileNotFoundException -> 0x00ae }
                L_0x00ab:
                    r8 = r9
                    goto L_0x0128
                L_0x00ae:
                    java.io.FileInputStream r9 = new java.io.FileInputStream     // Catch:{ FileNotFoundException -> 0x00c5 }
                    java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ FileNotFoundException -> 0x00c5 }
                    r10.<init>()     // Catch:{ FileNotFoundException -> 0x00c5 }
                    java.lang.String r11 = "/oem/app/"
                    r10.append(r11)     // Catch:{ FileNotFoundException -> 0x00c5 }
                    r10.append(r4)     // Catch:{ FileNotFoundException -> 0x00c5 }
                    java.lang.String r10 = r10.toString()     // Catch:{ FileNotFoundException -> 0x00c5 }
                    r9.<init>(r10)     // Catch:{ FileNotFoundException -> 0x00c5 }
                    goto L_0x00ab
                L_0x00c5:
                    r9 = move-exception
                    java.io.FileInputStream r10 = new java.io.FileInputStream     // Catch:{ FileNotFoundException -> 0x00e3 }
                    java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch:{ FileNotFoundException -> 0x00e3 }
                    r11.<init>()     // Catch:{ FileNotFoundException -> 0x00e3 }
                    java.lang.String r12 = "/product/app/"
                    r11.append(r12)     // Catch:{ FileNotFoundException -> 0x00e3 }
                    r11.append(r4)     // Catch:{ FileNotFoundException -> 0x00e3 }
                    java.lang.String r11 = r11.toString()     // Catch:{ FileNotFoundException -> 0x00e3 }
                    r10.<init>(r11)     // Catch:{ FileNotFoundException -> 0x00e3 }
                    java.lang.String r11 = "customer.xml is exist --- product"
                    android.util.Log.d(r3, r11)     // Catch:{ FileNotFoundException -> 0x00e3 }
                L_0x00e1:
                    r8 = r10
                    goto L_0x0128
                L_0x00e3:
                    java.io.FileInputStream r10 = new java.io.FileInputStream     // Catch:{ FileNotFoundException -> 0x00ff }
                    java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch:{ FileNotFoundException -> 0x00ff }
                    r11.<init>()     // Catch:{ FileNotFoundException -> 0x00ff }
                    java.lang.String r12 = "/system/app/"
                    r11.append(r12)     // Catch:{ FileNotFoundException -> 0x00ff }
                    r11.append(r4)     // Catch:{ FileNotFoundException -> 0x00ff }
                    java.lang.String r4 = r11.toString()     // Catch:{ FileNotFoundException -> 0x00ff }
                    r10.<init>(r4)     // Catch:{ FileNotFoundException -> 0x00ff }
                    java.lang.String r4 = "customer.xml is exist --- system"
                    android.util.Log.d(r3, r4)     // Catch:{ FileNotFoundException -> 0x00ff }
                    goto L_0x00e1
                L_0x00ff:
                    java.io.FileInputStream r4 = new java.io.FileInputStream     // Catch:{ FileNotFoundException -> 0x0108 }
                    java.lang.String r10 = "/oem/app/customer.xml"
                    r4.<init>(r10)     // Catch:{ FileNotFoundException -> 0x0108 }
                L_0x0106:
                    r8 = r4
                    goto L_0x0128
                L_0x0108:
                    java.io.FileInputStream r4 = new java.io.FileInputStream     // Catch:{ FileNotFoundException -> 0x0110 }
                    java.lang.String r10 = "/system/app/customer.xml"
                    r4.<init>(r10)     // Catch:{ FileNotFoundException -> 0x0110 }
                    goto L_0x0106
                L_0x0110:
                    java.lang.StringBuilder r4 = new java.lang.StringBuilder
                    r4.<init>()
                    java.lang.String r10 = "loadXmlFile: e = "
                    r4.append(r10)
                    java.lang.String r9 = r9.toString()
                    r4.append(r9)
                    java.lang.String r4 = r4.toString()
                    android.util.Log.i(r3, r4)
                L_0x0128:
                    if (r8 == 0) goto L_0x01d2
                    if (r6 == 0) goto L_0x01d2
                    org.w3c.dom.Document r3 = r6.parse(r8)     // Catch:{ Exception -> 0x01b6 }
                    java.lang.String r4 = "customer"
                    org.w3c.dom.NodeList r3 = r3.getElementsByTagName(r4)     // Catch:{ Exception -> 0x01b6 }
                    java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x01b6 }
                    r4.<init>()     // Catch:{ Exception -> 0x01b6 }
                    java.lang.String r6 = "customer list.getLength() = "
                    r4.append(r6)     // Catch:{ Exception -> 0x01b6 }
                    int r6 = r3.getLength()     // Catch:{ Exception -> 0x01b6 }
                    r4.append(r6)     // Catch:{ Exception -> 0x01b6 }
                    java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x01b6 }
                    android.util.Log.i(r7, r4)     // Catch:{ Exception -> 0x01b6 }
                    int r4 = r3.getLength()     // Catch:{ Exception -> 0x01b6 }
                    if (r4 <= 0) goto L_0x01d2
                    org.w3c.dom.Node r3 = r3.item(r5)     // Catch:{ Exception -> 0x01b6 }
                    org.w3c.dom.Element r3 = (org.w3c.dom.Element) r3     // Catch:{ Exception -> 0x01b6 }
                    java.lang.String r4 = "item"
                    org.w3c.dom.NodeList r3 = r3.getElementsByTagName(r4)     // Catch:{ Exception -> 0x01b6 }
                    java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x01b6 }
                    r4.<init>()     // Catch:{ Exception -> 0x01b6 }
                    java.lang.String r6 = "item list.getLength() = "
                    r4.append(r6)     // Catch:{ Exception -> 0x01b6 }
                    int r6 = r3.getLength()     // Catch:{ Exception -> 0x01b6 }
                    r4.append(r6)     // Catch:{ Exception -> 0x01b6 }
                    java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x01b6 }
                    android.util.Log.i(r7, r4)     // Catch:{ Exception -> 0x01b6 }
                L_0x0178:
                    int r4 = r3.getLength()     // Catch:{ Exception -> 0x01b6 }
                    if (r5 >= r4) goto L_0x01d2
                    org.w3c.dom.Node r4 = r3.item(r5)     // Catch:{ Exception -> 0x01b6 }
                    org.w3c.dom.Element r4 = (org.w3c.dom.Element) r4     // Catch:{ Exception -> 0x01b6 }
                    java.lang.String r6 = r4.getAttribute(r1)     // Catch:{ Exception -> 0x01b6 }
                    java.lang.String r9 = r4.getAttribute(r0)     // Catch:{ Exception -> 0x01b6 }
                    r2.put(r6, r9)     // Catch:{ Exception -> 0x01b6 }
                    java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x01b6 }
                    r6.<init>()     // Catch:{ Exception -> 0x01b6 }
                    java.lang.String r9 = "name ="
                    r6.append(r9)     // Catch:{ Exception -> 0x01b6 }
                    java.lang.String r9 = r4.getAttribute(r1)     // Catch:{ Exception -> 0x01b6 }
                    r6.append(r9)     // Catch:{ Exception -> 0x01b6 }
                    java.lang.String r9 = " value="
                    r6.append(r9)     // Catch:{ Exception -> 0x01b6 }
                    java.lang.String r4 = r4.getAttribute(r0)     // Catch:{ Exception -> 0x01b6 }
                    r6.append(r4)     // Catch:{ Exception -> 0x01b6 }
                    java.lang.String r4 = r6.toString()     // Catch:{ Exception -> 0x01b6 }
                    android.util.Log.i(r7, r4)     // Catch:{ Exception -> 0x01b6 }
                    int r5 = r5 + 1
                    goto L_0x0178
                L_0x01b6:
                    r0 = move-exception
                    r0.printStackTrace()
                    java.lang.StringBuilder r1 = new java.lang.StringBuilder
                    r1.<init>()
                    java.lang.String r3 = "errSAXException=="
                    r1.append(r3)
                    java.lang.String r0 = r0.toString()
                    r1.append(r0)
                    java.lang.String r0 = r1.toString()
                    android.util.Log.i(r7, r0)
                L_0x01d2:
                    if (r8 == 0) goto L_0x01dc
                    r8.close()     // Catch:{ IOException -> 0x01d8 }
                    goto L_0x01dc
                L_0x01d8:
                    r0 = move-exception
                    r0.printStackTrace()
                L_0x01dc:
                    return r2
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.loadXmlFile():java.util.Map");
            }

            public void initSystemParam() {
                this.mEventHandler.sendEmptyMessage(EventUtils.KSW_HANDLER_DISABLE_GOOGLE_APKS);
                SystemProperties.set("persist.sys.show_statusbar", "1");
                SystemProperties.set("vendor.zxw.maps", "igo");
                SystemProperties.set("vendor.zxw.maps.volume", "15");
                startBT();
                setLetterIcon();
                Log.d(TAG, "initSystemParam setTouchInfor " + this.mSysProviderOpt.getRecordValue(SysProviderOpt.SYS_TOUCH_ORGIN_KEY, BuildConfig.FLAVOR));
                setTouchInfor(this.mSysProviderOpt.getRecordValue(SysProviderOpt.SYS_TOUCH_ORGIN_KEY, "4"));
                boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.ZXW_ACTION_WIFI_AP_SWITCH, true);
                Log.d(TAG, "initSystemParam wifiApSwitch = " + recordBoolean);
                setWifiApEnabled(recordBoolean);
                if (!recordBoolean) {
                    boolean recordBoolean2 = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.ZXW_ACTION_WIFI_SWITCH, false);
                    Log.d(TAG, "initSystemParam wifiSwitch = " + recordBoolean2);
                    setWifiEnabled(recordBoolean2);
                }
                Map<String, String> loadXmlFile = loadXmlFile();
                this.m_iUITypeVer = Integer.parseInt(loadXmlFile.get("m_iUITypeVer"));
                Log.i(TAG, "initSystemParam: appVersion = " + loadXmlFile.get("AppVersion"));
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                sysProviderOpt.updateRecord(SysProviderOpt.SET_USER_UI_TYPE, BuildConfig.FLAVOR + this.m_iUITypeVer);
                broadcastSettings();
                SharedPreferences sharedPreferences = this.mSettings;
                if (sharedPreferences != null) {
                    int i = sharedPreferences.getInt(EventUtils.KEY_RADIO_ZONE_SETTINGS, 0);
                    initRadioZone((byte) i);
                    this.miLastMode = this.mSettings.getInt(EventUtils.KEY_SYS_LAST_MODE, EventUtils.eSrcMode.SRC_NONE.getIntValue());
                    this.bSwitchMirror = this.mSettings.getBoolean(EventUtils.KEY_SWITCH_MIRROR, false);
                    this.miLastGPSMode = this.mSettings.getInt(EventUtils.KEY_SYS_LAST_GPS_MODE, 0);
                    Log.i(TAG, "miLastMode  = " + this.miLastMode);
                    Log.i(TAG, "Radio Zone = " + i);
                }
                this.mEventHandler.removeMessages(256);
                this.mEventHandler.sendEmptyMessageDelayed(256, 7000);
                setHDMIStatus();
                setOutputFormat();
                setOutput(true);
                InitTouchKey();
            }

            private void setEasyconnEcConfFile() {
                String str = "ec.conf";
                try {
                    String recordValue = this.mSysProviderOpt.getRecordValue(SysProviderOpt.RESOLUTION, "1280x480");
                    File file2 = new File(ksw_local_path);
                    if (!file2.exists()) {
                        file2.mkdirs();
                    }
                    File file3 = new File(ksw_local_path + str);
                    if (file3.exists()) {
                        file3.delete();
                    }
                    file3.createNewFile();
                    FileOutputStream fileOutputStream = new FileOutputStream(file3);
                    if (!"1280x480".equalsIgnoreCase(recordValue)) {
                        if ("1920x720".equalsIgnoreCase(recordValue)) {
                            str = "ec_1920x720.conf";
                        } else if ("1024x600".equalsIgnoreCase(recordValue)) {
                            str = "ec_1024x600.conf";
                        } else if ("1280x640".equalsIgnoreCase(recordValue)) {
                            str = "ec_1280x640.conf";
                        }
                    }
                    String str2 = Build.VERSION.SDK_INT >= 26 ? "/oem/app/" : "/system/app/";
                    File file4 = new File(str2 + str);
                    Log.i(TAG, "setEasyconnEcConfFile: filePath = " + file4.getPath());
                    FileInputStream fileInputStream = new FileInputStream(file4);
                    byte[] bArr = new byte[3072];
                    while (true) {
                        int read = fileInputStream.read(bArr);
                        if (read != -1) {
                            fileOutputStream.write(bArr, 0, read);
                        } else {
                            Toast.makeText(this, file4.getPath(), 1).show();
                            fileOutputStream.flush();
                            fileOutputStream.close();
                            fileInputStream.close();
                            return;
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Log.e(TAG, "setEasyconnEcConfFile: " + e.toString());
                }
            }

            /* access modifiers changed from: private */
            public void initRadioZone(byte b) {
                byte b2 = b;
                if (b2 == 0) {
                    int[] iArr = this.mRadioFreqList;
                    iArr[0] = 8750;
                    iArr[1] = 9000;
                    iArr[2] = 9800;
                    iArr[3] = 10600;
                    iArr[4] = 10800;
                    iArr[5] = 8750;
                    iArr[6] = 8750;
                    iArr[7] = 9000;
                    iArr[8] = 9800;
                    iArr[9] = 10600;
                    iArr[10] = 10800;
                    iArr[11] = 8750;
                    iArr[12] = 8750;
                    iArr[13] = 9000;
                    iArr[14] = 9800;
                    iArr[15] = 10600;
                    iArr[16] = 10800;
                    iArr[17] = 8750;
                    iArr[18] = 522;
                    iArr[19] = 603;
                    iArr[20] = 999;
                    iArr[21] = 1404;
                    iArr[22] = 1620;
                    iArr[23] = 522;
                    iArr[24] = 522;
                    iArr[25] = 603;
                    iArr[26] = 999;
                    iArr[27] = 1404;
                    iArr[28] = 1620;
                    iArr[29] = 522;
                } else if (b2 == 1) {
                    int[] iArr2 = this.mRadioFreqList;
                    iArr2[0] = 8750;
                    iArr2[1] = 9010;
                    iArr2[2] = 9810;
                    iArr2[3] = 10610;
                    iArr2[4] = 10790;
                    iArr2[5] = 8750;
                    iArr2[6] = 8750;
                    iArr2[7] = 9010;
                    iArr2[8] = 9810;
                    iArr2[9] = 10610;
                    iArr2[10] = 10790;
                    iArr2[11] = 8750;
                    iArr2[12] = 8750;
                    iArr2[13] = 9010;
                    iArr2[14] = 9810;
                    iArr2[15] = 10610;
                    iArr2[16] = 10790;
                    iArr2[17] = 8750;
                    iArr2[18] = 530;
                    iArr2[19] = 600;
                    iArr2[20] = 1000;
                    iArr2[21] = 1400;
                    iArr2[22] = 1710;
                    iArr2[23] = 530;
                    iArr2[24] = 530;
                    iArr2[25] = 600;
                    iArr2[26] = 1000;
                    iArr2[27] = 1400;
                    iArr2[28] = 1710;
                    iArr2[29] = 530;
                } else if (b2 == 2) {
                    int[] iArr3 = this.mRadioFreqList;
                    iArr3[0] = 8750;
                    iArr3[1] = 9010;
                    iArr3[2] = 9810;
                    iArr3[3] = 10610;
                    iArr3[4] = 10800;
                    iArr3[5] = 8750;
                    iArr3[6] = 8750;
                    iArr3[7] = 9010;
                    iArr3[8] = 9810;
                    iArr3[9] = 10610;
                    iArr3[10] = 10800;
                    iArr3[11] = 8750;
                    iArr3[12] = 8750;
                    iArr3[13] = 9010;
                    iArr3[14] = 9810;
                    iArr3[15] = 10610;
                    iArr3[16] = 10800;
                    iArr3[17] = 8750;
                    iArr3[18] = 530;
                    iArr3[19] = 600;
                    iArr3[20] = 1000;
                    iArr3[21] = 1400;
                    iArr3[22] = 1710;
                    iArr3[23] = 530;
                    iArr3[24] = 530;
                    iArr3[25] = 600;
                    iArr3[26] = 1000;
                    iArr3[27] = 1400;
                    iArr3[28] = 1710;
                    iArr3[29] = 530;
                } else if (b2 == 3) {
                    int[] iArr4 = this.mRadioFreqList;
                    iArr4[0] = 6500;
                    iArr4[1] = 6710;
                    iArr4[2] = 7040;
                    iArr4[3] = 7250;
                    iArr4[4] = 7400;
                    iArr4[5] = 6500;
                    iArr4[6] = 8750;
                    iArr4[7] = 9010;
                    iArr4[8] = 9810;
                    iArr4[9] = 10610;
                    iArr4[10] = 10790;
                    iArr4[11] = 8750;
                    iArr4[12] = 8750;
                    iArr4[13] = 9010;
                    iArr4[14] = 9810;
                    iArr4[15] = 10610;
                    iArr4[16] = 10790;
                    iArr4[17] = 8750;
                    iArr4[18] = 522;
                    iArr4[19] = 603;
                    iArr4[20] = 999;
                    iArr4[21] = 1404;
                    iArr4[22] = 1620;
                    iArr4[23] = 522;
                    iArr4[24] = 522;
                    iArr4[25] = 603;
                    iArr4[26] = 999;
                    iArr4[27] = 1404;
                    iArr4[28] = 1620;
                    iArr4[29] = 522;
                } else if (b2 == 4) {
                    int[] iArr5 = this.mRadioFreqList;
                    iArr5[0] = 7600;
                    iArr5[1] = 7640;
                    iArr5[2] = 8560;
                    iArr5[3] = 8700;
                    iArr5[4] = 9000;
                    iArr5[5] = 7600;
                    iArr5[6] = 7600;
                    iArr5[7] = 7640;
                    iArr5[8] = 8560;
                    iArr5[9] = 8700;
                    iArr5[10] = 9000;
                    iArr5[11] = 7600;
                    iArr5[12] = 7600;
                    iArr5[13] = 7640;
                    iArr5[14] = 8560;
                    iArr5[15] = 8700;
                    iArr5[16] = 9000;
                    iArr5[17] = 7600;
                    iArr5[18] = 522;
                    iArr5[19] = 603;
                    iArr5[20] = 999;
                    iArr5[21] = 1404;
                    iArr5[22] = 1629;
                    iArr5[23] = 522;
                    iArr5[24] = 522;
                    iArr5[25] = 603;
                    iArr5[26] = 999;
                    iArr5[27] = 1404;
                    iArr5[28] = 1629;
                    iArr5[29] = 522;
                } else if (b2 == 5) {
                    int[] iArr6 = this.mRadioFreqList;
                    iArr6[0] = 8750;
                    iArr6[1] = 9000;
                    iArr6[2] = 9800;
                    iArr6[3] = 10600;
                    iArr6[4] = 10800;
                    iArr6[5] = 8750;
                    iArr6[6] = 8750;
                    iArr6[7] = 9000;
                    iArr6[8] = 9800;
                    iArr6[9] = 10600;
                    iArr6[10] = 10800;
                    iArr6[11] = 8750;
                    iArr6[12] = 8750;
                    iArr6[13] = 9000;
                    iArr6[14] = 9800;
                    iArr6[15] = 10600;
                    iArr6[16] = 10800;
                    iArr6[17] = 8750;
                    iArr6[18] = 522;
                    iArr6[19] = 603;
                    iArr6[20] = 999;
                    iArr6[21] = 1404;
                    iArr6[22] = 1710;
                    iArr6[23] = 530;
                    iArr6[24] = 522;
                    iArr6[25] = 603;
                    iArr6[26] = 999;
                    iArr6[27] = 1404;
                    iArr6[28] = 1710;
                    iArr6[29] = 530;
                }
            }

            public int getRadioFreq() {
                return this.mRadioCurFreq;
            }

            public int[] getRadioFreqList() {
                return this.mRadioFreqList;
            }

            public int getRadioBand() {
                return this.mRadioBndNum;
            }

            public int getRadioTuneNum() {
                return this.mRadioTuneNum;
            }

            public boolean getRadioRDSState() {
                return this.mRadioRDSState;
            }

            public boolean getRadioPTYState() {
                return this.mRadioPTYState;
            }

            public int getRadioPTYNum() {
                return this.mRadioPTYNum;
            }

            public String getRadioPTYName() {
                return this.mRadioPSName;
            }

            public boolean getRadioAFState() {
                return this.mRadioAFState;
            }

            public boolean getRadioTAState() {
                return this.mRadioTAState;
            }

            public boolean getRadioSTMonoState() {
                return this.mRadioSTState;
            }

            public boolean getRadioDXLOCState() {
                return this.mRadioLOCState;
            }

            public boolean getRadioAMSState() {
                return this.mRadioAMSState;
            }

            public boolean getRadioAPSState() {
                return this.mRadioAPSState;
            }

            public boolean getRadioSteroIconState() {
                return this.mRadioStIconState;
            }

            public boolean getRadioTPIconState() {
                return this.mRadioTpIconState;
            }

            public boolean getRadioTrafficState() {
                return this.mRadioTrafficState;
            }

            public void setRadioCallback(ICallbackfn iCallbackfn) {
                synchronized (this) {
                    this.mRadioCallbackfn = iCallbackfn;
                }
            }

            public void setTVCallback(ICallbackfn iCallbackfn) {
                synchronized (this) {
                    this.mTVCallbackfn = iCallbackfn;
                }
            }

            public void setAUXCallback(ICallbackfn iCallbackfn) {
                synchronized (this) {
                    this.mAUXCallbackfn = iCallbackfn;
                }
            }

            public void setCarMediaCallback(ICallbackfn iCallbackfn) {
                synchronized (this) {
                    this.mCarMediaCallbackfn = iCallbackfn;
                }
            }

            public String getMCUVer() {
                Log.i(TAG, "getMCUVer: mStrMcuVer = " + this.mStrMcuVer);
                return this.mStrMcuVer;
            }

            public String getTFTVer() {
                return this.mStrTFTVer;
            }

            public boolean get_kesaiwei_chk_Video_Driving_Ban() {
                return this.b_kesaiwei_chk_Video_Driving_Ban;
            }

            public boolean get_kesaiwei_bPark() {
                return this.b_kesaiwei_bPark;
            }

            /* access modifiers changed from: private */
            public void notifyRadioEvt(int i, int i2, int i3, byte[] bArr, String str) {
                ICallbackfn iCallbackfn = this.mRadioCallbackfn;
                if (iCallbackfn != null) {
                    try {
                        iCallbackfn.notifyEvt(i, i2, i3, bArr, str);
                    } catch (Exception e) {
                        Log.e(TAG, "NotifyRadioEvt: " + e.toString());
                    }
                }
            }

            /* access modifiers changed from: private */
            /* JADX WARNING: Removed duplicated region for block: B:16:0x002a A[SYNTHETIC, Splitter:B:16:0x002a] */
            /* JADX WARNING: Removed duplicated region for block: B:24:0x003d A[SYNTHETIC, Splitter:B:24:0x003d] */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void notifyOsEvnentServiceState() {
                /*
                    r5 = this;
                    r0 = 0
                    java.io.FileOutputStream r1 = new java.io.FileOutputStream     // Catch:{ Exception -> 0x0021, all -> 0x001c }
                    java.io.File r2 = new java.io.File     // Catch:{ Exception -> 0x0021, all -> 0x001c }
                    java.lang.String r3 = "/dev/vehicle"
                    r2.<init>(r3)     // Catch:{ Exception -> 0x0021, all -> 0x001c }
                    r1.<init>(r2)     // Catch:{ Exception -> 0x0021, all -> 0x001c }
                    java.lang.String r0 = "99"
                    byte[] r0 = r0.getBytes()     // Catch:{ Exception -> 0x001a }
                    r1.write(r0)     // Catch:{ Exception -> 0x001a }
                    r1.close()     // Catch:{ Exception -> 0x002e }
                    goto L_0x0032
                L_0x001a:
                    r0 = move-exception
                    goto L_0x0025
                L_0x001c:
                    r1 = move-exception
                    r4 = r1
                    r1 = r0
                    r0 = r4
                    goto L_0x003b
                L_0x0021:
                    r1 = move-exception
                    r4 = r1
                    r1 = r0
                    r0 = r4
                L_0x0025:
                    r0.printStackTrace()     // Catch:{ all -> 0x003a }
                    if (r1 == 0) goto L_0x0032
                    r1.close()     // Catch:{ Exception -> 0x002e }
                    goto L_0x0032
                L_0x002e:
                    r0 = move-exception
                    r0.printStackTrace()
                L_0x0032:
                    java.lang.String r0 = "EventService"
                    java.lang.String r1 = "notifyOsEvnentServiceState"
                    android.util.Log.d(r0, r1)
                    return
                L_0x003a:
                    r0 = move-exception
                L_0x003b:
                    if (r1 == 0) goto L_0x0045
                    r1.close()     // Catch:{ Exception -> 0x0041 }
                    goto L_0x0045
                L_0x0041:
                    r1 = move-exception
                    r1.printStackTrace()
                L_0x0045:
                    throw r0
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.notifyOsEvnentServiceState():void");
            }

            private void getRecentTasks() {
                ResolveInfo resolveInfo;
                ArrayList arrayList = new ArrayList();
                PackageManager packageManager2 = getPackageManager();
                List<ActivityManager.RecentTaskInfo> recentTasks = ((ActivityManager) getSystemService("activity")).getRecentTasks(3, 2);
                Log.i(TAG, "getRecentTasks: recentTasks.size = " + recentTasks.size());
                if (recentTasks.size() > 0) {
                    boolean z = false;
                    for (int i = 0; i < recentTasks.size(); i++) {
                        ActivityManager.RecentTaskInfo recentTaskInfo = recentTasks.get(i);
                        Intent intent = new Intent(recentTaskInfo.baseIntent);
                        if (recentTaskInfo.origActivity != null) {
                            intent.setComponent(recentTaskInfo.origActivity);
                        }
                        ResolveInfo resolveActivity = packageManager2.resolveActivity(intent, 0);
                        if (resolveActivity != null) {
                            arrayList.add(resolveActivity);
                            ActivityInfo activityInfo = resolveActivity.activityInfo;
                            String str = activityInfo.packageName;
                            String str2 = activityInfo.name;
                            String charSequence = activityInfo.loadLabel(packageManager2).toString();
                            activityInfo.loadIcon(packageManager2);
                            Log.i(TAG, "getRecentTasks: title = " + charSequence);
                            Log.i(TAG, "getRecentTasks: mRecentTasks.size = " + this.mRecentTasks.size());
                            if (this.mRecentTasks.size() <= 0 || recentTasks.size() != this.mRecentTasks.size() || ((resolveInfo = this.mRecentTasks.get(i)) != null && !resolveInfo.activityInfo.packageName.equals(str))) {
                                z = true;
                            }
                        }
                    }
                    Log.i(TAG, "getRecentTasks: bChange = " + z);
                    if (z) {
                        this.mRecentTasks.clear();
                        this.mRecentTasks.addAll(arrayList);
                        if (this.mRecentTasks.size() > 2) {
                            ImageView imageView = this.mBtnRecentTask0;
                            if (imageView != null) {
                                imageView.setBackground(this.mRecentTasks.get(0).activityInfo.loadIcon(packageManager2));
                            }
                            ImageView imageView2 = this.mBtnRecentTask1;
                            if (imageView2 != null) {
                                imageView2.setBackground(this.mRecentTasks.get(1).activityInfo.loadIcon(packageManager2));
                            }
                            ImageView imageView3 = this.mBtnRecentTask2;
                            if (imageView3 != null) {
                                imageView3.setBackground(this.mRecentTasks.get(2).activityInfo.loadIcon(packageManager2));
                            }
                        } else if (this.mRecentTasks.size() > 1) {
                            ImageView imageView4 = this.mBtnRecentTask0;
                            if (imageView4 != null) {
                                imageView4.setBackground(this.mRecentTasks.get(0).activityInfo.loadIcon(packageManager2));
                            }
                            ImageView imageView5 = this.mBtnRecentTask1;
                            if (imageView5 != null) {
                                imageView5.setBackground(this.mRecentTasks.get(1).activityInfo.loadIcon(packageManager2));
                            }
                            ImageView imageView6 = this.mBtnRecentTask2;
                            if (imageView6 != null) {
                                imageView6.setBackgroundResource(R.drawable.ic_launcher);
                            }
                        } else if (this.mRecentTasks.size() > 0) {
                            ImageView imageView7 = this.mBtnRecentTask0;
                            if (imageView7 != null) {
                                imageView7.setBackground(this.mRecentTasks.get(0).activityInfo.loadIcon(packageManager2));
                            }
                            ImageView imageView8 = this.mBtnRecentTask1;
                            if (imageView8 != null) {
                                imageView8.setBackgroundResource(R.drawable.ic_launcher);
                            }
                            ImageView imageView9 = this.mBtnRecentTask2;
                            if (imageView9 != null) {
                                imageView9.setBackgroundResource(R.drawable.ic_launcher);
                            }
                        }
                    }
                } else {
                    this.mRecentTasks.clear();
                    ImageView imageView10 = this.mBtnRecentTask0;
                    if (imageView10 != null) {
                        imageView10.setBackgroundResource(R.drawable.ic_launcher);
                    }
                    ImageView imageView11 = this.mBtnRecentTask1;
                    if (imageView11 != null) {
                        imageView11.setBackgroundResource(R.drawable.ic_launcher);
                    }
                    ImageView imageView12 = this.mBtnRecentTask2;
                    if (imageView12 != null) {
                        imageView12.setBackgroundResource(R.drawable.ic_launcher);
                    }
                }
            }

            public void sendBroadcastVaildMode() {
                sendBroadcastAsUser(new Intent(EventUtils.BROADCAST_VALID_MODE_EVT), UserHandle.ALL);
            }

            /* JADX WARNING: Code restructure failed: missing block: B:70:0x02ac, code lost:
                return;
             */
            /* JADX WARNING: Removed duplicated region for block: B:34:0x016a  */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void setCurModeCallback(int r8, com.szchoiceway.eventcenter.ICallbackfn r9) {
                /*
                    r7 = this;
                    monitor-enter(r7)
                    boolean r0 = r7.isEffectiveMode(r8)     // Catch:{ all -> 0x02ad }
                    java.lang.String r1 = "EventService"
                    java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x02ad }
                    r2.<init>()     // Catch:{ all -> 0x02ad }
                    java.lang.String r3 = "setCurModeCallback: currentMode = "
                    r2.append(r3)     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = r7.mValidMode     // Catch:{ all -> 0x02ad }
                    int r3 = r3.getIntValue()     // Catch:{ all -> 0x02ad }
                    r2.append(r3)     // Catch:{ all -> 0x02ad }
                    java.lang.String r3 = ", setMode = "
                    r2.append(r3)     // Catch:{ all -> 0x02ad }
                    r2.append(r8)     // Catch:{ all -> 0x02ad }
                    java.lang.String r3 = ", isEffectMode = "
                    r2.append(r3)     // Catch:{ all -> 0x02ad }
                    r2.append(r0)     // Catch:{ all -> 0x02ad }
                    java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x02ad }
                    android.util.Log.i(r1, r2)     // Catch:{ all -> 0x02ad }
                    boolean r1 = com.szchoiceway.eventcenter.Customer.isCopilot(r7)     // Catch:{ all -> 0x02ad }
                    if (r1 == 0) goto L_0x0048
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BT     // Catch:{ all -> 0x02ad }
                    int r1 = r1.getIntValue()     // Catch:{ all -> 0x02ad }
                    if (r8 != r1) goto L_0x0048
                    java.lang.String r8 = "EventService"
                    java.lang.String r9 = "setCurModeCallback copilot bt"
                    android.util.Log.d(r8, r9)     // Catch:{ all -> 0x02ad }
                    monitor-exit(r7)     // Catch:{ all -> 0x02ad }
                    return
                L_0x0048:
                    if (r0 == 0) goto L_0x0298
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r0 = r7.mValidMode     // Catch:{ all -> 0x02ad }
                    int r0 = r0.getIntValue()     // Catch:{ all -> 0x02ad }
                    if (r0 == r8) goto L_0x0065
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r0 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.valueOf((int) r8)     // Catch:{ all -> 0x02ad }
                    r7.mValidMode = r0     // Catch:{ all -> 0x02ad }
                    r2 = 4097(0x1001, float:5.741E-42)
                    r3 = 0
                    r4 = 0
                    r5 = 0
                    r6 = 0
                    r1 = r7
                    r1.notifyValidModeEvt(r2, r3, r4, r5, r6)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcastVaildMode()     // Catch:{ all -> 0x02ad }
                L_0x0065:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r0 = r7.mValidMode     // Catch:{ all -> 0x02ad }
                    int r0 = r0.getIntValue()     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOBILE_APP     // Catch:{ all -> 0x02ad }
                    int r1 = r1.getIntValue()     // Catch:{ all -> 0x02ad }
                    if (r0 == r1) goto L_0x007b
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r0 = r7.mValidMode     // Catch:{ all -> 0x02ad }
                    int r0 = r0.getIntValue()     // Catch:{ all -> 0x02ad }
                    r7.miLastMode = r0     // Catch:{ all -> 0x02ad }
                L_0x007b:
                    r0 = 0
                    byGPSMode = r0     // Catch:{ all -> 0x02ad }
                    r7.bModeNull = r0     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r7.mValidMode     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r2 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOVIE     // Catch:{ all -> 0x02ad }
                    if (r1 == r2) goto L_0x009d
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r7.mValidMode     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r2 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC     // Catch:{ all -> 0x02ad }
                    if (r1 == r2) goto L_0x009d
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r7.mValidMode     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r2 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_RADIO     // Catch:{ all -> 0x02ad }
                    if (r1 == r2) goto L_0x009d
                    android.content.Context r1 = r7.getApplicationContext()     // Catch:{ all -> 0x02ad }
                    java.lang.String r2 = "com.choiceway.eventcenter.EventUtils.NOTIFY_WORKSPACE_PLAY_STRACK"
                    java.lang.String r3 = ""
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcast((android.content.Context) r1, (java.lang.String) r2, (java.lang.String) r3)     // Catch:{ all -> 0x02ad }
                L_0x009d:
                    java.lang.String r1 = "EventService"
                    java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x02ad }
                    r2.<init>()     // Catch:{ all -> 0x02ad }
                    java.lang.String r3 = "setCurModeCallback byGPSMode = "
                    r2.append(r3)     // Catch:{ all -> 0x02ad }
                    byte r3 = byGPSMode     // Catch:{ all -> 0x02ad }
                    r2.append(r3)     // Catch:{ all -> 0x02ad }
                    java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x02ad }
                    android.util.Log.i(r1, r2)     // Catch:{ all -> 0x02ad }
                    android.content.SharedPreferences$Editor r1 = r7.mEditor     // Catch:{ all -> 0x02ad }
                    java.lang.String r2 = "KEY_SYS_LAST_GPS_MODE"
                    r1.putInt(r2, r0)     // Catch:{ all -> 0x02ad }
                    android.content.SharedPreferences$Editor r1 = r7.mEditor     // Catch:{ all -> 0x02ad }
                    java.lang.String r2 = "KEY_SYS_LAST_MUSIC_NAVI_MODE"
                    r1.putInt(r2, r0)     // Catch:{ all -> 0x02ad }
                    android.content.SharedPreferences$Editor r1 = r7.mEditor     // Catch:{ all -> 0x02ad }
                    java.lang.String r2 = "KEY_SYS_LAST_QUICK_ACCESS_1_MODE"
                    r1.putInt(r2, r0)     // Catch:{ all -> 0x02ad }
                    android.content.SharedPreferences$Editor r1 = r7.mEditor     // Catch:{ all -> 0x02ad }
                    java.lang.String r2 = "KEY_SYS_LAST_QUICK_ACCESS_2_MODE"
                    r1.putInt(r2, r0)     // Catch:{ all -> 0x02ad }
                    r7.SaveSystemData()     // Catch:{ all -> 0x02ad }
                    r7.mValidModeCallbackfn = r9     // Catch:{ all -> 0x02ad }
                    android.os.Handler r9 = r7.mEventHandler     // Catch:{ all -> 0x02ad }
                    r1 = 256(0x100, float:3.59E-43)
                    r9.removeMessages(r1)     // Catch:{ all -> 0x02ad }
                    int r9 = r7.m_iUITypeVer     // Catch:{ all -> 0x02ad }
                    r1 = 41
                    r2 = 1
                    if (r9 != r1) goto L_0x0193
                    r7.kill3rdMusicAPK()     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r9 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOBILE_APP     // Catch:{ all -> 0x02ad }
                    int r9 = r9.getIntValue()     // Catch:{ all -> 0x02ad }
                    if (r8 == r9) goto L_0x013b
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r9 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_CARPLAY     // Catch:{ all -> 0x02ad }
                    int r9 = r9.getIntValue()     // Catch:{ all -> 0x02ad }
                    if (r8 != r9) goto L_0x00f8
                    goto L_0x013b
                L_0x00f8:
                    java.lang.String r8 = "EventService"
                    java.lang.String r9 = "--->>> SRC_MOBILE_APP kill"
                    android.util.Log.i(r8, r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r8 = "net.easyconn"
                    com.szchoiceway.eventcenter.EventUtils.killProcess(r8)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.choiceway.eventcenter.KSW_STOP_BTMUSIC_SWITCH_PHONELINK"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.zjinnova.zlink"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "command"
                    java.lang.String r1 = "SILENT"
                    r8.putExtra(r9, r1)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.liaoyuan.mylink.action"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "command"
                    java.lang.String r1 = "SILENT"
                    r8.putExtra(r9, r1)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.szchoiceway.eventcenter.KSW_ORIGINAL_START"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    goto L_0x0164
                L_0x013b:
                    java.lang.String r8 = "EventService"
                    java.lang.String r9 = "--->>> SRC_MOBILE_APP open"
                    android.util.Log.i(r8, r9)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.zjinnova.zlink"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "command"
                    java.lang.String r1 = "SILENT_BREAK"
                    r8.putExtra(r9, r1)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.liaoyuan.mylink.action"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "command"
                    java.lang.String r1 = "SILENT_BREAK"
                    r8.putExtra(r9, r1)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                L_0x0164:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r8 = r7.mValidMode     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r9 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BT     // Catch:{ all -> 0x02ad }
                    if (r8 == r9) goto L_0x0182
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r8 = r7.mValidMode     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r9 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOBILE_APP     // Catch:{ all -> 0x02ad }
                    if (r8 != r9) goto L_0x0171
                    goto L_0x0182
                L_0x0171:
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.choiceway.eventcenter.ZHTY_PHONELINK_UNMUTE"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.choiceway.eventcenter.ZHTY_PHONELINK_UNMUTE_DATA"
                    r8.putExtra(r9, r0)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    goto L_0x02ab
                L_0x0182:
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.choiceway.eventcenter.ZHTY_PHONELINK_UNMUTE"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.choiceway.eventcenter.ZHTY_PHONELINK_UNMUTE_DATA"
                    r8.putExtra(r9, r2)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    goto L_0x02ab
                L_0x0193:
                    r1 = 101(0x65, float:1.42E-43)
                    if (r9 == r1) goto L_0x022b
                    r1 = 48
                    if (r9 != r1) goto L_0x019d
                    goto L_0x022b
                L_0x019d:
                    r1 = 102(0x66, float:1.43E-43)
                    if (r9 != r1) goto L_0x02ab
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r9 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOBILE_APP     // Catch:{ all -> 0x02ad }
                    int r9 = r9.getIntValue()     // Catch:{ all -> 0x02ad }
                    if (r8 == r9) goto L_0x01f6
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r9 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_CARPLAY     // Catch:{ all -> 0x02ad }
                    int r9 = r9.getIntValue()     // Catch:{ all -> 0x02ad }
                    if (r8 != r9) goto L_0x01b2
                    goto L_0x01f6
                L_0x01b2:
                    java.lang.String r8 = "EventService"
                    java.lang.String r9 = "--->>> SRC_MOBILE_APP kill"
                    android.util.Log.i(r8, r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r8 = "net.easyconn"
                    com.szchoiceway.eventcenter.EventUtils.killProcess(r8)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.choiceway.eventcenter.KSW_STOP_BTMUSIC_SWITCH_PHONELINK"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.zjinnova.zlink"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "command"
                    java.lang.String r0 = "SILENT"
                    r8.putExtra(r9, r0)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.liaoyuan.mylink.action"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "command"
                    java.lang.String r0 = "SILENT"
                    r8.putExtra(r9, r0)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.szchoiceway.eventcenter.KSW_ORIGINAL_START"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    goto L_0x02ab
                L_0x01f6:
                    java.lang.String r8 = "EventService"
                    java.lang.String r9 = "--->>> SRC_MOBILE_APP open"
                    android.util.Log.i(r8, r9)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.zjinnova.zlink"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "command"
                    java.lang.String r1 = "SILENT_BREAK"
                    r8.putExtra(r9, r1)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.liaoyuan.mylink.action"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "command"
                    java.lang.String r1 = "SILENT_BREAK"
                    r8.putExtra(r9, r1)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r8 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOBILE_APP     // Catch:{ all -> 0x02ad }
                    r7.sendMode(r8, r2)     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r8 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC     // Catch:{ all -> 0x02ad }
                    r7.sendKSW_0x00_0x67(r8, r0)     // Catch:{ all -> 0x02ad }
                    goto L_0x02ab
                L_0x022b:
                    r7.onShowMusicInfo(r0)     // Catch:{ all -> 0x02ad }
                    r7.kill3rdMusicAPK()     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r9 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOBILE_APP     // Catch:{ all -> 0x02ad }
                    int r9 = r9.getIntValue()     // Catch:{ all -> 0x02ad }
                    if (r8 != r9) goto L_0x024b
                    java.lang.String r8 = "EventService"
                    java.lang.String r9 = "--->>> SRC_MOBILE_APP open"
                    android.util.Log.i(r8, r9)     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r8 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOBILE_APP     // Catch:{ all -> 0x02ad }
                    r7.sendMode(r8, r2)     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r8 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC     // Catch:{ all -> 0x02ad }
                    r7.sendKSW_0x00_0x67(r8, r0)     // Catch:{ all -> 0x02ad }
                    goto L_0x026b
                L_0x024b:
                    java.lang.String r8 = "EventService"
                    java.lang.String r9 = "--->>> SRC_MOBILE_APP kill"
                    android.util.Log.i(r8, r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r8 = "net.easyconn"
                    com.szchoiceway.eventcenter.EventUtils.killProcess(r8)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.choiceway.eventcenter.KSW_STOP_BTMUSIC_SWITCH_PHONELINK"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.szchoiceway.eventcenter.KSW_ORIGINAL_START"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                L_0x026b:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r8 = r7.mValidMode     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r9 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BT     // Catch:{ all -> 0x02ad }
                    if (r8 == r9) goto L_0x0288
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r8 = r7.mValidMode     // Catch:{ all -> 0x02ad }
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r9 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOBILE_APP     // Catch:{ all -> 0x02ad }
                    if (r8 != r9) goto L_0x0278
                    goto L_0x0288
                L_0x0278:
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.choiceway.eventcenter.ZHTY_PHONELINK_UNMUTE"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.choiceway.eventcenter.ZHTY_PHONELINK_UNMUTE_DATA"
                    r8.putExtra(r9, r0)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    goto L_0x02ab
                L_0x0288:
                    android.content.Intent r8 = new android.content.Intent     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.choiceway.eventcenter.ZHTY_PHONELINK_UNMUTE"
                    r8.<init>(r9)     // Catch:{ all -> 0x02ad }
                    java.lang.String r9 = "com.choiceway.eventcenter.ZHTY_PHONELINK_UNMUTE_DATA"
                    r8.putExtra(r9, r2)     // Catch:{ all -> 0x02ad }
                    r7.sendBroadcast(r8)     // Catch:{ all -> 0x02ad }
                    goto L_0x02ab
                L_0x0298:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r9 = r7.mValidMode     // Catch:{ all -> 0x02ad }
                    int r9 = r9.getIntValue()     // Catch:{ all -> 0x02ad }
                    if (r9 == r8) goto L_0x02ab
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r9 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_EXPLORER     // Catch:{ all -> 0x02ad }
                    int r9 = r9.getIntValue()     // Catch:{ all -> 0x02ad }
                    if (r8 != r9) goto L_0x02ab
                    r7.kill3rdMusicAPK()     // Catch:{ all -> 0x02ad }
                L_0x02ab:
                    monitor-exit(r7)     // Catch:{ all -> 0x02ad }
                    return
                L_0x02ad:
                    r8 = move-exception
                    monitor-exit(r7)     // Catch:{ all -> 0x02ad }
                    throw r8
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.setCurModeCallback(int, com.szchoiceway.eventcenter.ICallbackfn):void");
            }

            public void exitCurMode(int i) {
                int i2 = i;
                synchronized (this) {
                    if (i2 == EventUtils.eSrcMode.SRC_DVR.getIntValue()) {
                        this.isDvrMode = false;
                    }
                    if (this.mValidMode.getIntValue() == i2 || (i2 == EventUtils.eSrcMode.SRC_BTMUSIC.getIntValue() && this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_BT.getIntValue())) {
                        Log.i(TAG, "exitCurMode: mValidMode.getIntValue() == mode");
                        this.mValidModeCallbackfn = null;
                        this.mValidMode = EventUtils.eSrcMode.SRC_NULL;
                        this.bModeNull = true;
                        sendMode(EventUtils.eSrcMode.SRC_NULL, false);
                        setValidModeInfor(BuildConfig.FLAVOR, BuildConfig.FLAVOR, BuildConfig.FLAVOR, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                    }
                }
            }

            public void notifyValidModeEvt(int i, int i2, int i3, byte[] bArr, String str) {
                ICallbackfn iCallbackfn = this.mValidModeCallbackfn;
                if (iCallbackfn != null) {
                    try {
                        iCallbackfn.notifyEvt(i, i2, i3, bArr, str);
                        Log.i(TAG, "<<<notifyValidModeEvt>>> iEvtMsgid = " + i + ",lParam = " + i3);
                    } catch (Exception e) {
                        if (getValidMode() == EventUtils.eSrcMode.SRC_MUSIC.getIntValue()) {
                            exitCurMode(EventUtils.eSrcMode.SRC_MUSIC.getIntValue());
                        }
                        Log.e(TAG, "notifyValidModeEvt: " + e.toString());
                    }
                }
            }

            public void beep() {
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                boolean recordBoolean = (sysProviderOpt == null || (this.m_iCanbustype == 20 && this.m_iCarstype_ID == 4 && this.m_iCarCanbusName_ID == 5)) ? false : sysProviderOpt.getRecordBoolean(SysProviderOpt.SET_TOUCH_BEEP_KEY, false);
                Log.i(TAG, "beep");
                if (recordBoolean) {
                    byte[] bArr = {6};
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                    }
                }
            }

            /* access modifiers changed from: private */
            public void startBackcar(int i) {
                Log.d(TAG, "startBackcar --- b_Original_View = " + this.b_Original_View + ", m_isOff_BackLight_KSW = " + this.m_isOff_BackLight_KSW + ", b_Conn_KSW = " + this.b_Conn_KSW + ", bBackcarCamera = " + i);
                BackcarEvent backcarEvent = this.mBackcarEvt;
                if (backcarEvent != null && (this.b_Original_View || this.m_isOff_BackLight_KSW || this.b_Conn_KSW)) {
                    backcarEvent.startBackcar(i);
                }
                BackcarEventHw backcarEventHw = this.mBackcarEvtHw;
                if (backcarEventHw == null) {
                    return;
                }
                if (this.b_Conn_KSW) {
                    sendKSW_0x00_0x7d(1);
                } else if (this.b_Original_View) {
                    sendKSW_0x00_0x7d(0);
                } else if (this.m_isOff_BackLight_KSW) {
                    backcarEventHw.startCamera(0, 0);
                }
            }

            /* access modifiers changed from: private */
            public void endBackcar() {
                Log.d(TAG, "endBackcar --- b_Original_View = " + this.b_Original_View + ", m_isOff_BackLight_KSW = " + this.m_isOff_BackLight_KSW + ", b_Conn_KSW = " + this.b_Conn_KSW);
                BackcarEvent backcarEvent = this.mBackcarEvt;
                if (backcarEvent != null) {
                    boolean z = this.b_Original_View;
                    if (!z && !this.b_Conn_KSW && !this.m_isOff_BackLight_KSW) {
                        backcarEvent.endBackcar();
                    } else if (z) {
                        boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_ORIGINAL_CAR_VIDEO_DISPLAY, true);
                        Log.d(TAG, "screen = " + recordBoolean);
                        if (!recordBoolean) {
                            this.mPowerOffEvt.showPoweroffWnd();
                        }
                    }
                }
                if (this.mBackcarEvtHw != null) {
                    Log.d(TAG, "mBackcarEventHw stopCamera");
                    if (this.b_Original_View) {
                        sendSwitchOriginaCar();
                    } else {
                        this.mBackcarEvtHw.stopCamera();
                    }
                }
            }

            public boolean GetPowerStatus() {
                return this.m_bPowerOff;
            }

            public void PowerOff(boolean z) {
                Log.i(TAG, "PowerOff: m_bPowerOff = " + this.m_bPowerOff + ",bPwrOff = " + z);
                if (this.m_bPowerOff != z) {
                    PowerOffEvt powerOffEvt = this.mPowerOffEvt;
                    if (powerOffEvt != null) {
                        powerOffEvt.PowerOff(z);
                    }
                    this.m_bPowerOff = z;
                    if (z) {
                        Log.i(TAG, "***PowerOff off ***");
                        ModePowerOff();
                        return;
                    }
                    Log.i(TAG, "***PowerOn on ***");
                    ModePowerOn();
                }
            }

            public void closeScreen(boolean z) {
                if (this.m_bPowerOff != z) {
                    PowerOffEvt powerOffEvt = this.mPowerOffEvt;
                    if (powerOffEvt != null) {
                        powerOffEvt.PowerOff(z);
                    }
                    this.m_bPowerOff = z;
                    if (z) {
                        Log.i(TAG, "***PowerOff off ***");
                        SendBlackState(true);
                        return;
                    }
                    Log.i(TAG, "***PowerOn on ***");
                    SendBlackState(false);
                }
            }

            private void ModePowerOff() {
                SendBlackState(true);
                notifyValidModeEvt(4098, 0, EventUtils.HANDLER_DVD_CONNECTED_EVT, (byte[]) null, (String) null);
            }

            private void ModePowerOn() {
                SendBlackState(false);
                notifyValidModeEvt(4098, 0, 199, (byte[]) null, (String) null);
            }

            public void BTSpeakMode() {
                if (this.m_iUITypeVer == 41 && this.ksw_m_b_acc_off) {
                    Intent intent = new Intent(EventUtils.KSW_ZXW_ACC_CONTROL_BEFORE);
                    intent.putExtra(EventUtils.KSW_ZXW_ACC_CONTROL_BEFORE_DATA, true);
                    sendBroadcast(intent);
                }
                if (!this.m_bBTSpeakMode) {
                    this.m_bBTSpeakMode = true;
                    if (!this.m_bInBackcarMode) {
                        if (this.m_iUITypeVer == 41 && this.m_isOff_BackLight_KSW) {
                            this.m_BtSpeakOnBackLight = true;
                            backLightOn_KSW();
                        }
                        notifyValidModeEvt(EventUtils.EVENT_BT_EVENT, 1, 0, (byte[]) null, (String) null);
                        if (this.m_bPowerOff) {
                            PowerOff(false);
                        }
                    }
                }
            }

            public void BTNormalMode() {
                if (this.m_bBTSpeakMode) {
                    this.m_bBTSpeakMode = false;
                    if (!this.m_bInBackcarMode) {
                        if (this.m_iUITypeVer == 41) {
                            if (this.m_BtSpeakOnBackLight) {
                                this.m_BtSpeakOnBackLight = false;
                                backLightOff_KSW();
                            }
                            this.m_btNormalDelay_KSW = true;
                            this.mEventHandler.removeMessages(EventUtils.HANDLER_BT_NORMAL_HOME_DELAY_KSW);
                            this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_BT_NORMAL_HOME_DELAY_KSW, 1000);
                        }
                        notifyValidModeEvt(EventUtils.EVENT_BT_EVENT, 0, 0, (byte[]) null, (String) null);
                    }
                }
            }

            /* access modifiers changed from: private */
            public void EnterBackcarMode() {
                getApplicationContext().sendBroadcastAsUser(new Intent(EventUtils.MCU_MSG_BACKCAR_START_EVT), UserHandle.ALL);
                this.m_bInBackcarMode = true;
            }

            /* access modifiers changed from: private */
            public void ExitBackcarMode() {
                getApplicationContext().sendBroadcastAsUser(new Intent(EventUtils.MCU_MSG_BACKCAR_END_EVT), UserHandle.ALL);
                if (this.m_bInBackcarMode) {
                    this.m_bInBackcarMode = false;
                }
            }

            public void putSettingStr(String str, String str2) {
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    sysProviderOpt.updateRecord(str, str2);
                }
            }

            public void putSettingInt(String str, int i) {
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    sysProviderOpt.updateRecord(str, BuildConfig.FLAVOR + i);
                }
            }

            public void putSettingLong(String str, long j) {
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    sysProviderOpt.updateRecord(str, BuildConfig.FLAVOR + j);
                }
            }

            public void putSettingFloat(String str, float f) {
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    sysProviderOpt.updateRecord(str, BuildConfig.FLAVOR + f);
                }
            }

            public void putSettingBoolean(String str, boolean z) {
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    sysProviderOpt.updateRecord(str, BuildConfig.FLAVOR + (z ? 1 : 0));
                }
            }

            public boolean getSettingBoolean(String str, boolean z) {
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    return sysProviderOpt.getRecordBoolean(str, z);
                }
                return this.mSettings.getBoolean(str, z);
            }

            public float getSettingFloat(String str, float f) {
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    return sysProviderOpt.getRecordFloat(str, f);
                }
                return this.mSettings.getFloat(str, f);
            }

            public int getSettingInt(String str, int i) {
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    return sysProviderOpt.getRecordInteger(str, i);
                }
                return this.mSettings.getInt(str, i);
            }

            public long getSettingLong(String str, long j) {
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    return sysProviderOpt.getRecordLong(str, j);
                }
                return this.mSettings.getLong(str, j);
            }

            public String getSettingString(String str, String str2) {
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    return sysProviderOpt.getRecordValue(str, str2);
                }
                return this.mSettings.getString(str, str2);
            }

            public void sendTouchPos(int i, int i2, boolean z, boolean z2) {
                if (i != 0 || i2 != 0) {
                    Log.d(TAG, "--->>> sendTouchPos: x = " + i + ", y = " + i2 + ", down = " + z + ", longClick = " + z2);
                    byte b = 1;
                    if (z) {
                        if (!this.b_Conn_KSW) {
                            b = this.b_Original_View ? (byte) 2 : 0;
                        }
                        sendKSW_0x00_0x6B(b, i, i2, z2 ? 1 : 0);
                        return;
                    }
                    if (!this.b_Conn_KSW) {
                        b = this.b_Original_View ? (byte) 2 : 0;
                    }
                    sendKSW_0x00_0x6B(b, i, i2, 2);
                }
            }

            public void sendMenuTouchPos(int i, int i2, boolean z) {
                Log.d(TAG, "sendMenuTouchPos x = " + i + ", y = " + i2 + ", down = " + z);
                if (i == 2012) {
                    byte[] bArr = new byte[6];
                    bArr[0] = -14;
                    bArr[1] = 0;
                    bArr[2] = EventUtils.CMD_MCU_INIT;
                    bArr[3] = 2;
                    if (!z) {
                        bArr[4] = 0;
                        bArr[5] = 0;
                    } else if (i2 <= 455 && i2 >= 437) {
                        bArr[4] = 4;
                        bArr[5] = 0;
                    } else if (i2 <= 505 && i2 >= 488) {
                        bArr[4] = 1;
                        bArr[5] = 0;
                    } else if (i2 <= 560 && i2 >= 540) {
                        bArr[4] = 8;
                        bArr[5] = 0;
                    } else if (i2 <= 645) {
                    }
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                    }
                }
            }

            public int getValidMode() {
                return this.mValidMode.getIntValue();
            }

            public void SendFactorySet() {
                byte BIT_ON = this.m_bBackcarSnd ? (byte) EventUtils.BIT_ON(0, 5) : 0;
                this.bLEDColorSetStatus = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_LEDCOLOR_SET_KEY, this.bLEDColorSetStatus);
                this.m_bZhongJiPan = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_FAT_SET_ZHONGJIPAN, this.m_bZhongJiPan);
                this.bGPSMix = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_GPSMIXSET_KEY, this.bGPSMix);
                this.m_bBackcarSnd = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_BACKCAR_SND, this.m_bBackcarSnd);
                this.m_bBackcarSndAtt = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_BACKCAR_SND_ATT, this.m_bBackcarSndAtt);
                this.mAmbientLight = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_BAMBIENT_LIGHT, this.mAmbientLight);
                byte BIT_ON2 = this.bLEDColorSetStatus ? (byte) EventUtils.BIT_ON(0, 0) : 0;
                if (this.m_bZhongJiPan) {
                    BIT_ON2 = (byte) EventUtils.BIT_ON(BIT_ON2, 1);
                }
                SendFactorySetToMCU((byte) this.m_iCanbustype, BIT_ON, (byte) 0, this.bGPSMix ? (byte) EventUtils.BIT_ON(0, 2) : 0, (byte) 0, BIT_ON2);
                Send8844SetToMCU();
                SaveConfig();
            }

            public void Send8844SetToMCU() {
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SYS_FACTORY_SET_MCU_SET_8844_CHOICE_TYPE, 0);
                Log.i(TAG, "Send8844SetToMCU: i8844ChoiceType = " + recordInteger);
                byte[] bArr = {16, 0, 0, (byte) recordInteger, 0, 0, 0};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void SendFactorySetToMCU(byte b, byte b2, byte b3, byte b4, byte b5, byte b6) {
                int i;
                int i2;
                int i3;
                int i4;
                int i5;
                byte[] bArr = new byte[11];
                bArr[0] = 15;
                if (b == 4) {
                    Log.i(TAG, "Send8844SetToMCU: byCarTyte = " + b);
                    bArr[1] = 0;
                } else if (b == 1) {
                    bArr[1] = 19;
                } else if (b == 56) {
                    bArr[1] = -113;
                } else {
                    bArr[1] = b;
                }
                byte BIT_ON = (byte) (EventUtils.BIT_ON(0, 4) & 255);
                Log.i(TAG, "SendFactorySetToMCU: m_bBackcarSnd = " + this.m_bBackcarSnd);
                if (this.m_bBackcarSnd) {
                    BIT_ON = (byte) (EventUtils.BIT_ON(BIT_ON, 5) & 255);
                }
                if (this.m_bBackcarSndAtt) {
                    BIT_ON = (byte) (EventUtils.BIT_ON(BIT_ON, 6) & 255);
                }
                bArr[2] = BIT_ON;
                bArr[3] = b3;
                Log.i(TAG, "SendFactorySetToMCU: m_iBTTypeVer = " + this.m_iBTTypeVer);
                if (this.m_iBTTypeVer == 3) {
                    i = EventUtils.BIT_ON(0, 4);
                } else {
                    i = EventUtils.BIT_OFF(0, 4);
                }
                byte b7 = (byte) (i & 255);
                Log.i(TAG, "SendFactorySetToMCU: mcuSetByte3 = " + b7);
                EventUtils.BIT_OFF(b4, 5);
                bArr[4] = b7;
                bArr[5] = (byte) (EventUtils.BIT_OFF(b5, 6) & 255);
                if (this.mAmbientLight) {
                    i2 = EventUtils.BIT_ON(b6, 4);
                } else {
                    i2 = EventUtils.BIT_OFF(b6, 4);
                }
                bArr[6] = (byte) (i2 & 255);
                bArr[7] = 1;
                if (this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_FACTORY_SET_MCU_SET_6752_CHOICE_TYPE, false)) {
                    i3 = EventUtils.BIT_ON(0, 7);
                } else {
                    i3 = EventUtils.BIT_OFF(0, 7);
                }
                byte b8 = (byte) (i3 & 255);
                bArr[8] = b8;
                Log.i(TAG, "Send8844SetToMCU: byTmp = " + b8);
                bArr[9] = 0;
                int i6 = this.m_iBTTypeVer;
                if (i6 == 9 || i6 == 10) {
                    i4 = EventUtils.BIT_ON(0, 0);
                } else {
                    i4 = EventUtils.BIT_OFF(0, 0);
                }
                byte b9 = (byte) (i4 & 255);
                boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_SLEEP_SWITCH, false);
                Log.i(TAG, "SendFactorySetToMCU: supportSleep = " + recordBoolean);
                if (recordBoolean) {
                    i5 = EventUtils.BIT_ON(b9, 4);
                } else {
                    i5 = EventUtils.BIT_OFF(b9, 4);
                }
                bArr[10] = (byte) (i5 & 255);
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void sendSystemKey(int i) {
                Log.i("sendSystemKey ", "sendSystemKey send: " + i);
                byte[] bArr = {8, (byte) i};
                if (this.m_iUITypeVer == 42 && i == 12) {
                    AudioManager audioManager2 = (AudioManager) getSystemService("audio");
                    IsMuteOn();
                    if (this.bMuteOn) {
                        audioManager2.setStreamMute(3, false);
                    } else {
                        audioManager2.setStreamMute(3, true);
                    }
                }
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void sendEQMode(int i) {
                Log.i(TAG, "sendEQMode: mode = " + i);
                byte[] bArr = {9, (byte) i};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void SendAudioSetToMCU(int i, int i2, int i3, int i4, int i5, int i6) {
                byte[] bArr = {34, (byte) i, (byte) i2, (byte) i3, (byte) i4, (byte) i5, (byte) i6};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
                SendAudioSetToMCU_0x40();
            }

            public void SendAudioSetToMCU_0x40() {
                int settingInt = getSettingInt(EventUtils.KEY_AUDIO_SETTING_0X40, 0);
                Log.i(TAG, "SendAudioSetToMCU_0x40: iAudioVal = " + settingInt);
                byte[] bArr = new byte[7];
                bArr[0] = 64;
                bArr[1] = 17;
                bArr[2] = (byte) settingInt;
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void setSysMainVol(byte b) {
                IsMuteOn();
                if (!this.bMuteOn) {
                    this.iMainVal = b;
                    Log.i(TAG, "--->>> XingShuo --> vol = " + b);
                    SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                    sysProviderOpt.updateRecord(SysProviderOpt.SYS_MUSIC_VOL_VAL_XINGSHUO, BuildConfig.FLAVOR + this.iMainVal);
                }
            }

            public void sendSetup(byte b, byte b2) {
                byte[] bArr = {5, b, b2};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
                Log.i("sendSetup ", "--->>> Vol sendSetup send: " + EventUtils.bytesToHexString(bArr));
            }

            public void sendBTState(byte b) {
                byte[] bArr = {11, b};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
                byte b2 = b & 255;
                notifyValidModeEvt(EventUtils.EVENT_BT_EVENT, b2 >= 4 ? 1 : 0, b2, (byte[]) null, (String) null);
            }

            public void SendWheelKey(int i) {
                byte[] bArr = {7, (byte) i};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void SendSysRTCTimeMCU(int i, int i2, int i3, int i4, int i5, int i6) {
                byte[] bArr = {19, (byte) i, (byte) i2, (byte) i3, (byte) i4, (byte) i5, (byte) i6};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void SendDVRKey(byte b) {
                byte[] bArr = {29, b};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void SendMainVol(byte b) {
                byte[] bArr = {34, b};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void SendBLVal(byte b, byte b2) {
                if (this.m_iUITypeVer == 41) {
                    sendKSW_0x00_0x6C(b);
                    return;
                }
                Log.i(TAG, "--->>> iBLVal = " + b);
                Log.i(TAG, "--->>> iNBLVal = " + b2);
                putSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, b);
                putSettingInt(EventUtils.KEY_NBRIGHTNESS_SETTINGS, b2);
                byte[] bArr = {46, b, b2};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void SendBALFADVal(byte b, byte b2) {
                byte[] bArr = {47, b, b2};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void SendBlackState(boolean z) {
                byte[] bArr = new byte[2];
                bArr[0] = 31;
                if (z) {
                    bArr[1] = 0;
                } else {
                    bArr[1] = 1;
                }
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void SendGPSVolToMCU(byte b) {
                byte[] bArr = {38, b};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public int LoadNLightVal() {
                SharedPreferences sharedPreferences = this.mSettings;
                if (sharedPreferences != null) {
                    return sharedPreferences.getInt(EventUtils.KEY_NBRIGHTNESS_SETTINGS, 0);
                }
                return 0;
            }

            public boolean IsBrakeConneted() {
                return this.mBreakConnected;
            }

            public boolean IsBackcarConnected() {
                return this.mBackcarConnected;
            }

            public int getMacanSignalState() {
                return this.iMcanSignalState;
            }

            public boolean IsMCUUpgradeWriteErr() {
                return this.m_bMcuWriteError;
            }

            public boolean IsDiscConneted() {
                Log.i(TAG, "--->>> IsDiscConneted mDiscInDVD = " + this.mDiscInDVD);
                return this.mDiscInDVD;
            }

            public void SetVideoCH(int i) {
                BackcarEvent backcarEvent = this.mBackcarEvt;
                if (backcarEvent != null) {
                    backcarEvent.setSignalChannal(i);
                }
            }

            public void SetDVDVideoCH(int i) {
                if (i == 8) {
                    BackcarEvent backcarEvent = this.mBackcarEvt;
                    if (backcarEvent != null) {
                        backcarEvent.setDVDSignalChannal();
                        return;
                    }
                    return;
                }
                BackcarEvent backcarEvent2 = this.mBackcarEvt;
                if (backcarEvent2 != null) {
                    backcarEvent2.closeDVDSignalChannal();
                }
            }

            public int GetSignalStatus() {
                if (this.mCurrSendMode.getIntValue() == EventUtils.eSrcMode.SRC_AUX.getIntValue()) {
                    if (this.use_RN6752 == 1) {
                        return 1;
                    }
                    BackcarEvent backcarEvent = this.mBackcarEvt;
                    if (backcarEvent != null) {
                        return backcarEvent.GetSignalStatus();
                    }
                }
                BackcarEvent backcarEvent2 = this.mBackcarEvt;
                if (backcarEvent2 != null) {
                    return backcarEvent2.GetSignalStatus();
                }
                return 0;
            }

            public void OpenVideo(boolean z) {
                BackcarEvent backcarEvent = this.mBackcarEvt;
                if (backcarEvent != null) {
                    backcarEvent.setVehicle(z);
                }
            }

            public void SetVideoSize(int i, int i2, int i3, int i4) {
                BackcarEvent backcarEvent = this.mBackcarEvt;
                if (backcarEvent != null) {
                    backcarEvent.setVehicleSize(i, i2, i3, i4);
                }
            }

            public boolean IsMuteOn() {
                Log.i(TAG, "*****bMuteOn*****=  " + this.bMuteOn);
                return this.bMuteOn;
            }

            public void sendCanbusData(byte[] bArr) {
                if (this.m_iUITypeVer != 41 && bArr != null && bArr.length > 0) {
                    byte[] bArr2 = new byte[(bArr.length + 2)];
                    bArr2[0] = 13;
                    bArr2[1] = 8;
                    System.arraycopy(bArr, 0, bArr2, 2, bArr.length);
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr2);
                    }
                }
            }

            public int getSecFromPosition(int i) {
                int i2 = i / 60;
                if ((i2 / 60) / 1000 > 0) {
                    int i3 = (i / 1000) % 60;
                    int i4 = (i / 60000) % 60;
                    int i5 = (i / 3600000) % 24;
                    return i3;
                } else if (i2 / 1000 <= 0) {
                    return (i / 1000) % 60;
                } else {
                    int i6 = (i / 1000) % 60;
                    int i7 = (i / 60000) % 60;
                    return i6;
                }
            }

            public int getMinFromPosition(int i) {
                int i2 = i / 60;
                if ((i2 / 60) / 1000 > 0) {
                    int i3 = (i / 1000) % 60;
                    int i4 = (i / 60000) % 60;
                    int i5 = (i / 3600000) % 24;
                    return i4;
                } else if (i2 / 1000 > 0) {
                    int i6 = (i / 1000) % 60;
                    return (i / 60000) % 60;
                } else {
                    int i7 = (i / 1000) % 60;
                    return 0;
                }
            }

            public int getHourFromPosition(int i) {
                int i2 = i / 60;
                if ((i2 / 60) / 1000 > 0) {
                    int i3 = (i / 1000) % 60;
                    int i4 = (i / 60000) % 60;
                    int i5 = (i / 3600000) % 24;
                    return 0;
                } else if (i2 / 1000 > 0) {
                    int i6 = (i / 1000) % 60;
                    int i7 = (i / 60000) % 60;
                    return 0;
                } else {
                    int i8 = (i / 1000) % 60;
                    return 0;
                }
            }

            public void setValidModeInfor(String str, String str2, String str3, int i, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9) {
                this.mStValidInfor.strTitle = str;
                this.mStValidInfor.strAblum = str2;
                this.mStValidInfor.strArtist = str3;
                this.mStValidInfor.iCurTrack = i;
                this.mStValidInfor.iTotTrack = i2;
                this.mStValidInfor.iCurFolder = i3;
                this.mStValidInfor.iTotFolder = i4;
                this.mStValidInfor.iCurTime = i5;
                this.mStValidInfor.iTotTime = i6;
                this.mStValidInfor.iLoopMode = i7;
                this.mStValidInfor.iRepeatMode = i8;
                this.mStValidInfor.iPlayStatus = i9;
                getApplicationContext().sendBroadcastAsUser(new Intent(EventUtils.VALID_MODE_INFOR_CHANGE), UserHandle.ALL);
            }

            public String getValidModeTitleInfor() {
                return this.mStValidInfor.strTitle;
            }

            public String getValidModeAblumInfor() {
                return this.mStValidInfor.strAblum;
            }

            public String getValidModeArtistInfor() {
                return this.mStValidInfor.strArtist;
            }

            public int getValidCurTrack() {
                return this.mStValidInfor.iCurTrack;
            }

            public int getValidTotTrack() {
                return this.mStValidInfor.iTotTrack;
            }

            public int getValidCurTime() {
                return this.mStValidInfor.iCurTime;
            }

            public int getValidTotTime() {
                return this.mStValidInfor.iTotTime;
            }

            public int getValidCurFolder() {
                return this.mStValidInfor.iCurFolder;
            }

            public int getValidTotFolder() {
                return this.mStValidInfor.iTotFolder;
            }

            public int getValidLoopMode() {
                return this.mStValidInfor.iLoopMode;
            }

            public int getValidRepeatMode() {
                return this.mStValidInfor.iRepeatMode;
            }

            public int getValidPlayStatus() {
                return this.mStValidInfor.iPlayStatus;
            }

            public void sendUserFreq(int i) {
                Log.i(TAG, "sendUserFreq Freq .......=  " + i);
                byte[] bArr = {12, (byte) ((i >> 8) & 255), (byte) (i & 255)};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public byte getMainVolval() {
                return this.iMainVal;
            }

            public byte getBassVal() {
                return this.iBassVal;
            }

            public byte getTrebleVal() {
                return this.iTrebleVal;
            }

            public byte getMiddleVal() {
                return this.iMiddleVal;
            }

            public byte getBassFre() {
                return this.iBassFre;
            }

            public byte getMiddleFre() {
                return this.iMiddleFre;
            }

            public byte getTrebleFre() {
                return this.iTrebleFre;
            }

            public byte getBALVal() {
                return this.iBALVal;
            }

            public byte getFADVal() {
                return this.iFADVal;
            }

            public byte getEQMode() {
                return this.iEQMode;
            }

            public byte getUserBassVal() {
                return this.iUserBassVal;
            }

            public byte getUserTrebleVal() {
                return this.iUserTrebleVal;
            }

            public byte getUserMiddleVal() {
                return this.iUserMiddleVal;
            }

            public boolean getMuteStatus() {
                return this.bMuteStatus;
            }

            public boolean getLoudStatus() {
                return this.bLoudOn;
            }

            public void SetCurrDim(int i) {
                this.m_iCurrDim = i;
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    sysProviderOpt.updateRecord(SysProviderOpt.SET_DIM_LIGHT_KEY, BuildConfig.FLAVOR + this.m_iCurrDim);
                }
                sendToOSData();
            }

            public int GetCurrDim() {
                return this.m_iCurrDim;
            }

            public void setMcuInitStatus(boolean z) {
                this.bMcuInitComplete = z;
            }

            public boolean getMcuInitStatus() {
                return this.bMcuInitComplete;
            }

            public void enterUpgradeMode() {
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.enterUpgradeMode();
                }
                DialogRepairMcu dialogRepairMcu = this.mDialogRepairMcu;
                if (dialogRepairMcu != null && dialogRepairMcu.showDialog) {
                    this.mDialogRepairMcu.hideDialog();
                }
            }

            public void exitUpgradeMode() {
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.exitUpgradeMode();
                }
            }

            public boolean sendMcuUpgradeMode() {
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    return sendThread.sendMcuUpgradeMode();
                }
                return false;
            }

            public boolean sendMcuUpgradeMode(int i) {
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    return sendThread.sendMcuUpgradeMode(i);
                }
                return false;
            }

            public void responseCanUpgradeMode() {
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.responseCanUpgradeMode();
                }
            }

            public void responseCanUpgradeEvent(byte b) {
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.responseCanUpgradeEvent(b);
                }
            }

            public void responseCanUpgradeDataEvent(byte b) {
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.responseCanUpgradeDataEvent(b);
                }
            }

            public boolean sendMcuUpgradeData(long j, byte[] bArr, int i, int i2, boolean z) {
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    return sendThread.sendMcuUpgradeData(j, bArr, i, i2, z);
                }
                return false;
            }

            public boolean Send8902McuUpgradeData(byte[] bArr, int i) {
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    return sendThread.Send8902McuUpgradeData(bArr, i);
                }
                return false;
            }

            public boolean isUpgradeMode() {
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    return sendThread.isMcuUpgradeMode();
                }
                return false;
            }

            public boolean isCanUpgradeMode() {
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    return sendThread.isCanUpgradeMode();
                }
                return false;
            }

            public boolean onLongClick(View view2) {
                int i;
                switch (view2.getId()) {
                    case R.id.BtnHome:
                        sendBroadcast(new Intent("com.szchoiceway.action.SHOW_TASK_LIST"));
                        break;
                    case R.id.BtnSetCityCode:
                        EventUtils.startActivityIfNotRuning(this, "com.szchoiceway.index", "com.szchoiceway.index.WeatherSetActivity");
                        break;
                    case R.id.ImgBtnGyroView1:
                        reset3DGyro();
                        break;
                    case R.id.btnBottomAir:
                        i = 8;
                        break;
                    case R.id.btnBottomAutoPark:
                        i = 10;
                        break;
                    case R.id.btnBottomBluetooth:
                        i = 6;
                        break;
                    case R.id.btnBottomDvr:
                        i = 4;
                        break;
                    case R.id.btnBottomHome:
                        i = 2;
                        break;
                    case R.id.btnBottomMedia:
                        i = 7;
                        break;
                    case R.id.btnBottomNavi:
                        i = 5;
                        break;
                    case R.id.btnBottomPKey:
                        i = 9;
                        break;
                    case R.id.btnBottomPower:
                        i = 11;
                        break;
                    case R.id.btnBottomReturn:
                        i = 1;
                        break;
                    case R.id.btnBottomSetting:
                        i = 3;
                        break;
                }
                i = 0;
                sendKSW_0x00_0x78(i, 1);
                return true;
            }

            /* JADX WARNING: Code restructure failed: missing block: B:28:0x00cd, code lost:
                r11 = false;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:54:0x01e3, code lost:
                r11 = false;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:55:0x01e4, code lost:
                r2 = 0;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:56:0x01e5, code lost:
                sendKSW_0x00_0x78(r2, 0);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:57:0x01e8, code lost:
                if (r11 == false) goto L_0x01f8;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:58:0x01ea, code lost:
                r10.mEventHandler.removeMessages(1024);
                r10.mEventHandler.sendEmptyMessageDelayed(1024, 400);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:59:0x01f8, code lost:
                refreshFocusView();
             */
            /* JADX WARNING: Code restructure failed: missing block: B:60:0x01ff, code lost:
                if (r10.m_iUITypeVer != 102) goto L_?;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:61:0x0201, code lost:
                r11 = r10.mImitateOriginalCarUiIndex;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:62:0x0203, code lost:
                if (r11 == 1) goto L_0x020d;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:63:0x0205, code lost:
                if (r11 == 2) goto L_0x020d;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:64:0x0207, code lost:
                if (r11 == 3) goto L_0x020d;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:65:0x0209, code lost:
                if (r11 == 4) goto L_0x020d;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:66:0x020b, code lost:
                if (r11 != 5) goto L_?;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:67:0x020d, code lost:
                r10.bInLeftFocus = true;
                processAutoKey(21);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:68:?, code lost:
                return;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:69:?, code lost:
                return;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:70:?, code lost:
                return;
             */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void onClick(android.view.View r11) {
                /*
                    r10 = this;
                    int r11 = r11.getId()
                    java.lang.String r0 = "Navi_FullscreenMode"
                    r1 = 5
                    r2 = 8
                    r3 = 6
                    java.lang.String r4 = "EventService"
                    r5 = 4
                    r6 = 3
                    r7 = 2
                    r8 = 0
                    r9 = 1
                    switch(r11) {
                        case 2131230734: goto L_0x01de;
                        case 2131230739: goto L_0x01da;
                        case 2131230740: goto L_0x01d6;
                        case 2131230741: goto L_0x01d2;
                        case 2131230742: goto L_0x019c;
                        case 2131230743: goto L_0x0166;
                        case 2131230744: goto L_0x012e;
                        case 2131230745: goto L_0x0127;
                        case 2131230750: goto L_0x011b;
                        case 2131230752: goto L_0x010a;
                        case 2131230806: goto L_0x00d0;
                        case 2131230879: goto L_0x00cd;
                        case 2131230881: goto L_0x00cb;
                        case 2131230882: goto L_0x00c7;
                        case 2131230884: goto L_0x00c3;
                        case 2131230885: goto L_0x00bf;
                        case 2131230886: goto L_0x00bd;
                        case 2131230887: goto L_0x00b9;
                        case 2131230889: goto L_0x00b6;
                        case 2131230890: goto L_0x00ab;
                        case 2131230892: goto L_0x00a7;
                        case 2131230893: goto L_0x00a3;
                        case 2131230900: goto L_0x0098;
                        case 2131230901: goto L_0x008d;
                        case 2131230902: goto L_0x0088;
                        case 2131230903: goto L_0x0083;
                        case 2131230975: goto L_0x0023;
                        default: goto L_0x0014;
                    }
                L_0x0014:
                    boolean r11 = mIsAddFloatingMenuView
                    if (r11 == 0) goto L_0x01e3
                    android.view.WindowManager r11 = wm
                    android.view.View r0 = mFloatingMenuWndView
                    r11.removeView(r0)
                    mIsAddFloatingMenuView = r8
                    goto L_0x01e3
                L_0x0023:
                    java.lang.StringBuilder r11 = new java.lang.StringBuilder
                    r11.<init>()
                    java.lang.String r0 = "onClick: floatButton-mFloatingMenuWndView = "
                    r11.append(r0)
                    android.view.View r0 = mFloatingMenuWndView
                    r11.append(r0)
                    java.lang.String r11 = r11.toString()
                    android.util.Log.i(r4, r11)
                    java.lang.StringBuilder r11 = new java.lang.StringBuilder
                    r11.<init>()
                    java.lang.String r0 = "onClick: floatButton-mFloatingButtonWndView = "
                    r11.append(r0)
                    android.view.View r0 = mFloatingButtonWndView
                    r11.append(r0)
                    java.lang.String r11 = r11.toString()
                    android.util.Log.i(r4, r11)
                    android.view.View r11 = mFloatingMenuWndView
                    if (r11 == 0) goto L_0x01e3
                    boolean r11 = mIsAddFloatingMenuView
                    if (r11 != 0) goto L_0x01e3
                    android.view.WindowManager$LayoutParams r11 = new android.view.WindowManager$LayoutParams
                    r11.<init>()
                    r0 = 2003(0x7d3, float:2.807E-42)
                    r11.type = r0
                    int r0 = r11.flags
                    r0 = r0 | r2
                    r11.flags = r0
                    r0 = 51
                    r11.gravity = r0
                    r0 = 100
                    r11.x = r0
                    r0 = 500(0x1f4, float:7.0E-43)
                    r11.y = r0
                    r0 = -2
                    r11.width = r0
                    r11.height = r0
                    r11.format = r9
                    android.view.WindowManager r0 = wm
                    android.view.View r2 = mFloatingMenuWndView
                    r0.addView(r2, r11)
                    mIsAddFloatingMenuView = r9
                    goto L_0x01e3
                L_0x0083:
                    r10.sendKeyDownUpSync(r5)
                    goto L_0x01e3
                L_0x0088:
                    r10.sendKeyDownUpSync(r6)
                    goto L_0x01e3
                L_0x008d:
                    com.szchoiceway.eventcenter.SysProviderOpt r11 = r10.mSysProviderOpt
                    if (r11 == 0) goto L_0x01e3
                    java.lang.String r2 = "0"
                    r11.updateRecord(r0, r2)
                    goto L_0x01e3
                L_0x0098:
                    com.szchoiceway.eventcenter.SysProviderOpt r11 = r10.mSysProviderOpt
                    if (r11 == 0) goto L_0x01e3
                    java.lang.String r2 = "1"
                    r11.updateRecord(r0, r2)
                    goto L_0x01e3
                L_0x00a3:
                    r11 = 0
                    r2 = 3
                    goto L_0x01e5
                L_0x00a7:
                    r11 = 0
                    r2 = 1
                    goto L_0x01e5
                L_0x00ab:
                    java.lang.String r11 = "onClick: btnBottomPower"
                    android.util.Log.i(r4, r11)
                    r2 = 11
                    r10.backLightOff_KSW()
                    goto L_0x00cd
                L_0x00b6:
                    r2 = 9
                    goto L_0x00cd
                L_0x00b9:
                    r11 = 0
                    r2 = 5
                    goto L_0x01e5
                L_0x00bd:
                    r2 = 7
                    goto L_0x00cd
                L_0x00bf:
                    r11 = 0
                    r2 = 2
                    goto L_0x01e5
                L_0x00c3:
                    r11 = 0
                    r2 = 4
                    goto L_0x01e5
                L_0x00c7:
                    r11 = 0
                    r2 = 6
                    goto L_0x01e5
                L_0x00cb:
                    r2 = 10
                L_0x00cd:
                    r11 = 0
                    goto L_0x01e5
                L_0x00d0:
                    r10.m_iCurrFocus = r9
                    com.szchoiceway.eventcenter.SysProviderOpt r11 = r10.mSysProviderOpt
                    java.lang.String r0 = "Sys_WifiPasswordSwitch"
                    boolean r11 = r11.getRecordBoolean(r0, r8)
                    java.lang.StringBuilder r0 = new java.lang.StringBuilder
                    r0.<init>()
                    java.lang.String r2 = "bWifiPasswordSwitch: "
                    r0.append(r2)
                    r0.append(r11)
                    java.lang.String r0 = r0.toString()
                    android.util.Log.i(r4, r0)
                    if (r11 == 0) goto L_0x00f9
                    java.lang.String r11 = "com.szchoiceway.settings"
                    java.lang.String r0 = "com.szchoiceway.settings.wifi.WifiMainActivity"
                    com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning(r10, r11, r0)
                    goto L_0x01e3
                L_0x00f9:
                    android.content.Intent r11 = new android.content.Intent
                    java.lang.String r0 = "android.settings.WIFI_SETTINGS"
                    r11.<init>(r0)
                    r0 = 270532608(0x10200000, float:3.1554436E-29)
                    r11.setFlags(r0)
                    r10.startActivity(r11)
                    goto L_0x01e3
                L_0x010a:
                    r10.m_iCurrFocus = r8
                    java.lang.String r11 = r10.mCurTopClassName
                    java.lang.String r0 = "com.szchoiceway.auxplayer.MainActivity_HDMI"
                    boolean r11 = r11.equals(r0)
                    if (r11 != 0) goto L_0x01e3
                    com.szchoiceway.eventcenter.EventUtils.startVoice(r10)
                    goto L_0x01e3
                L_0x011b:
                    android.content.Intent r11 = new android.content.Intent
                    java.lang.String r0 = "com.szchoiceway.eventcenter.EventUtils.ACTION_SHOW_TASK_LIST"
                    r11.<init>(r0)
                    r10.sendBroadcast(r11)
                    goto L_0x01e3
                L_0x0127:
                    r10.m_iCurrFocus = r6
                    r10.sendKeyDownUpSync(r5)
                    goto L_0x01e3
                L_0x012e:
                    java.util.List<android.content.pm.ResolveInfo> r11 = r10.mRecentTasks
                    int r11 = r11.size()
                    if (r11 <= r7) goto L_0x0158
                    android.content.Context r11 = r10.getApplicationContext()
                    java.util.List<android.content.pm.ResolveInfo> r0 = r10.mRecentTasks
                    java.lang.Object r0 = r0.get(r7)
                    android.content.pm.ResolveInfo r0 = (android.content.pm.ResolveInfo) r0
                    android.content.pm.ActivityInfo r0 = r0.activityInfo
                    java.lang.String r0 = r0.packageName
                    java.util.List<android.content.pm.ResolveInfo> r2 = r10.mRecentTasks
                    java.lang.Object r2 = r2.get(r7)
                    android.content.pm.ResolveInfo r2 = (android.content.pm.ResolveInfo) r2
                    android.content.pm.ActivityInfo r2 = r2.activityInfo
                    java.lang.String r2 = r2.name
                    boolean r11 = com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning2(r11, r0, r2)
                    goto L_0x01e4
                L_0x0158:
                    android.content.Context r11 = r10.getApplicationContext()
                    java.lang.String r0 = "com.szchoiceway.videoplayer"
                    java.lang.String r2 = "com.szchoiceway.videoplayer.MainActivity"
                    boolean r11 = com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning2(r11, r0, r2)
                    goto L_0x01e4
                L_0x0166:
                    java.util.List<android.content.pm.ResolveInfo> r11 = r10.mRecentTasks
                    int r11 = r11.size()
                    if (r11 <= r9) goto L_0x018f
                    android.content.Context r11 = r10.getApplicationContext()
                    java.util.List<android.content.pm.ResolveInfo> r0 = r10.mRecentTasks
                    java.lang.Object r0 = r0.get(r9)
                    android.content.pm.ResolveInfo r0 = (android.content.pm.ResolveInfo) r0
                    android.content.pm.ActivityInfo r0 = r0.activityInfo
                    java.lang.String r0 = r0.packageName
                    java.util.List<android.content.pm.ResolveInfo> r2 = r10.mRecentTasks
                    java.lang.Object r2 = r2.get(r9)
                    android.content.pm.ResolveInfo r2 = (android.content.pm.ResolveInfo) r2
                    android.content.pm.ActivityInfo r2 = r2.activityInfo
                    java.lang.String r2 = r2.name
                    boolean r11 = com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning2(r11, r0, r2)
                    goto L_0x01e4
                L_0x018f:
                    android.content.Context r11 = r10.getApplicationContext()
                    java.lang.String r0 = "com.szchoiceway.musicplayer"
                    java.lang.String r2 = "com.szchoiceway.musicplayer.MainActivity"
                    boolean r11 = com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning2(r11, r0, r2)
                    goto L_0x01e4
                L_0x019c:
                    java.util.List<android.content.pm.ResolveInfo> r11 = r10.mRecentTasks
                    int r11 = r11.size()
                    if (r11 <= 0) goto L_0x01c5
                    android.content.Context r11 = r10.getApplicationContext()
                    java.util.List<android.content.pm.ResolveInfo> r0 = r10.mRecentTasks
                    java.lang.Object r0 = r0.get(r8)
                    android.content.pm.ResolveInfo r0 = (android.content.pm.ResolveInfo) r0
                    android.content.pm.ActivityInfo r0 = r0.activityInfo
                    java.lang.String r0 = r0.packageName
                    java.util.List<android.content.pm.ResolveInfo> r2 = r10.mRecentTasks
                    java.lang.Object r2 = r2.get(r8)
                    android.content.pm.ResolveInfo r2 = (android.content.pm.ResolveInfo) r2
                    android.content.pm.ActivityInfo r2 = r2.activityInfo
                    java.lang.String r2 = r2.name
                    boolean r11 = com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning2(r11, r0, r2)
                    goto L_0x01e4
                L_0x01c5:
                    android.content.Context r11 = r10.getApplicationContext()
                    java.lang.String r0 = "com.szchoiceway.navigation"
                    java.lang.String r2 = "com.szchoiceway.navigation.MainActivity"
                    boolean r11 = com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning2(r11, r0, r2)
                    goto L_0x01e4
                L_0x01d2:
                    r10.ProcessCanKey(r6)
                    goto L_0x01e3
                L_0x01d6:
                    r10.ProcessCanKey(r3)
                    goto L_0x01e3
                L_0x01da:
                    r10.ProcessCanKey(r7)
                    goto L_0x01e3
                L_0x01de:
                    r10.m_iCurrFocus = r7
                    r10.sendKeyDownUpSync(r6)
                L_0x01e3:
                    r11 = 0
                L_0x01e4:
                    r2 = 0
                L_0x01e5:
                    r10.sendKSW_0x00_0x78(r2, r8)
                    if (r11 == 0) goto L_0x01f8
                    android.os.Handler r11 = r10.mEventHandler
                    r0 = 1024(0x400, float:1.435E-42)
                    r11.removeMessages(r0)
                    android.os.Handler r11 = r10.mEventHandler
                    r2 = 400(0x190, double:1.976E-321)
                    r11.sendEmptyMessageDelayed(r0, r2)
                L_0x01f8:
                    r10.refreshFocusView()
                    int r11 = r10.m_iUITypeVer
                    r0 = 102(0x66, float:1.43E-43)
                    if (r11 != r0) goto L_0x0214
                    int r11 = r10.mImitateOriginalCarUiIndex
                    if (r11 == r9) goto L_0x020d
                    if (r11 == r7) goto L_0x020d
                    if (r11 == r6) goto L_0x020d
                    if (r11 == r5) goto L_0x020d
                    if (r11 != r1) goto L_0x0214
                L_0x020d:
                    r10.bInLeftFocus = r9
                    r11 = 21
                    r10.processAutoKey(r11)
                L_0x0214:
                    return
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.onClick(android.view.View):void");
            }

            public void sendDataToMcu(byte[] bArr) {
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void refresh4gLevel(int i) {
                View view2 = this.mIv4gLevel;
                if (view2 != null) {
                    view2.setBackgroundResource(this.m4gLevelViews[i]);
                }
            }

            public class SendThread extends Thread {
                private final int TYPE_MCU_UPDATE_78 = 1;
                private final int TYPE_MCU_UPDATE_7A = 0;
                private final int TYPE_MCU_UPDATE_7G = 2;
                private final int TYPE_MCU_UPDATE_8A = 3;
                boolean bReceiveAckCmd = false;
                byte mCanResponseEvent = 0;
                byte mCanUpgradeEvent = 0;
                Object mEventObj = new Object();
                boolean mExitThread = false;
                boolean mInCanUpgradeMode = false;
                boolean mInMcuUpgradeMode = false;
                boolean mMcuWriteError = false;
                boolean mUpgradeReady = false;
                LinkedList<byte[]> mVtDataLst = new LinkedList<>();
                boolean mWaitMcuResponse = false;

                public SendThread() {
                }

                /* JADX WARNING: Code restructure failed: missing block: B:11:0x0015, code lost:
                    return;
                 */
                /* Code decompiled incorrectly, please refer to instructions dump. */
                public void notifyToSend(byte[] r2) {
                    /*
                        r1 = this;
                        monitor-enter(r1)
                        boolean r0 = r1.mInMcuUpgradeMode     // Catch:{ all -> 0x0016 }
                        if (r0 != 0) goto L_0x0014
                        boolean r0 = r1.mInCanUpgradeMode     // Catch:{ all -> 0x0016 }
                        if (r0 == 0) goto L_0x000a
                        goto L_0x0014
                    L_0x000a:
                        java.util.LinkedList<byte[]> r0 = r1.mVtDataLst     // Catch:{ all -> 0x0016 }
                        r0.add(r2)     // Catch:{ all -> 0x0016 }
                        r1.notify()     // Catch:{ all -> 0x0016 }
                        monitor-exit(r1)     // Catch:{ all -> 0x0016 }
                        return
                    L_0x0014:
                        monitor-exit(r1)     // Catch:{ all -> 0x0016 }
                        return
                    L_0x0016:
                        r2 = move-exception
                        monitor-exit(r1)     // Catch:{ all -> 0x0016 }
                        throw r2
                    */
                    throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.SendThread.notifyToSend(byte[]):void");
                }

                public void exit() {
                    synchronized (this) {
                        this.mExitThread = true;
                        notifyAll();
                        this.mEventObj.notifyAll();
                    }
                }

                public void responseACK() {
                    synchronized (this.mEventObj) {
                        this.bReceiveAckCmd = true;
                        this.mEventObj.notifyAll();
                    }
                }

                public void enterUpgradeMode() {
                    synchronized (this.mEventObj) {
                        this.mInMcuUpgradeMode = true;
                    }
                }

                public void exitUpgradeMode() {
                    synchronized (this.mEventObj) {
                        this.mInMcuUpgradeMode = false;
                    }
                }

                public void enterCanUpgradeMode() {
                    synchronized (this.mEventObj) {
                        this.mInCanUpgradeMode = true;
                    }
                }

                public void exitCanUpgradeMode() {
                    synchronized (this.mEventObj) {
                        this.mInCanUpgradeMode = false;
                    }
                }

                public boolean isCanUpgradeMode() {
                    return this.mInCanUpgradeMode;
                }

                public boolean isMcuUpgradeMode() {
                    return this.mInMcuUpgradeMode;
                }

                public void responseMcuWriteError() {
                    synchronized (this.mEventObj) {
                        this.mUpgradeReady = true;
                        this.mMcuWriteError = true;
                        this.mEventObj.notifyAll();
                    }
                }

                public void responseMcuWriteSuccess() {
                    synchronized (this.mEventObj) {
                        this.mUpgradeReady = true;
                        this.mMcuWriteError = false;
                        this.mEventObj.notifyAll();
                    }
                }

                public void responseCanUpgradeMode() {
                    synchronized (this.mEventObj) {
                        this.mUpgradeReady = true;
                        this.mEventObj.notifyAll();
                    }
                }

                public void responseCanUpgradeEvent(byte b) {
                    this.mCanResponseEvent = b;
                }

                public void responseCanUpgradeDataEvent(byte b) {
                    synchronized (this.mEventObj) {
                        this.mCanUpgradeEvent = b;
                        this.mEventObj.notifyAll();
                    }
                }

                public boolean isInWaitMcuReponseMode() {
                    return this.mWaitMcuResponse;
                }

                /* access modifiers changed from: package-private */
                public boolean sendMcuUpgradeMode() {
                    boolean z;
                    this.mUpgradeReady = false;
                    byte[] bArr = {14, EventUtils.CMD_MAIN_VOL};
                    synchronized (this.mEventObj) {
                        sendData(bArr);
                        try {
                            this.mEventObj.wait(4000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        z = this.mUpgradeReady;
                    }
                    return z;
                }

                /* access modifiers changed from: package-private */
                public boolean sendMcuUpgradeMode(int i) {
                    boolean z;
                    this.mUpgradeReady = false;
                    byte[] bArr = new byte[2];
                    bArr[0] = 14;
                    if (i == 3) {
                        bArr[1] = -116;
                    } else if (i == 1) {
                        bArr[1] = -67;
                    } else if (i == 2) {
                        bArr[1] = EventUtils.CMD_MAIN_VOL;
                    } else {
                        bArr[1] = -84;
                    }
                    synchronized (this.mEventObj) {
                        sendData(bArr);
                        try {
                            this.mEventObj.wait(4000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        z = this.mUpgradeReady;
                    }
                    return z;
                }

                public boolean Send8902McuUpgradeData(byte[] bArr, int i) {
                    byte[] bArr2 = new byte[i];
                    for (int i2 = 0; i2 < i; i2++) {
                        bArr2[i2] = bArr[i2];
                    }
                    sendData(bArr2);
                    return false;
                }

                /* access modifiers changed from: package-private */
                public boolean sendMcuUpgradeData(long j, byte[] bArr, int i, int i2, boolean z) {
                    int i3 = 64;
                    int i4 = i2;
                    if (i4 > 64) {
                        i4 = 64;
                    }
                    int i5 = i4 + 7;
                    byte[] bArr2 = new byte[i5];
                    long j2 = j + PlaybackStateCompat.ACTION_PREPARE;
                    bArr2[0] = -86;
                    bArr2[1] = (byte) ((int) ((j2 >> 16) & 255));
                    bArr2[2] = (byte) ((int) ((j2 >> 8) & 255));
                    bArr2[3] = (byte) ((int) (255 & j2));
                    bArr2[4] = (byte) (j2 <= 49151 ? 1 : 0);
                    if (z) {
                        i3 = 6;
                    }
                    bArr2[5] = (byte) i3;
                    System.arraycopy(bArr, i, bArr2, 6, i4);
                    int i6 = i5 - 1;
                    bArr2[i6] = 0;
                    for (int i7 = 0; i7 <= i5 - 2; i7++) {
                        bArr2[i6] = (byte) (bArr2[i6] + bArr2[i7]);
                    }
                    this.mUpgradeReady = false;
                    synchronized (this.mEventObj) {
                        this.mMcuWriteError = true;
                        Log.i("mcu", EventUtils.bytesToHexString(bArr2));
                        sendData(bArr2);
                        try {
                            this.mEventObj.wait(2000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        if (!this.mMcuWriteError) {
                            return true;
                        }
                        return false;
                    }
                }

                /*  JADX ERROR: IndexOutOfBoundsException in pass: RegionMakerVisitor
                    java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
                    	at java.util.ArrayList.rangeCheck(ArrayList.java:659)
                    	at java.util.ArrayList.get(ArrayList.java:435)
                    	at jadx.core.dex.nodes.InsnNode.getArg(InsnNode.java:101)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:611)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverseMonitorExits(RegionMaker.java:619)
                    	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:561)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
                    	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
                    	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:693)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:123)
                    	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
                    	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:698)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:123)
                    	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
                    	at jadx.core.dex.visitors.regions.RegionMaker.processIf(RegionMaker.java:698)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:123)
                    	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
                    	at jadx.core.dex.visitors.regions.RegionMaker.processMonitorEnter(RegionMaker.java:598)
                    	at jadx.core.dex.visitors.regions.RegionMaker.traverse(RegionMaker.java:133)
                    	at jadx.core.dex.visitors.regions.RegionMaker.makeRegion(RegionMaker.java:86)
                    	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:49)
                    */
                public void sendDataWaitAck(byte[] r5) {
                    /*
                        r4 = this;
                        java.lang.Object r0 = r4.mEventObj
                        monitor-enter(r0)
                        r1 = 0
                        r4.bReceiveAckCmd = r1     // Catch:{ all -> 0x0051 }
                        monitor-enter(r4)     // Catch:{ all -> 0x0051 }
                        r4.sendData(r5)     // Catch:{ all -> 0x004e }
                        monitor-exit(r4)     // Catch:{ all -> 0x004e }
                        boolean r1 = r4.mExitThread     // Catch:{ all -> 0x0051 }
                        if (r1 == 0) goto L_0x0011
                        monitor-exit(r0)     // Catch:{ all -> 0x0051 }
                        return
                    L_0x0011:
                        java.lang.Object r1 = r4.mEventObj     // Catch:{ InterruptedException -> 0x0042 }
                        r2 = 500(0x1f4, double:2.47E-321)
                        r1.wait(r2)     // Catch:{ InterruptedException -> 0x0042 }
                        boolean r1 = r4.mExitThread     // Catch:{ InterruptedException -> 0x0042 }
                        if (r1 == 0) goto L_0x001e
                        monitor-exit(r0)     // Catch:{ all -> 0x0051 }
                        return
                    L_0x001e:
                        boolean r1 = r4.bReceiveAckCmd     // Catch:{ InterruptedException -> 0x0042 }
                        if (r1 != 0) goto L_0x004c
                        monitor-enter(r4)     // Catch:{ InterruptedException -> 0x0042 }
                        r4.sendData(r5)     // Catch:{ all -> 0x003f }
                        monitor-exit(r4)     // Catch:{ all -> 0x003f }
                        java.lang.Object r1 = r4.mEventObj     // Catch:{ InterruptedException -> 0x0042 }
                        r1.wait(r2)     // Catch:{ InterruptedException -> 0x0042 }
                        boolean r1 = r4.mExitThread     // Catch:{ InterruptedException -> 0x0042 }
                        if (r1 == 0) goto L_0x0032
                        monitor-exit(r0)     // Catch:{ all -> 0x0051 }
                        return
                    L_0x0032:
                        boolean r1 = r4.bReceiveAckCmd     // Catch:{ InterruptedException -> 0x0042 }
                        if (r1 != 0) goto L_0x004c
                        monitor-enter(r4)     // Catch:{ InterruptedException -> 0x0042 }
                        r4.sendData(r5)     // Catch:{ all -> 0x003c }
                        monitor-exit(r4)     // Catch:{ all -> 0x003c }
                        goto L_0x004c
                    L_0x003c:
                        r5 = move-exception
                        monitor-exit(r4)     // Catch:{ all -> 0x003c }
                        throw r5     // Catch:{ InterruptedException -> 0x0042 }
                    L_0x003f:
                        r5 = move-exception
                        monitor-exit(r4)     // Catch:{ all -> 0x003f }
                        throw r5     // Catch:{ InterruptedException -> 0x0042 }
                    L_0x0042:
                        r5 = move-exception
                        java.lang.String r1 = "EventService"
                        java.lang.String r5 = r5.toString()     // Catch:{ all -> 0x0051 }
                        android.util.Log.e(r1, r5)     // Catch:{ all -> 0x0051 }
                    L_0x004c:
                        monitor-exit(r0)     // Catch:{ all -> 0x0051 }
                        return
                    L_0x004e:
                        r5 = move-exception
                        monitor-exit(r4)     // Catch:{ all -> 0x004e }
                        throw r5     // Catch:{ all -> 0x0051 }
                    L_0x0051:
                        r5 = move-exception
                        monitor-exit(r0)     // Catch:{ all -> 0x0051 }
                        throw r5
                    */
                    throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.SendThread.sendDataWaitAck(byte[]):void");
                }

                public void run() {
                    while (!this.mExitThread) {
                        try {
                            synchronized (this) {
                                wait();
                                if (!this.mExitThread) {
                                    while (this.mVtDataLst.size() > 0) {
                                        sendData(this.mVtDataLst.getFirst());
                                        this.mVtDataLst.removeFirst();
                                    }
                                } else {
                                    return;
                                }
                            }
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }

                /* access modifiers changed from: package-private */
                public int Comm_CulCrc(byte[] bArr) {
                    int i = (bArr[0] * 256) + 4 + bArr[1];
                    byte b = bArr[0] & 255;
                    byte b2 = bArr[1] & 255;
                    for (int i2 = 2; i2 < i; i2++) {
                        if (i2 % 2 == 0) {
                            b ^= bArr[i2] & 255;
                        } else {
                            b2 ^= bArr[i2] & 255;
                        }
                    }
                    return (b * 256) + b2;
                }

                public void sendData(byte[] bArr) {
                    if (bArr != null && bArr.length != 0) {
                        if (EventService.this.m_iUITypeVer != 41) {
                            byte[] bArr2 = new byte[(bArr.length + 5)];
                            bArr2[0] = 13;
                            bArr2[1] = 10;
                            bArr2[2] = (byte) ((bArr.length + 1) & 255);
                            byte b = bArr2[2];
                            for (int i = 0; i < bArr.length; i++) {
                                int i2 = i + 3;
                                bArr2[i2] = bArr[i];
                                b = (byte) (b + bArr2[i2]);
                            }
                            bArr2[bArr.length + 3] = (byte) (~b);
                            bArr2[bArr.length + 4] = 0;
                            ByteBuffer.wrap(bArr2);
                            SerialPortManager.instance().sendData(bArr2);
                        } else if (bArr.length < 2 || bArr[0] != -14) {
                        } else {
                            if (bArr[1] == -96) {
                                sendDataKSW_McuUpgrade(bArr);
                            } else {
                                sendDataKSW(bArr);
                            }
                        }
                    }
                }

                public void sendDataKSW(byte[] bArr) {
                    if (bArr != null && bArr.length >= 5) {
                        byte[] bArr2 = new byte[(bArr.length + 1)];
                        bArr2[0] = bArr[0];
                        bArr2[1] = bArr[1];
                        bArr2[2] = bArr[2];
                        bArr2[3] = (byte) ((bArr.length - 4) & 255);
                        byte b = (byte) (bArr2[1] + bArr2[2] + bArr2[3]);
                        for (int i = 0; i < bArr.length - 4; i++) {
                            int i2 = i + 4;
                            bArr2[i2] = bArr[i2];
                            b = (byte) (b + bArr2[i2]);
                        }
                        bArr2[bArr.length] = (byte) (b ^ 255);
                        ByteBuffer.wrap(bArr2);
                        SerialPortManager.instance().sendData(bArr2);
                    }
                }

                public void sendDataKSW_McuUpgrade(byte[] bArr) {
                    if (bArr != null && bArr.length >= 5) {
                        byte[] bArr2 = new byte[(bArr.length + 1)];
                        bArr2[0] = bArr[0];
                        bArr2[1] = bArr[1];
                        bArr2[2] = bArr[2];
                        bArr2[3] = (byte) ((bArr.length - 4) & 255);
                        int i = (bArr2[1] & 255) + (bArr2[2] & 255) + (bArr2[3] & 255);
                        for (int i2 = 0; i2 < bArr.length - 4; i2++) {
                            int i3 = i2 + 4;
                            bArr2[i3] = bArr[i3];
                            i += bArr2[i3] & 255;
                        }
                        bArr2[bArr.length] = (byte) (i ^ 255);
                        Log.d(EventService.TAG, "byChecksum = " + i);
                        ByteBuffer.wrap(bArr2);
                        SerialPortManager.instance().sendData(bArr2);
                    }
                }
            }

            public void SendDataUpgradeMode(byte[] bArr) {
                if (bArr != null && bArr.length != 0) {
                    byte[] bArr2 = new byte[(bArr.length + 5)];
                    bArr2[0] = 13;
                    bArr2[1] = 10;
                    bArr2[2] = (byte) ((bArr.length + 1) & 255);
                    byte b = bArr2[2];
                    for (int i = 0; i < bArr.length; i++) {
                        int i2 = i + 3;
                        bArr2[i2] = bArr[i];
                        b = (byte) (b + bArr2[i2]);
                    }
                    bArr2[bArr.length + 3] = (byte) (~b);
                    bArr2[bArr.length + 4] = 0;
                    ByteBuffer.wrap(bArr2);
                    Log.i(TAG, "SendDataUpgradeMode: " + EventUtils.bytesToHexString(bArr2));
                    SerialPortManager.instance().sendData(bArr2);
                }
            }

            public void SendDataNoFrameHead(byte[] bArr) {
                ByteBuffer.wrap(bArr);
                SerialPortManager.instance().sendData(bArr);
            }

            public void SendBLVal2(byte b, byte b2) {
                byte[] bArr = {46, b, b2};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            /* access modifiers changed from: private */
            public void sendCHWYMcuVersionData(byte b) {
                byte[] bArr = {EventUtils.MCU_KEY_SYS_WINCE, 1, b};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void broadcastSettings() {
                SysProviderOpt sysProviderOpt;
                int i;
                SharedPreferences sharedPreferences = this.mSettings;
                if (sharedPreferences != null) {
                    int i2 = sharedPreferences.getInt(EventUtils.KEY_STANDBY_SETTINGS, 0);
                    Intent intent = new Intent("zxw.intent.action.standby_setting");
                    intent.putExtra("zxw.intent.action.standby_setting_extra", i2);
                    getApplicationContext().sendBroadcast(intent);
                }
                if ((Build.VERSION.SDK_INT > 19 || (i = this.m_iUITypeVer) == 101 || i == 48) && (sysProviderOpt = this.mSysProviderOpt) != null) {
                    this.bIsShowVolumeBarFatSet = sysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_VOLUME_BAR, this.bIsShowVolumeBarFatSet);
                    Intent intent2 = new Intent(EventUtils.ACTION_ICON_DISPLAY);
                    intent2.putExtra(EventUtils.EXTRA_SHOW_VOLUME_BAR, this.bIsShowVolumeBarFatSet);
                    getApplicationContext().sendBroadcast(intent2);
                }
                if (this.m_iUITypeVer == 102) {
                    Intent intent3 = new Intent(EventUtils.ACTION_ICON_DISPLAY);
                    intent3.putExtra(EventUtils.EXTRA_SHOW_VOLUME_BAR, this.bIsShowVolumeBarFatSet);
                    getApplicationContext().sendBroadcast(intent3);
                }
            }

            public void NotifyBTStatus(int i) {
                if (this.mConnectMode == 3 && i > 3) {
                    int validMode = getValidMode();
                    Log.d(TAG, "onCarletterTelephoneStateChanged currentMode = " + validMode);
                }
                if (i > 3) {
                    if (isAuxMode() || this.currentType == 3) {
                        this.speakWhenAUXBT = true;
                        exitAux();
                    }
                } else if (this.speakWhenAUXBT) {
                    this.speakWhenAUXBT = false;
                    if (!this.show360Dialog) {
                        Log.d(TAG, "backAux bt");
                        backAux();
                    }
                }
                if (i >= 3) {
                    if (!this.m_isBtConnected) {
                        this.m_isBtConnected = true;
                        Intent intent = new Intent(EventUtils.KSW_ZXW_BT_CONNECED_SHOW_VIEW);
                        intent.putExtra(EventUtils.KSW_ZXW_BT_CONNECED_SHOW_VIEW_DATA, this.m_isBtConnected);
                        sendBroadcast(intent);
                        Intent intent2 = new Intent("com.szchoiceway.eventcenter.EventUtils.BT_STATE");
                        intent2.putExtra("bt_state", 1);
                        sendBroadcast(intent2);
                    }
                } else if (this.m_isBtConnected) {
                    this.m_isBtConnected = false;
                    Intent intent3 = new Intent(EventUtils.KSW_ZXW_BT_CONNECED_SHOW_VIEW);
                    intent3.putExtra(EventUtils.KSW_ZXW_BT_CONNECED_SHOW_VIEW_DATA, this.m_isBtConnected);
                    sendBroadcast(intent3);
                    Intent intent4 = new Intent("com.szchoiceway.eventcenter.EventUtils.BT_STATE");
                    intent4.putExtra("bt_state", 0);
                    sendBroadcast(intent4);
                }
                if (i > 3 && this.m_iBTStatus <= 3) {
                    Intent intent5 = new Intent(EventUtils.ZXW_ACTION_BT_PHONE_CALL_INTERFACE);
                    intent5.putExtra(EventUtils.ZXW_ACTION_BT_PHONE_CALL_INTERFACE_EXTRA, 1);
                    sendBroadcast(intent5);
                }
                if (i <= 3 && this.m_iBTStatus > 3) {
                    Intent intent6 = new Intent(EventUtils.ZXW_ACTION_BT_PHONE_CALL_INTERFACE);
                    intent6.putExtra(EventUtils.ZXW_ACTION_BT_PHONE_CALL_INTERFACE_EXTRA, 0);
                    sendBroadcast(intent6);
                }
                refreshBtStatus(this.m_isBtConnected);
                this.m_iBTStatus = i;
                if (i <= 3 && this.mShowLRPhonePage) {
                    this.mShowLRPhonePage = false;
                }
                if (i > 3) {
                    if (this.mShowTxzIcon) {
                        EventUtils.showTXZIcon(this, false);
                    }
                } else if (!this.bZlinkCarplayConnected && !this.mShowTxzIcon) {
                    EventUtils.showTXZIcon(this, true);
                }
            }

            public int getBTStatus() {
                return this.m_iBTStatus;
            }

            public void switchMode() {
                Log.d(TAG, "switchMode m_bInBackcarMode = " + this.m_bInBackcarMode + ", b_Original_View = " + this.b_Original_View);
                if (!this.m_bInBackcarMode && !this.b_Original_View) {
                    boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_HAVE_AUX, false);
                    boolean recordBoolean2 = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_HAVE_TV, false);
                    int recordInteger = this.mSysProviderOpt.getRecordInteger("KESAIWEI_RECORD_BT_INDEX", 0);
                    Log.i(TAG, "switchMode mValidMode = " + this.mValidMode.getIntValue() + ", getValidMode = " + getValidMode());
                    ArrayList arrayList = new ArrayList();
                    arrayList.add(EventUtils.eSrcMode.SRC_MUSIC);
                    if (recordBoolean && !isUpgradeMode()) {
                        arrayList.add(EventUtils.eSrcMode.SRC_AUX);
                    }
                    arrayList.add(EventUtils.eSrcMode.SRC_MOVIE);
                    if (recordBoolean2 && !isUpgradeMode()) {
                        arrayList.add(EventUtils.eSrcMode.SRC_CMMB);
                    }
                    if (recordInteger != 1) {
                        arrayList.add(EventUtils.eSrcMode.SRC_BT);
                    }
                    int intValue = ((EventUtils.eSrcMode) arrayList.get(0)).getIntValue();
                    int indexOf = arrayList.indexOf(this.mValidMode);
                    if (indexOf != -1) {
                        int i = indexOf + 1;
                        if (i < arrayList.size()) {
                            intValue = ((EventUtils.eSrcMode) arrayList.get(i)).getIntValue();
                        } else {
                            intValue = ((EventUtils.eSrcMode) arrayList.get(0)).getIntValue();
                        }
                    }
                    Log.d(TAG, "nextMode = " + intValue);
                    Log.d(TAG, "modeList = " + arrayList);
                    postRunModeActivity(intValue);
                }
            }

            public void DIMMode() {
                int LoadNLightVal = LoadNLightVal();
                int i = this.m_iCurrDim + 1;
                this.m_iCurrDim = i;
                if (i > 2) {
                    this.m_iCurrDim = 0;
                }
                int i2 = this.m_iCurrDim;
                if (i2 == 0) {
                    SendBlackState(false);
                    SendBLVal((byte) 20, (byte) LoadNLightVal);
                } else if (i2 == 1) {
                    SendBlackState(false);
                    SendBLVal((byte) 8, (byte) LoadNLightVal);
                } else if (i2 == 2) {
                    SendBlackState(true);
                    this.m_iCurrDim = -1;
                }
                SetCurrDim(this.m_iCurrDim);
            }

            public void ProcessCanKey(int i) {
                byte b = (byte) i;
                Log.i(TAG, "---->>> byTempKey = " + b);
                if (b == -14) {
                    EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.MUSIC_MODE_PACKAGE_NAME, EventUtils.MUSIC_MODE_CLASS_NAME);
                } else if (b == -13) {
                    EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.MOVIE_MODE_PACKAGE_NAME, EventUtils.MOVIE_MODE_CLASS_NAME);
                } else if (b != -9) {
                    if (b == -5) {
                        closeScreen(!GetPowerStatus());
                    } else if (b != -1) {
                        if (b != 6) {
                            if (b == 9) {
                                Log.i(TAG, "--->>> KeyEvent.KEYCODE_HOME 666");
                                sendKeyDownUpSync(3);
                            } else if (b != 48) {
                                if (b == 72) {
                                    EventUtils.startActivityIfNotRuning(getApplicationContext(), "com.szchoiceway.auxplayer", "com.szchoiceway.auxplayer.MainActivity");
                                } else if (b != 85) {
                                    if (b == 1) {
                                        PowerOff(!GetPowerStatus());
                                        Log.i(TAG, "--->>> BRZH PowerOff 444");
                                    } else if (b == 2) {
                                        sendBroadcast(new Intent(EventUtils.DDBOX_KEY_NEXT));
                                        Log.i(TAG, "ProcessCanKey: bModeNull = " + this.bModeNull);
                                        if (this.bModeNull) {
                                            sendKeyDownUpSync(87);
                                        } else {
                                            notifyModeKeyEvt(i);
                                        }
                                    } else if (b == 3) {
                                        sendBroadcast(new Intent(EventUtils.DDBOX_KEY_PREV));
                                        if (this.bModeNull) {
                                            sendKeyDownUpSync(88);
                                        } else {
                                            notifyModeKeyEvt(i);
                                        }
                                    } else if (b != 4) {
                                        if (b != 54) {
                                            if (b == 55) {
                                                Log.i(TAG, "--->>> KSW NAV 000");
                                                if (this.m_iUITypeVer == 41) {
                                                    String recordValue = this.mSysProviderOpt.getRecordValue(SysProviderOpt.NAV_PACKAGENAME, "com.szchoiceway.navigation");
                                                    String recordValue2 = this.mSysProviderOpt.getRecordValue(SysProviderOpt.NAV_ACTIVITYNAME, EventUtils.NAV_MODE_CLASS_NAME);
                                                    Log.d(TAG, "navPackage = " + recordValue + ", navActivity = " + recordValue2);
                                                    EventUtils.startActivityIfNotRuning(getApplicationContext(), recordValue, recordValue2);
                                                    return;
                                                } else if (byGPSMode == 0) {
                                                    byGPSMode = 1;
                                                    EventUtils.startActivityIfNotRuning(getApplicationContext(), "com.szchoiceway.navigation", EventUtils.NAV_MODE_CLASS_NAME);
                                                    return;
                                                } else {
                                                    byGPSMode = 0;
                                                    ExecuteLastMode();
                                                    return;
                                                }
                                            } else if (b == 59) {
                                                EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.BT_MODE_PACKAGE_NAME, EventUtils.BT_MODE_CLASS_NAME);
                                                return;
                                            } else if (b == 60) {
                                                EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.BT_MODE_PACKAGE_NAME, EventUtils.BTMUSIC_MODE_CLASS_NAME);
                                                return;
                                            } else if (b == 112) {
                                                this.mEventHandler.removeMessages(257);
                                                this.mEventHandler.sendEmptyMessage(257);
                                                return;
                                            } else if (b != 113) {
                                                switch (b) {
                                                    case 14:
                                                        break;
                                                    case 15:
                                                        if (this.miLastMode != EventUtils.eSrcMode.SRC_DVD.getIntValue() && IsDiscConneted()) {
                                                            sendSystemKey(15);
                                                            return;
                                                        }
                                                        return;
                                                    case 16:
                                                        switchMode();
                                                        return;
                                                    case 17:
                                                        EventUtils.sendSysBroadcast(getApplicationContext(), EventUtils.ZXW_SYS_KEY_EVT, 17);
                                                        return;
                                                    case 18:
                                                        EventUtils.sendSysBroadcast(getApplicationContext(), EventUtils.ZXW_SYS_KEY_EVT, 18);
                                                        return;
                                                    case 19:
                                                        EventUtils.sendSysBroadcast(getApplicationContext(), EventUtils.ZXW_SYS_KEY_EVT, 19);
                                                        return;
                                                    case 20:
                                                        EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.SET_MODE_PACKAGE_NAME, EventUtils.SET_MODE_CLASS_NAME);
                                                        return;
                                                    case 21:
                                                        SendBlackState(true);
                                                        this.m_iCurrDim = -1;
                                                        SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                                                        if (sysProviderOpt != null) {
                                                            sysProviderOpt.updateRecord(SysProviderOpt.SET_DIM_LIGHT_KEY, BuildConfig.FLAVOR + this.m_iCurrDim);
                                                            return;
                                                        }
                                                        return;
                                                    case 22:
                                                        int i2 = this.m_iCanbustype;
                                                        if (i2 == 17 || i2 == 28) {
                                                            int i3 = this.m_iCarstype_ID;
                                                        }
                                                        EventUtils.sendBTBroadcast(getApplicationContext(), EventUtils.MCU_KEY_INFOR_ACTION, 22);
                                                        return;
                                                    case 23:
                                                        if (getBTStatus() <= 3 && this.mValidMode != EventUtils.eSrcMode.SRC_BT) {
                                                            EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.BT_MODE_PACKAGE_NAME, EventUtils.BT_MODE_CLASS_NAME);
                                                        }
                                                        EventUtils.sendBTBroadcast(getApplicationContext(), EventUtils.MCU_KEY_INFOR_ACTION, 23);
                                                        return;
                                                    default:
                                                        switch (b) {
                                                            case 29:
                                                                Log.d(TAG, "MCU_KEY_REPEAT mValidMode" + this.mValidMode);
                                                                if (this.mValidMode != EventUtils.eSrcMode.SRC_MUSIC && this.mValidMode != EventUtils.eSrcMode.SRC_MOVIE) {
                                                                    Log.d(TAG, "notifyValidModeEvt");
                                                                    notifyValidModeEvt(4098, 0, 29, (byte[]) null, (String) null);
                                                                    return;
                                                                }
                                                                return;
                                                            case 30:
                                                                notifyValidModeEvt(4098, 0, 30, (byte[]) null, (String) null);
                                                                return;
                                                            case 31:
                                                                notifyValidModeEvt(4098, 0, 31, (byte[]) null, (String) null);
                                                                return;
                                                            default:
                                                                return;
                                                        }
                                                }
                                            } else if (this.m_iUITypeVer == 36) {
                                                if (this.m_bInBackcarMode || this.mLeftRightAndBackCamera <= 0) {
                                                    notifyCloseAvmLeftRightBack();
                                                    return;
                                                } else if (byGPSMode == 0) {
                                                    byGPSMode = 1;
                                                    EventUtils.startActivityIfNotRuning(getApplicationContext(), "com.szchoiceway.navigation", EventUtils.NAV_MODE_CLASS_NAME);
                                                    return;
                                                } else {
                                                    byGPSMode = 0;
                                                    ExecuteLastMode();
                                                    return;
                                                }
                                            } else if (this.m_iCanbustype != 21 || this.m_iCarstype_ID != 4 || this.m_iCarCanbusName_ID != 2) {
                                                SendAvmMode(2);
                                                return;
                                            } else if (!this.mBackcarConnected) {
                                                endBackcar();
                                                Log.i(TAG, "--->>> KSW endBackCar 000");
                                                return;
                                            } else {
                                                return;
                                            }
                                        }
                                        if (this.mValidMode != EventUtils.eSrcMode.SRC_RADIO || this.bModeNull || this.bModeHome) {
                                            this.bModeHome = false;
                                            if (EventUtils.getInstallStatus(getApplicationContext(), EventUtils.RADIO_DSP_MODE_PACKAGE_NAME)) {
                                                EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.RADIO_DSP_MODE_PACKAGE_NAME, EventUtils.RADIO_DSP_MODE_CLASS_NAME);
                                            } else {
                                                EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.RADIO_MODE_PACKAGE_NAME, EventUtils.RADIO_MODE_CLASS_NAME);
                                            }
                                        }
                                    } else if (this.bModeNull) {
                                        sendKeyDownUpSync(85);
                                    } else {
                                        notifyModeKeyEvt(i);
                                    }
                                } else if (this.mTelephoneState == 0 && this.m_iBTStatus <= 3 && !this.bZlinkCarplayPhoneOn && !isAuxMode360()) {
                                    sendKeyDownUpSync(4);
                                }
                            } else if (!this.mCurTopClassName.equals("com.szchoiceway.auxplayer.MainActivity_HDMI")) {
                                EventUtils.startVoice(this);
                            }
                        } else if (this.bModeNull) {
                            sendKeyDownUpSync(85);
                        } else {
                            notifyModeKeyEvt(i);
                        }
                    } else if (this.bModeNull) {
                        sendKeyDownUpSync(86);
                    }
                } else if (this.m_iUITypeVer == 41) {
                    backLightOff_KSW();
                } else {
                    PowerOff(true);
                }
            }

            /* JADX WARNING: Removed duplicated region for block: B:224:0x0391 A[RETURN] */
            /* JADX WARNING: Removed duplicated region for block: B:225:0x0392  */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void processAutoKey(int r17) {
                /*
                    r16 = this;
                    r6 = r16
                    r0 = r17
                    java.lang.String r1 = r6.mCurTopClassName
                    java.lang.String r2 = "com.szchoiceway"
                    boolean r1 = r1.startsWith(r2)
                    r2 = 0
                    r3 = 1
                    if (r1 != 0) goto L_0x0027
                    java.lang.String r1 = r6.mCurTopClassName
                    java.lang.String r4 = "com.choiceway"
                    boolean r1 = r1.startsWith(r4)
                    if (r1 != 0) goto L_0x0027
                    java.lang.String r1 = r6.mCurTopClassName
                    java.lang.String r4 = "com.android.launcher3"
                    boolean r1 = r1.startsWith(r4)
                    if (r1 == 0) goto L_0x0025
                    goto L_0x0027
                L_0x0025:
                    r1 = 1
                    goto L_0x002e
                L_0x0027:
                    boolean r1 = r6.mShowFuncInThirdView
                    if (r1 == 0) goto L_0x002d
                    r6.mShowFuncInThirdView = r2
                L_0x002d:
                    r1 = 0
                L_0x002e:
                    java.lang.StringBuilder r4 = new java.lang.StringBuilder
                    r4.<init>()
                    java.lang.String r5 = "processAutoKey: autoKey = "
                    r4.append(r5)
                    r4.append(r0)
                    java.lang.String r5 = ",bThirdApp = "
                    r4.append(r5)
                    r4.append(r1)
                    java.lang.String r5 = ",mCurTopClassName = "
                    r4.append(r5)
                    java.lang.String r5 = r6.mCurTopClassName
                    r4.append(r5)
                    java.lang.String r5 = ",mValidMode = "
                    r4.append(r5)
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r5 = r6.mValidMode
                    r4.append(r5)
                    java.lang.String r4 = r4.toString()
                    java.lang.String r5 = "EventService"
                    android.util.Log.i(r5, r4)
                    r4 = 242(0xf2, float:3.39E-43)
                    if (r0 != r4) goto L_0x0065
                    return
                L_0x0065:
                    android.os.Handler r7 = r6.mEventHandler
                    r8 = 405(0x195, float:5.68E-43)
                    r7.removeMessages(r8)
                    android.os.Handler r7 = r6.mEventHandler
                    r9 = 6000(0x1770, double:2.9644E-320)
                    r7.sendEmptyMessageDelayed(r8, r9)
                    java.lang.String r7 = "com.szchoiceway.btsuite.BTMainActivity"
                    java.lang.String r8 = "com.szchoiceway.btsuite"
                    r9 = 4
                    r10 = 6
                    r11 = 23
                    r12 = 22
                    java.lang.String r13 = "com.choiceway.eventcenter.EventUtils.ZXW_SYS_KEY"
                    r14 = 5
                    if (r0 != r14) goto L_0x00ad
                    int r0 = r16.getBTStatus()
                    if (r0 != r14) goto L_0x0090
                    android.content.Context r0 = r16.getApplicationContext()
                    com.szchoiceway.eventcenter.EventUtils.sendSysBroadcast(r0, r13, r11)
                    goto L_0x00ac
                L_0x0090:
                    int r0 = r16.getBTStatus()
                    if (r0 == r10) goto L_0x00a5
                    int r0 = r16.getBTStatus()
                    if (r0 != r9) goto L_0x009d
                    goto L_0x00a5
                L_0x009d:
                    android.content.Context r0 = r16.getApplicationContext()
                    com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning(r0, r8, r7)
                    goto L_0x00ac
                L_0x00a5:
                    android.content.Context r0 = r16.getApplicationContext()
                    com.szchoiceway.eventcenter.EventUtils.sendSysBroadcast(r0, r13, r12)
                L_0x00ac:
                    return
                L_0x00ad:
                    if (r0 != r10) goto L_0x00b7
                    android.content.Context r0 = r16.getApplicationContext()
                    com.szchoiceway.eventcenter.EventUtils.sendSysBroadcast(r0, r13, r12)
                    return
                L_0x00b7:
                    r10 = 88
                    r13 = 61
                    r15 = 20
                    r4 = 19
                    if (r0 != r10) goto L_0x00e3
                    boolean r1 = r6.bModeNull
                    if (r1 != 0) goto L_0x0376
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC
                    if (r1 == r3) goto L_0x00d7
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOVIE
                    if (r1 == r3) goto L_0x00d7
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BTMUSIC
                    if (r1 != r3) goto L_0x0376
                L_0x00d7:
                    r1 = 4098(0x1002, float:5.743E-42)
                    r2 = 0
                    r3 = 3
                    r4 = 0
                    r5 = 0
                    r0 = r16
                    r0.notifyValidModeEvt(r1, r2, r3, r4, r5)
                    return
                L_0x00e3:
                    r10 = 87
                    if (r0 != r10) goto L_0x0109
                    boolean r1 = r6.bModeNull
                    if (r1 != 0) goto L_0x0376
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC
                    if (r1 == r3) goto L_0x00fd
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOVIE
                    if (r1 == r3) goto L_0x00fd
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BTMUSIC
                    if (r1 != r3) goto L_0x0376
                L_0x00fd:
                    r1 = 4098(0x1002, float:5.743E-42)
                    r2 = 0
                    r3 = 2
                    r4 = 0
                    r5 = 0
                    r0 = r16
                    r0.notifyValidModeEvt(r1, r2, r3, r4, r5)
                    return
                L_0x0109:
                    r10 = 85
                    if (r0 != r10) goto L_0x012f
                    boolean r1 = r6.bModeNull
                    if (r1 != 0) goto L_0x0376
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC
                    if (r1 == r3) goto L_0x0123
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOVIE
                    if (r1 == r3) goto L_0x0123
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BTMUSIC
                    if (r1 != r3) goto L_0x0376
                L_0x0123:
                    r1 = 4098(0x1002, float:5.743E-42)
                    r2 = 0
                    r3 = 6
                    r4 = 0
                    r5 = 0
                    r0 = r16
                    r0.notifyValidModeEvt(r1, r2, r3, r4, r5)
                    return
                L_0x012f:
                    r10 = 126(0x7e, float:1.77E-43)
                    if (r0 != r10) goto L_0x0155
                    boolean r1 = r6.bModeNull
                    if (r1 != 0) goto L_0x0376
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC
                    if (r1 == r3) goto L_0x0149
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOVIE
                    if (r1 == r3) goto L_0x0149
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BTMUSIC
                    if (r1 != r3) goto L_0x0376
                L_0x0149:
                    r1 = 4098(0x1002, float:5.743E-42)
                    r2 = 0
                    r3 = 4
                    r4 = 0
                    r5 = 0
                    r0 = r16
                    r0.notifyValidModeEvt(r1, r2, r3, r4, r5)
                    return
                L_0x0155:
                    r10 = 127(0x7f, float:1.78E-43)
                    if (r0 != r10) goto L_0x017b
                    boolean r1 = r6.bModeNull
                    if (r1 != 0) goto L_0x0376
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC
                    if (r1 == r3) goto L_0x016f
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOVIE
                    if (r1 == r3) goto L_0x016f
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BTMUSIC
                    if (r1 != r3) goto L_0x0376
                L_0x016f:
                    r1 = 4098(0x1002, float:5.743E-42)
                    r2 = 0
                    r3 = 5
                    r4 = 0
                    r5 = 0
                    r0 = r16
                    r0.notifyValidModeEvt(r1, r2, r3, r4, r5)
                    return
                L_0x017b:
                    r10 = 86
                    if (r0 != r10) goto L_0x01a2
                    boolean r1 = r6.bModeNull
                    if (r1 != 0) goto L_0x0376
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC
                    if (r1 == r3) goto L_0x0195
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOVIE
                    if (r1 == r3) goto L_0x0195
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r1 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r3 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BTMUSIC
                    if (r1 != r3) goto L_0x0376
                L_0x0195:
                    r1 = 4098(0x1002, float:5.743E-42)
                    r2 = 0
                    r3 = 255(0xff, float:3.57E-43)
                    r4 = 0
                    r5 = 0
                    r0 = r16
                    r0.notifyValidModeEvt(r1, r2, r3, r4, r5)
                    return
                L_0x01a2:
                    r10 = 84
                    if (r0 != r10) goto L_0x01c6
                    java.lang.String r0 = "processAutoKey: KEYCODE_SEARCH"
                    android.util.Log.i(r5, r0)
                    java.lang.String r0 = "com.txznet.txz"
                    boolean r0 = com.szchoiceway.eventcenter.EventUtils.getInstallStatus(r6, r0)
                    if (r0 != 0) goto L_0x01b8
                    java.lang.String r0 = "com.lfg.szchoiceway.zxwgooglevoice"
                    com.szchoiceway.eventcenter.EventUtils.getInstallStatus(r6, r0)
                L_0x01b8:
                    java.lang.String r0 = r6.mCurTopClassName
                    java.lang.String r1 = "com.szchoiceway.auxplayer.MainActivity_HDMI"
                    boolean r0 = r0.equals(r1)
                    if (r0 != 0) goto L_0x01c5
                    com.szchoiceway.eventcenter.EventUtils.startVoice(r16)
                L_0x01c5:
                    return
                L_0x01c6:
                    r10 = 3
                    if (r0 != r3) goto L_0x01f8
                    int r0 = r16.getBTStatus()
                    r3 = 7
                    if (r0 <= r10) goto L_0x01d6
                    android.content.Context r0 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver2(r0, r3)
                    return
                L_0x01d6:
                    if (r1 != 0) goto L_0x01e9
                    boolean r0 = r6.bInLeftFocus
                    if (r0 == 0) goto L_0x01e3
                    r16.zxwOriginalMcuKeyLeft()
                    r16.refreshFocusView()
                    goto L_0x01e8
                L_0x01e3:
                    android.content.Context r0 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver(r0, r3)
                L_0x01e8:
                    return
                L_0x01e9:
                    boolean r0 = r6.mShowFuncInThirdView
                    if (r0 == 0) goto L_0x01f4
                    r16.zxwOriginalMcuKeyLeft()
                    r16.refreshFocusView()
                    return
                L_0x01f4:
                    r15 = 19
                    goto L_0x0377
                L_0x01f8:
                    r14 = 2
                    if (r0 != r14) goto L_0x0227
                    int r0 = r16.getBTStatus()
                    r3 = 8
                    if (r0 <= r10) goto L_0x0209
                    android.content.Context r0 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver2(r0, r3)
                    return
                L_0x0209:
                    if (r1 != 0) goto L_0x021c
                    boolean r0 = r6.bInLeftFocus
                    if (r0 == 0) goto L_0x0216
                    r16.zxwOriginalMcuKeyRight()
                    r16.refreshFocusView()
                    goto L_0x021b
                L_0x0216:
                    android.content.Context r0 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver(r0, r3)
                L_0x021b:
                    return
                L_0x021c:
                    boolean r0 = r6.mShowFuncInThirdView
                    if (r0 == 0) goto L_0x0377
                    r16.zxwOriginalMcuKeyRight()
                    r16.refreshFocusView()
                    return
                L_0x0227:
                    if (r0 != r4) goto L_0x023f
                    int r0 = r16.getBTStatus()
                    if (r0 <= r10) goto L_0x0230
                    return
                L_0x0230:
                    if (r1 != 0) goto L_0x0238
                    android.content.Context r0 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver(r0, r10)
                    return
                L_0x0238:
                    r6.sendKeyDownUpSync(r13)
                    r15 = 23
                    goto L_0x0377
                L_0x023f:
                    if (r0 != r15) goto L_0x0254
                    int r0 = r16.getBTStatus()
                    if (r0 <= r10) goto L_0x0248
                    return
                L_0x0248:
                    if (r1 != 0) goto L_0x0250
                    android.content.Context r0 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver(r0, r9)
                    return
                L_0x0250:
                    r15 = 61
                    goto L_0x0377
                L_0x0254:
                    r4 = 21
                    if (r0 != r4) goto L_0x02af
                    int r4 = r16.getBTStatus()
                    if (r4 <= r10) goto L_0x0264
                    android.content.Context r0 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver2(r0, r3)
                    return
                L_0x0264:
                    if (r1 != 0) goto L_0x0376
                    com.szchoiceway.eventcenter.SysProviderOpt r0 = r6.mSysProviderOpt
                    java.lang.String r1 = "bInContactListFocus"
                    boolean r0 = r0.getRecordBoolean(r1, r2)
                    com.szchoiceway.eventcenter.SysProviderOpt r1 = r6.mSysProviderOpt
                    java.lang.String r4 = "mIsShowToastView"
                    boolean r1 = r1.getRecordBoolean(r4, r2)
                    java.lang.StringBuilder r2 = new java.lang.StringBuilder
                    r2.<init>()
                    java.lang.String r4 = "processAutoKey: bInContactListFocus = "
                    r2.append(r4)
                    r2.append(r0)
                    java.lang.String r2 = r2.toString()
                    android.util.Log.i(r5, r2)
                    if (r0 == 0) goto L_0x0294
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r0 = r6.mValidMode
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r2 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BT
                    if (r0 != r2) goto L_0x0294
                    if (r1 == 0) goto L_0x02a9
                L_0x0294:
                    r6.bInLeftFocus = r3
                    int r0 = r6.m_iCurrFocus
                    r1 = -1
                    if (r0 != r1) goto L_0x02a6
                    android.view.View[] r0 = r6.imageViewFocusList
                    if (r0 == 0) goto L_0x02a6
                    int r1 = r0.length
                    if (r1 <= 0) goto L_0x02a6
                    int r0 = r0.length
                    int r0 = r0 - r3
                    r6.m_iCurrFocus = r0
                L_0x02a6:
                    r16.refreshFocusView()
                L_0x02a9:
                    android.content.Context r0 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver(r0, r3)
                    return
                L_0x02af:
                    if (r0 != r12) goto L_0x02ca
                    int r3 = r16.getBTStatus()
                    if (r3 <= r10) goto L_0x02bd
                    android.content.Context r0 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver2(r0, r14)
                    return
                L_0x02bd:
                    if (r1 != 0) goto L_0x0376
                    r6.bInLeftFocus = r2
                    r16.refreshFocusView()
                    android.content.Context r0 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver(r0, r14)
                    return
                L_0x02ca:
                    if (r0 != r11) goto L_0x02f2
                    int r3 = r16.getBTStatus()
                    if (r3 <= r10) goto L_0x02d9
                    android.content.Context r0 = mAppContext
                    r3 = 5
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver2(r0, r3)
                    return
                L_0x02d9:
                    r3 = 5
                    if (r1 != 0) goto L_0x02ea
                    boolean r0 = r6.bInLeftFocus
                    if (r0 == 0) goto L_0x02e4
                    r16.zxwOriginalMcuKeyEnter()
                    goto L_0x02e9
                L_0x02e4:
                    android.content.Context r0 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver(r0, r3)
                L_0x02e9:
                    return
                L_0x02ea:
                    boolean r1 = r6.mShowFuncInThirdView
                    if (r1 == 0) goto L_0x0376
                    r16.zxwOriginalMcuKeyEnter()
                    return
                L_0x02f2:
                    r1 = 171(0xab, float:2.4E-43)
                    if (r0 != r1) goto L_0x0307
                    boolean r1 = r6.mShowFuncInThirdView
                    if (r1 != 0) goto L_0x0376
                    r6.mShowFuncInThirdView = r3
                    r6.bInLeftFocus = r3
                    android.content.Context r0 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.sendBroadcastIDriver(r0, r3)
                    r16.refreshFocusView()
                    return
                L_0x0307:
                    r1 = 55
                    if (r0 != r1) goto L_0x0315
                    android.content.Context r1 = mAppContext
                    java.lang.String r3 = "com.szchoiceway.navigation"
                    java.lang.String r4 = "com.szchoiceway.navigation.MainActivity"
                    com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning(r1, r3, r4)
                    goto L_0x0376
                L_0x0315:
                    r1 = 59
                    if (r0 != r1) goto L_0x031f
                    android.content.Context r1 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning(r1, r8, r7)
                    goto L_0x0376
                L_0x031f:
                    java.lang.String r1 = "Music_PackageName"
                    r3 = 242(0xf2, float:3.39E-43)
                    if (r0 != r3) goto L_0x033d
                    com.szchoiceway.eventcenter.SysProviderOpt r3 = r6.mSysProviderOpt
                    java.lang.String r4 = "com.szchoiceway.musicplayer"
                    java.lang.String r1 = r3.getRecordValue(r1, r4)
                    com.szchoiceway.eventcenter.SysProviderOpt r3 = r6.mSysProviderOpt
                    java.lang.String r4 = "Music_ActivityName"
                    java.lang.String r7 = "com.szchoiceway.musicplayer.MainActivity"
                    java.lang.String r3 = r3.getRecordValue(r4, r7)
                    android.content.Context r4 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning(r4, r1, r3)
                    goto L_0x0376
                L_0x033d:
                    r3 = 243(0xf3, float:3.4E-43)
                    if (r0 != r3) goto L_0x035b
                    com.szchoiceway.eventcenter.SysProviderOpt r1 = r6.mSysProviderOpt
                    java.lang.String r3 = "Video_PackageName"
                    java.lang.String r4 = "com.szchoiceway.videoplayer"
                    java.lang.String r1 = r1.getRecordValue(r3, r4)
                    com.szchoiceway.eventcenter.SysProviderOpt r3 = r6.mSysProviderOpt
                    java.lang.String r4 = "Video_ActivityName"
                    java.lang.String r7 = "com.szchoiceway.videoplayer.MainActivity"
                    java.lang.String r3 = r3.getRecordValue(r4, r7)
                    android.content.Context r4 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning(r4, r1, r3)
                    goto L_0x0376
                L_0x035b:
                    r3 = 187(0xbb, float:2.62E-43)
                    if (r0 != r3) goto L_0x0376
                    com.szchoiceway.eventcenter.SysProviderOpt r3 = r6.mSysProviderOpt
                    java.lang.String r4 = "com.szchoiceway.musicplayer"
                    java.lang.String r1 = r3.getRecordValue(r1, r4)
                    com.szchoiceway.eventcenter.SysProviderOpt r3 = r6.mSysProviderOpt
                    java.lang.String r4 = "Music_ActivityName"
                    java.lang.String r7 = "com.szchoiceway.musicplayer.MainActivity"
                    java.lang.String r3 = r3.getRecordValue(r4, r7)
                    android.content.Context r4 = mAppContext
                    com.szchoiceway.eventcenter.EventUtils.startActivityIfNotRuning(r4, r1, r3)
                L_0x0376:
                    r15 = r0
                L_0x0377:
                    java.lang.StringBuilder r0 = new java.lang.StringBuilder
                    r0.<init>()
                    java.lang.String r1 = "processAutoKey: responseAutoKey = "
                    r0.append(r1)
                    boolean r1 = r6.responseAutoKey
                    r0.append(r1)
                    java.lang.String r0 = r0.toString()
                    android.util.Log.i(r5, r0)
                    boolean r0 = r6.responseAutoKey
                    if (r0 != 0) goto L_0x0392
                    return
                L_0x0392:
                    r6.responseAutoKey = r2
                    android.os.Handler r0 = r6.mEventHandler
                    r1 = 406(0x196, float:5.69E-43)
                    r0.removeMessages(r1)
                    android.os.Handler r0 = r6.mEventHandler
                    r2 = 800(0x320, double:3.953E-321)
                    r0.sendEmptyMessageDelayed(r1, r2)
                    r6.sendKeyDownUpSync(r15)
                    return
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.processAutoKey(int):void");
            }

            public static void onKeyEvent(final int i) {
                new Thread() {
                    public void run() {
                        try {
                            new Instrumentation().sendKeyDownUpSync(i);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }.start();
            }

            /* access modifiers changed from: private */
            public void switchCarMedia() {
                Log.i(TAG, "--->>> switchCarMedia");
                EventUtils.startActivityIfNotRuning(getApplicationContext(), "com.example.administrator.atslcarconsole", "com.example.administrator.atslcarconsole.MainActivity");
            }

            /* access modifiers changed from: private */
            public void startGPSLocListener() {
                Log.d(TAG, "*****startGPSLocListener******");
                this.mIsGPSGetLocation = false;
                iGPSGetLocation = 0;
                this.locationManager = (LocationManager) getSystemService("location");
                Criteria criteria = new Criteria();
                criteria.setAccuracy(1);
                criteria.setAltitudeRequired(true);
                criteria.setBearingRequired(true);
                criteria.setCostAllowed(true);
                criteria.setPowerRequirement(1);
                criteria.setSpeedRequired(true);
                this.locationManager.requestLocationUpdates(this.locationManager.getBestProvider(criteria, true), 1000, 0.0f, this.locationListener);
                this.locationManager.addGpsStatusListener(this.statusListener);
            }

            private void stopGPSLocListener() {
                LocationManager locationManager2 = this.locationManager;
                if (locationManager2 != null) {
                    locationManager2.removeUpdates(this.locationListener);
                    this.locationManager.removeGpsStatusListener(this.statusListener);
                    this.locationManager = null;
                }
            }

            /* access modifiers changed from: private */
            public void StartConnetedCameraCrashService() {
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SET_USB_DVR_MODE, 0);
                if (recordInteger == 1) {
                    this.mSysProviderOpt.updateRecord(SysProviderOpt.SET_USB_DVR_BACK_RUNNING, "1");
                    startService(new Intent("com.szchoiceway.usbdvrplayer.CameraCrashService").setPackage(EventUtils.USB_DVR_MODE_PACKAGE_NAME));
                } else if (recordInteger == 2) {
                    this.mSysProviderOpt.updateRecord(SysProviderOpt.SET_USB_DVR_BACK_RUNNING, "1");
                    startService(new Intent("com.sinosmart.adas.ADASService").setPackage("com.sinosmart.adas"));
                    bindService(new Intent("com.sinosmart.adas.CameraCrashService").setPackage("com.sinosmart.adas"), this.osc, 1);
                }
            }

            static class ServiceStub extends IEventService.Stub {
                WeakReference<EventService> mService;

                public void beep() throws RemoteException {
                }

                public int getCameraOwner() throws RemoteException {
                    return 0;
                }

                public void sendTVKey(int i) throws RemoteException {
                }

                public void setCameraOwner(int i) throws RemoteException {
                }

                ServiceStub(EventService eventService) {
                    this.mService = new WeakReference<>(eventService);
                }

                public void sendMode(int i, boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendMode(EventUtils.eSrcMode.valueOf(i), z);
                    }
                }

                public void sendRadioKey(int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendRadioKey(i);
                    }
                }

                public void sendSystemKey(int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendSystemKey(i);
                    }
                }

                public void sendEQMode(int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendEQMode(i);
                    }
                }

                public void sendUserFreq(int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendUserFreq(i);
                    }
                }

                public void sendMuteState(boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendMuteState(z);
                    }
                }

                public void sendPlayState(boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendPlayState(z);
                    }
                }

                public void sendSetup(byte b, byte b2) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendSetup(b, b2);
                    }
                }

                public void sendBTState(int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendBTState((byte) i);
                    }
                }

                public int getRadioFreq() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioFreq();
                    }
                    return 0;
                }

                public int[] getRadioFreqList() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioFreqList();
                    }
                    return null;
                }

                public int getRadioBand() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioBand();
                    }
                    return 0;
                }

                public int getRadioNum() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioTuneNum();
                    }
                    return 0;
                }

                public boolean getRadioSTMonoState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioSTMonoState();
                    }
                    return false;
                }

                public boolean getRadioDXLOCState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioDXLOCState();
                    }
                    return false;
                }

                public boolean getRadioAMSState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioAMSState();
                    }
                    return false;
                }

                public boolean getRadioAPSState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioAPSState();
                    }
                    return false;
                }

                public boolean getRadioSteroIconState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioSteroIconState();
                    }
                    return false;
                }

                public boolean getRadioTPIconState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioTPIconState();
                    }
                    return false;
                }

                public boolean getRadioTrafficState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioTrafficState();
                    }
                    return false;
                }

                public void setRadioCallback(ICallbackfn iCallbackfn) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).setRadioCallback(iCallbackfn);
                    }
                }

                public boolean getRadioRDSState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioRDSState();
                    }
                    return false;
                }

                public boolean getRadioPTYState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioPTYState();
                    }
                    return false;
                }

                public boolean getRadioAFState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioAFState();
                    }
                    return false;
                }

                public boolean getRadioTAState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioTAState();
                    }
                    return false;
                }

                public int getRadioPTYNum() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioPTYNum();
                    }
                    return 0;
                }

                public String getRadioPTYName() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getRadioPTYName();
                    }
                    return null;
                }

                public void setCurModeCallback(int i, ICallbackfn iCallbackfn) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).setCurModeCallback(i, iCallbackfn);
                    }
                }

                public void exitCurMode(int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).exitCurMode(i);
                    }
                }

                public String getMCUVer() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getMCUVer();
                    }
                    return null;
                }

                public String getTFTVer() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getTFTVer();
                    }
                    return null;
                }

                public boolean get_kesaiwei_chk_Video_Driving_Ban() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).get_kesaiwei_chk_Video_Driving_Ban();
                    }
                    return false;
                }

                public boolean get_kesaiwei_bPark() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).get_kesaiwei_bPark();
                    }
                    return false;
                }

                public void putSettingStr(String str, String str2) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).putSettingStr(str, str2);
                    }
                }

                public void putSettingInt(String str, int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).putSettingInt(str, i);
                    }
                }

                public void putSettingLong(String str, long j) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).putSettingLong(str, j);
                    }
                }

                public void putSettingFloat(String str, float f) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).putSettingFloat(str, f);
                    }
                }

                public void putSettingBoolean(String str, boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).putSettingBoolean(str, z);
                    }
                }

                public void commitSetting() throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).commitSetting();
                    }
                }

                public void appySetting() throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).appySetting();
                    }
                }

                public boolean getSettingBoolean(String str, boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getSettingBoolean(str, z);
                    }
                    return false;
                }

                public float getSettingFloat(String str, float f) throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getSettingFloat(str, f);
                    }
                    return 0.0f;
                }

                public int getSettingInt(String str, int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getSettingInt(str, i);
                    }
                    return 0;
                }

                public long getSettingLong(String str, long j) throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getSettingLong(str, j);
                    }
                    return 0;
                }

                public String getSettingString(String str, String str2) throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getSettingString(str, str2);
                    }
                    return null;
                }

                public void sendTouchPos(int i, int i2, boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendTouchPos(i, i2, z, false);
                    }
                }

                public int getValidMode() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getValidMode();
                    }
                    return 0;
                }

                public void SendFactorySetToMCU(byte b, byte b2, byte b3, byte b4, byte b5, byte b6) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SendFactorySetToMCU(b, b2, b3, b4, b5, b6);
                    }
                }

                public byte getMainVolval() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getMainVolval();
                    }
                    return 0;
                }

                public byte getBassVal() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getBassVal();
                    }
                    return 0;
                }

                public byte getTrebleVal() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getTrebleVal();
                    }
                    return 0;
                }

                public byte getMiddleVal() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getMiddleVal();
                    }
                    return 0;
                }

                public byte getBassFre() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getBassFre();
                    }
                    return 0;
                }

                public byte getMiddleFre() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getMiddleFre();
                    }
                    return 0;
                }

                public byte getTrebleFre() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getTrebleFre();
                    }
                    return 0;
                }

                public byte getBALVal() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getBALVal();
                    }
                    return 0;
                }

                public byte getFADVal() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getFADVal();
                    }
                    return 0;
                }

                public byte getEQMode() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getEQMode();
                    }
                    return 0;
                }

                public byte getUserBassVal() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getUserBassVal();
                    }
                    return 0;
                }

                public byte getUserTrebleVal() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getUserTrebleVal();
                    }
                    return 0;
                }

                public byte getUserMiddleVal() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getUserMiddleVal();
                    }
                    return 0;
                }

                public boolean getMuteStatus() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getMuteStatus();
                    }
                    return true;
                }

                public boolean getLoudStatus() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getLoudStatus();
                    }
                    return true;
                }

                public void SendAudioSetToMCU(int i, int i2, int i3, int i4, int i5, int i6) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SendAudioSetToMCU(i, i2, i3, i4, i5, i6);
                    }
                }

                public void SendWheelKey(int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SendWheelKey(i);
                    }
                }

                public void SendSysRTCTimeMCU(int i, int i2, int i3, int i4, int i5, int i6) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SendSysRTCTimeMCU(i, i2, i3, i4, i5, i6);
                    }
                }

                public void SendDVRKey(byte b) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SendDVRKey(b);
                    }
                }

                public void SendMainVol(byte b) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SendMainVol(b);
                    }
                }

                public void SendBLVal(byte b, byte b2) throws RemoteException {
                    if (GetCurrDim() == -1) {
                        SetCurrDim(0);
                    }
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SendBLVal(b, b2);
                    }
                }

                public void SendBALFADVal(byte b, byte b2) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SendBALFADVal(b, b2);
                    }
                }

                public void SendBlackState(boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SendBlackState(z);
                    }
                }

                public boolean IsBrakeConneted() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).IsBrakeConneted();
                    }
                    return true;
                }

                public boolean IsMCUUpgradeWriteErr() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).IsMCUUpgradeWriteErr();
                    }
                    return true;
                }

                public void SetVideoCH(int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SetVideoCH(i);
                    }
                }

                public int GetSignalStatus() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).GetSignalStatus();
                    }
                    return 0;
                }

                public void OpenVideo(boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).OpenVideo(z);
                    }
                }

                public void SetVideoSize(int i, int i2, int i3, int i4) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SetVideoSize(i, i2, i3, i4);
                    }
                }

                public boolean IsMuteOn() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).IsMuteOn();
                    }
                    return false;
                }

                public void initRadioZone(byte b) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).initRadioZone(b);
                    }
                }

                public void sendCanbusData(byte[] bArr) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendCanbusData(bArr);
                    }
                }

                public void setValidModeInfor(String str, String str2, String str3, int i, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).setValidModeInfor(str, str2, str3, i, i2, i3, i4, i5, i6, i7, i8, i9);
                    }
                }

                public String getValidModeTitleInfor() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getValidModeTitleInfor();
                    }
                    return null;
                }

                public String getValidModeAblumInfor() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getValidModeAblumInfor();
                    }
                    return null;
                }

                public String getValidModeArtistInfor() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getValidModeArtistInfor();
                    }
                    return null;
                }

                public int getValidCurTrack() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getValidCurTrack();
                    }
                    return 0;
                }

                public int getValidTotTrack() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getValidTotTrack();
                    }
                    return 0;
                }

                public int getValidCurTime() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getValidCurTime();
                    }
                    return 0;
                }

                public int getValidTotTime() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getValidTotTime();
                    }
                    return 0;
                }

                public int getValidCurFolder() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getValidCurFolder();
                    }
                    return 0;
                }

                public int getValidTotFolder() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getValidTotFolder();
                    }
                    return 0;
                }

                public int getValidLoopMode() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getValidLoopMode();
                    }
                    return 0;
                }

                public int getValidRepeatMode() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getValidRepeatMode();
                    }
                    return 0;
                }

                public int getValidPlayStatus() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getValidPlayStatus();
                    }
                    return 0;
                }

                public void SetDVDVideoCH(int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SetDVDVideoCH(i);
                    }
                }

                public void sendResetDVD(boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendResetDVD(z);
                    }
                }

                public boolean IsDiscConneted() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).IsDiscConneted();
                    }
                    return false;
                }

                public void setTVCallback(ICallbackfn iCallbackfn) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).setTVCallback(iCallbackfn);
                    }
                }

                public void setAUXCallback(ICallbackfn iCallbackfn) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).setAUXCallback(iCallbackfn);
                    }
                }

                public void setDashBoardCallback(ICallbackfn iCallbackfn) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).setDashBoardCallback(iCallbackfn);
                    }
                }

                public void setGpsFocusCallback(ICallbackfn iCallbackfn) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).setGpsFocusCallback(iCallbackfn);
                    }
                }

                public void setCarMediaCallback(ICallbackfn iCallbackfn) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).setCarMediaCallback(iCallbackfn);
                    }
                }

                public void setMcuInitStatus(boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).setMcuInitStatus(z);
                    }
                }

                public boolean getMcuInitStatus() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getMcuInitStatus();
                    }
                    return false;
                }

                public void enterUpgradeMode() throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).enterUpgradeMode();
                    }
                }

                public void exitUpgradeMode() throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).exitUpgradeMode();
                    }
                }

                public boolean sendMcuUpgradeMode(int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).sendMcuUpgradeMode(i);
                    }
                    return false;
                }

                public boolean Send8902McuUpgradeData(byte[] bArr, int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).Send8902McuUpgradeData(bArr, i);
                    }
                    return false;
                }

                public boolean sendMcuUpgradeData(long j, byte[] bArr, int i, int i2, boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).sendMcuUpgradeData(j, bArr, i, i2, z);
                    }
                    return false;
                }

                public boolean isUpgradeMode() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).isUpgradeMode();
                    }
                    return false;
                }

                public void SendGPSVolToMCU(byte b) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SendGPSVolToMCU(b);
                    }
                }

                public void SendVol_KSW(boolean z, int i, int i2, int i3) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SendVol_KSW(z, i, i2, i3);
                    }
                }

                public void SendFactorySet() throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SendFactorySet();
                    }
                }

                public int GetBTStatus() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getBTStatus();
                    }
                    return 0;
                }

                public boolean IsBackcarConnected() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).IsBackcarConnected();
                    }
                    return false;
                }

                public int LoadNLightVal() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).LoadNLightVal();
                    }
                    return 0;
                }

                public void SetCurrDim(int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).SetCurrDim(i);
                    }
                }

                public int GetCurrDim() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).GetCurrDim();
                    }
                    return 0;
                }

                public void sendDvdDataToMcu(byte[] bArr) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendDvdDataToMcu(bArr);
                    }
                }

                public void sendMcuData_KSW(byte[] bArr) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendMcuData_KSW(bArr);
                    }
                }

                public int get_m_i_easyconn_state_KSW() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).get_m_i_easyconn_state_KSW();
                    }
                    return 0;
                }

                public void send_KSW_page2_vol_info(int i, int i2, int i3, int i4) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).send_KSW_page2_vol_info(i, i2, i3, i4);
                    }
                }

                public void openTVout(int i, boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).openTVout(i, z);
                    }
                }

                public void sendToOSData() throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendToOSData();
                    }
                }

                public boolean getmIsAddMouseView() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getmIsAddMouseView();
                    }
                    return false;
                }

                public void sendKeyDownUpSync(int i) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendKeyDownUpSync(i);
                    }
                }

                public void enterCanUpgradeMode() throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).enterCanUpgradeMode();
                    }
                }

                public void exitCanUpgradeMode() throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).exitCanUpgradeMode();
                    }
                }

                public void sendCanbusUpgradeData(byte[] bArr) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendCanbusUpgradeData(bArr);
                    }
                }

                public void responseCanUpgradeMode() throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).responseCanUpgradeMode();
                    }
                }

                public void responseCanUpgradeEvent(byte b) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).responseCanUpgradeEvent(b);
                    }
                }

                public void responseCanUpgradeDataEvent(byte b) throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).responseCanUpgradeDataEvent(b);
                    }
                }

                public int getLetterConnectMode() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getLetterConnectMode();
                    }
                    return 0;
                }

                public int getLetterConnectState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getLetterConnectState();
                    }
                    return 0;
                }

                public int getLetterRunningState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getLetterRunningState();
                    }
                    return 0;
                }

                public int getLetterMediaSatte() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getLetterMediaSatte();
                    }
                    return 0;
                }

                public int getLetterRecorderState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getLetterRecorderState();
                    }
                    return 0;
                }

                public int getLetterTelephoneState() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).getLetterTelephoneState();
                    }
                    return 0;
                }

                public void sendKSW_0x00_0x67_third() throws RemoteException {
                    if (this.mService.get() != null) {
                        ((EventService) this.mService.get()).sendKSW_0x00_0x67_third();
                    }
                }

                public boolean getBackcar360() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).show360Dialog;
                    }
                    return false;
                }

                public int getZlinkLinkState() throws RemoteException {
                    return (this.mService.get() == null || !((EventService) this.mService.get()).bZlinkCarplayConnected) ? 0 : 1;
                }

                public int getZlinkLinkMode() throws RemoteException {
                    if (this.mService.get() != null) {
                        return ((EventService) this.mService.get()).mZlinLinkMode;
                    }
                    return -1;
                }

                public void showLexusAirWnd() throws RemoteException {
                    if (this.mService.get() != null) {
                        new Handler(Looper.getMainLooper()).post(new Runnable() {
                            public void run() {
                                ((EventService) ServiceStub.this.mService.get()).showLexusAirWnd();
                            }
                        });
                    }
                }

                public void hideLexusAirWnd() throws RemoteException {
                    if (this.mService.get() != null) {
                        new Handler(Looper.getMainLooper()).post(new Runnable() {
                            public void run() {
                                ((EventService) ServiceStub.this.mService.get()).hideLexusAirWnd();
                            }
                        });
                    }
                }

                public void showAppList(boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        boolean unused = ((EventService) this.mService.get()).mShowAppList = z;
                    }
                }

                public void showLRBTPhonePage(boolean z) throws RemoteException {
                    if (this.mService.get() != null) {
                        Log.d(EventService.TAG, "showLRBTPhonePage show = " + z);
                        boolean unused = ((EventService) this.mService.get()).mShowLRPhonePage = z;
                    }
                }
            }

            public void Send8902BackcarMod() {
                this.bBackcarTrack = getSettingBoolean(EventUtils.KEY_BackcarTrack, this.bBackcarTrack);
                this.bBackcarRadar = getSettingBoolean(EventUtils.KEY_BackcarRadar, this.bBackcarRadar);
                this.bOrgBackcar = getSettingBoolean(EventUtils.KEY_OrgBackcar, this.bOrgBackcar);
                this.bBackcarFullview = getSettingBoolean(EventUtils.KEY_BackcarFullview, this.bBackcarFullview);
                Log.i(TAG, "--->>> bBackcarTrack = " + this.bBackcarTrack + ", bBackcarRadar = " + this.bBackcarRadar + ", bOrgBackcar = " + this.bOrgBackcar + ", bBackcarFullview = " + this.bBackcarFullview);
                if (this.bOrgBackcar) {
                    send8902BackcarSet((byte) 0);
                    return;
                }
                byte b = (byte) 2;
                if (this.bBackcarFullview) {
                    send8902BackcarSet((byte) (b | 4));
                    return;
                }
                if (this.bBackcarRadar) {
                    b = (byte) (b | 1);
                }
                if (this.bBackcarTrack) {
                    b = (byte) (b | 16);
                }
                send8902BackcarSet(b);
            }

            public void ksw_Send8902BackcarMod(boolean z) {
                boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KESAIWEI_SYS_BACKCAR_MIRROR, false);
                boolean recordBoolean2 = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KESAIWEI_SYS_FRONT_MIRROR, false);
                boolean recordBoolean3 = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KESAIWEI_SYS_VIDEO_DRIVING_BAN, false);
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_SD_HOST, 1);
                int recordInteger2 = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_CAMERA_SELECTION, 1);
                int recordInteger3 = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_DVD_SELECTION, 0);
                int recordInteger4 = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_LANGUAGE, 1);
                this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_RECORD_AMPLIFIER, 0);
                int recordInteger5 = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_TEMP_UNIT, 0);
                int recordInteger6 = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_OIL_UNIT, 0);
                int recordInteger7 = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_DISTACNE_UNIT, 0);
                this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_AUX_ITEM_POSITION, 0);
                Log.d(TAG, "ksw_Send8902BackcarMod kesaiwei_OilUnit_Selection = " + recordInteger6);
                if (recordBoolean2 != this.b_kesaiwei_chk_frontMirror || z) {
                    this.b_kesaiwei_chk_frontMirror = recordBoolean2;
                    sendKSW_0x00_0x6A(27, recordBoolean2 ? 1 : 0);
                }
                if (recordBoolean != this.b_kesaiwei_chk_backcarMirror || z) {
                    this.b_kesaiwei_chk_backcarMirror = recordBoolean;
                    sendKSW_0x00_0x6A(1, recordBoolean ? 1 : 0);
                }
                if (recordBoolean3 != this.b_kesaiwei_chk_Video_Driving_Ban || z) {
                    this.b_kesaiwei_chk_Video_Driving_Ban = recordBoolean3;
                    sendKSW_0x00_0x6A(14, recordBoolean3 ? 1 : 0);
                    sendBroadcastPark_KSW();
                }
                if (recordInteger != this.i_kesaiwei_SD_Host || z) {
                    this.i_kesaiwei_SD_Host = recordInteger;
                    sendKSW_0x00_0x70(12, recordInteger);
                }
                if (recordInteger2 != this.i_kesaiwei_Camera_Selection || z) {
                    this.i_kesaiwei_Camera_Selection = recordInteger2;
                    if (recordInteger2 == 3) {
                        if (Build.VERSION.SDK_INT == 33 && !"1".equals(SystemProperties.get("persist.ivicar.avm.state", BuildConfig.FLAVOR))) {
                            SystemProperties.set("persist.ivicar.avm.state", "1");
                        }
                    } else if (Build.VERSION.SDK_INT == 33 && !"0".equals(SystemProperties.get("persist.ivicar.avm.state", BuildConfig.FLAVOR))) {
                        SystemProperties.set("persist.ivicar.avm.state", "0");
                    }
                    sendKSW_0x00_0x6A(11, this.i_kesaiwei_Camera_Selection);
                }
                if (recordInteger3 != this.i_kesaiwei_DVD_Selection || z) {
                    this.i_kesaiwei_DVD_Selection = recordInteger3;
                    sendKSW_0x00_0x6A(12, recordInteger3);
                }
                if (recordInteger4 != this.i_kesaiwei_language || z) {
                    this.i_kesaiwei_language = recordInteger4;
                }
                if (recordInteger5 != this.i_kesaiwei_TempUnit_Selection || z) {
                    this.i_kesaiwei_TempUnit_Selection = recordInteger5;
                    sendKSW_0x00_0x6A(24, recordInteger5);
                }
                if (recordInteger6 != this.i_kesaiwei_OilUnit_Selection || z) {
                    this.i_kesaiwei_OilUnit_Selection = recordInteger6;
                    sendKSW_0x00_0x6A(26, recordInteger6);
                }
                if (recordInteger7 != this.i_kesaiwei_DistanceUnit_Selection || z) {
                    this.i_kesaiwei_DistanceUnit_Selection = recordInteger7;
                    sendKSW_0x00_0x70(26, recordInteger7);
                }
            }

            public void ksw_initSendVol() {
                int settingInt = getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, 30);
                int settingInt2 = getSettingInt(EventUtils.KEY_KSW_VOL_VAL_01, 30);
                getSettingInt(EventUtils.KEY_KSW_VOL_VAL_02, 30);
                int settingInt3 = getSettingInt(EventUtils.KEY_KSW_VOL_VAL_03, 22);
                int settingInt4 = getSettingInt(EventUtils.KEY_KSW_VOL_VAL_04, 22);
                int settingInt5 = getSettingInt(EventUtils.KEY_KSW_VOL_VAL_05, 10);
                int i = this.m_iModeSet;
                if (i == 5 || i == 9) {
                    putSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, settingInt5);
                    appySetting();
                    commitSetting();
                    settingInt = settingInt5;
                }
                SendVol_KSW(false, 1, 1, settingInt);
                SendVol_KSW(false, 1, 2, settingInt2);
                SendVol_KSW(false, 2, 2, settingInt3);
                SendVol_KSW(false, 2, 3, settingInt4);
                this.initSendVol = true;
            }

            public void ksw_initSendVol_page2_info() {
                int i;
                int i2;
                this.ksw_m_i_eq_mode = getSettingInt(EventUtils.KESAIWEI_EQ_MODE_SELECT, this.ksw_m_i_eq_mode);
                int[] iArr = this.ksw_i_user_arr;
                int i3 = 0;
                iArr[0] = getSettingInt(EventUtils.KESAIWEI_EQ_USER_LOW, iArr[0]);
                int[] iArr2 = this.ksw_i_user_arr;
                iArr2[1] = getSettingInt(EventUtils.KESAIWEI_EQ_USER_MID, iArr2[1]);
                int[] iArr3 = this.ksw_i_user_arr;
                iArr3[2] = getSettingInt(EventUtils.KESAIWEI_EQ_USER_HIGHT, iArr3[2]);
                int i4 = this.ksw_m_i_eq_mode;
                if (i4 == 0) {
                    int[] iArr4 = this.ksw_i_user_arr;
                    i3 = iArr4[0];
                    i2 = iArr4[1];
                    i = iArr4[2];
                } else if (i4 == 1) {
                    int[] iArr5 = this.ksw_i_pop_arr;
                    i3 = iArr5[0];
                    i2 = iArr5[1];
                    i = iArr5[2];
                } else if (i4 == 2) {
                    int[] iArr6 = this.ksw_i_classical_arr;
                    i3 = iArr6[0];
                    i2 = iArr6[1];
                    i = iArr6[2];
                } else if (i4 == 3) {
                    int[] iArr7 = this.ksw_i_rock_arr;
                    i3 = iArr7[0];
                    i2 = iArr7[1];
                    i = iArr7[2];
                } else if (i4 == 4) {
                    int[] iArr8 = this.ksw_i_jazz_arr;
                    i3 = iArr8[0];
                    i2 = iArr8[1];
                    i = iArr8[2];
                } else if (i4 != 5) {
                    i2 = 0;
                    i = 0;
                } else {
                    int[] iArr9 = this.ksw_i_dance_arr;
                    i3 = iArr9[0];
                    i2 = iArr9[1];
                    i = iArr9[2];
                }
                send_KSW_page2_vol_info(i4, i3, i2, i);
            }

            public static String ASCIItoChar(byte[] bArr) {
                try {
                    return new String(bArr, "ISO-8859-1");
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                    return null;
                }
            }

            private void parseCmdTouchToOsZHTY(int i, int i2, int i3, int i4) {
                int i5 = (i3 << 31) | (i4 << 29) | (i << 16) | i2;
                Log.i(TAG, "--->>> zhonghantianyi x = " + i + ",  y = " + i2 + ", iDown = " + i3 + ", id = " + i4);
                try {
                    FileOutputStream fileOutputStream = this.fos;
                    if (fileOutputStream != null) {
                        fileOutputStream.write(intToBytes(i5));
                        Log.i(TAG, "--->>> zhonghantianyi write");
                        this.fos.flush();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            /* JADX WARNING: Code restructure failed: missing block: B:2:0x0008, code lost:
                r0 = r6.m_iModeSet;
             */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void SendBroadCastToOSDropDownMenu() {
                /*
                    r6 = this;
                    int r0 = r6.m_iUITypeVer
                    r1 = 1
                    r2 = 0
                    r3 = 41
                    if (r0 != r3) goto L_0x0014
                    int r0 = r6.m_iModeSet
                    r3 = 5
                    if (r0 == r3) goto L_0x0014
                    r3 = 9
                    if (r0 != r3) goto L_0x0012
                    goto L_0x0014
                L_0x0012:
                    r0 = 1
                    goto L_0x0015
                L_0x0014:
                    r0 = 0
                L_0x0015:
                    android.content.Context r3 = r6.getApplicationContext()
                    if (r3 != 0) goto L_0x001c
                    return
                L_0x001c:
                    android.content.Intent r4 = new android.content.Intent
                    java.lang.String r5 = "android.intent.statusbar.HIDE_EXPAND_ICON"
                    r4.<init>(r5)
                    java.lang.String r5 = "hide_backlight"
                    r4.putExtra(r5, r0)
                    java.lang.String r0 = "hide_audio"
                    r4.putExtra(r0, r2)
                    java.lang.String r0 = "hide_car_sound"
                    r4.putExtra(r0, r1)
                    r3.sendBroadcast(r4)
                    return
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.SendBroadCastToOSDropDownMenu():void");
            }

            public void zhtySwitchMediaChannal(boolean z) {
                if (z) {
                    byte[] bArr = {51, 3, z ? (byte) 1 : 0};
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                        return;
                    }
                    return;
                }
                this.mEventHandler.removeMessages(EventUtils.HANDLER_DELAY_EXIT_MEDIA_CHANNAL);
                this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_DELAY_EXIT_MEDIA_CHANNAL, 3000);
            }

            public void zhtySwitchGpsChannal(boolean z) {
                byte[] bArr = {51, 2, z ? (byte) 1 : 0};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void zhtySendToMcuMediaBtGpsVol(int i, int i2, int i3, boolean z, boolean z2, boolean z3) {
                byte[] bArr = new byte[3];
                bArr[0] = EventUtils.MCU_KEY_RADIO;
                if (z) {
                    bArr[1] = 2;
                    bArr[2] = (byte) i;
                } else if (z2) {
                    bArr[1] = 3;
                    bArr[2] = (byte) i2;
                } else {
                    bArr[1] = 1;
                    bArr[2] = (byte) i3;
                }
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void zhtyCheckOkNotifyMcuUpgrade() {
                Log.i(TAG, "--->>> zhtyCheckOkNotifyMcuUpgrade");
                startService(new Intent("com.szchoiceway.updatemcu.UpdateMcuService"));
                this.mEventHandler.removeMessages(EventUtils.HANDLER_DELAY_CHECK_OK_NOTIFY_MCU_UPGRADE);
                this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_DELAY_CHECK_OK_NOTIFY_MCU_UPGRADE, 5000);
            }

            public void boruizonghengCloseAV() {
                BackcarEvent backcarEvent = this.mBackcarEvt;
                if (backcarEvent != null) {
                    backcarEvent.setVehicle(false);
                }
                try {
                    Thread.sleep(200);
                } catch (Exception e) {
                    Log.e(TAG, "DetectSignThread error " + e.toString());
                }
            }

            public void boruizonghengStartAV1(boolean z) {
                sendMode(EventUtils.eSrcMode.SRC_LEFT_CAMERA, true);
                if (!z) {
                    this.mLeftRightAndBackCamera = 1;
                }
                this.mCurrCameraIndex = 1;
                startBackcar(1);
            }

            public void boruizonghengStartAV2(boolean z) {
                if (this.m_iUITypeVer == 36) {
                    sendMode(EventUtils.eSrcMode.SRC_BCAM, true);
                } else {
                    sendMode(EventUtils.eSrcMode.SRC_BACKCAR, true);
                }
                if (!z) {
                    this.mLeftRightAndBackCamera = 2;
                }
                this.mCurrCameraIndex = 2;
                startBackcar(2);
            }

            public void boruizonghengStartAV3(boolean z) {
                sendMode(EventUtils.eSrcMode.SRC_RIGHT_CAMERA, true);
                if (!z) {
                    this.mLeftRightAndBackCamera = 3;
                }
                this.mCurrCameraIndex = 3;
                startBackcar(3);
            }

            private void sendKSW_0x00_0x60() {
                byte[] bArr = {-14, 0, 96, 1, 1};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            /* access modifiers changed from: private */
            public void sendKSW_0x00_0x61() {
                Log.d(TAG, "sendKSW_0x00_0x61 Build.VERSION.SDK_INT = " + Build.VERSION.SDK_INT);
                byte[] bArr = {-14, 0, EventUtils.MCU_KEY_RIGHT_TEMP_SUB, 1, 1};
                if (Build.MODEL.equals("px7_zxw")) {
                    bArr = new byte[]{-14, 0, EventUtils.MCU_KEY_RIGHT_TEMP_SUB, 2, 1, -111};
                } else if (Build.VERSION.SDK_INT >= 29) {
                    bArr = new byte[]{-14, 0, EventUtils.MCU_KEY_RIGHT_TEMP_SUB, 2, 0, 0};
                } else if (Build.VERSION.SDK_INT > 26) {
                    bArr = new byte[]{-14, 0, EventUtils.MCU_KEY_RIGHT_TEMP_SUB, 2, 1, EventUtils.CMD_MODE_POWERON};
                } else if (Build.VERSION.SDK_INT > 19) {
                    bArr = new byte[]{-14, 0, EventUtils.MCU_KEY_RIGHT_TEMP_SUB, 2, 1, 113};
                }
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private void sendKSW_0x00_0x62(boolean z, int i, int i2, int i3) {
                int i4 = i3;
                if (i4 >= 0 && i4 <= 40) {
                    byte b = z ? (byte) 1 : 0;
                    byte b2 = (byte) i;
                    byte b3 = (byte) i2;
                    byte b4 = (byte) i4;
                    byte[] bArr = {-14, 0, EventUtils.MCU_KEY_FAN_SUB, 5, b, b2, b3, b4, 0};
                    if (!this.initSendVol) {
                        bArr = new byte[]{-14, 0, EventUtils.MCU_KEY_FAN_SUB, 5, b, b2, b3, b4, 1};
                    }
                    if (this.mSendThread != null) {
                        Log.i(TAG, "--->>> KSW sendKSW_0x00_0x62 = " + EventUtils.bytesToHexString(bArr));
                        this.mSendThread.notifyToSend(bArr);
                    }
                }
            }

            private void sendKSW_0x00_0x63(int i, int i2) {
                if (i >= 0) {
                    if (i > 0) {
                        this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_END_BT_PHONE);
                        this.hasSendBtStatus = true;
                    }
                    Log.i(TAG, "sendKSW_0x00_0x63: iBtState = " + i);
                    byte b = (byte) i;
                    byte[] bArr = this.mSysProviderOpt.getRecordInteger("KESAIWEI_RECORD_BT_INDEX", 0) == 2 ? new byte[]{-14, 0, EventUtils.MCU_KEY_FAN_ADD, 2, 0, b, (byte) i2} : new byte[]{-14, 0, EventUtils.MCU_KEY_FAN_ADD, 2, 0, b};
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                    }
                    if (i == 0) {
                        this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_END_BT_PHONE, 2000);
                    }
                }
            }

            private void sendKSW_0x00_0x64() {
                int i;
                Calendar instance2 = Calendar.getInstance();
                if (instance2 != null && !isUpgradeMode()) {
                    int i2 = instance2.get(1);
                    int i3 = instance2.get(2) + 1;
                    int i4 = instance2.get(5);
                    int i5 = instance2.get(11);
                    int i6 = instance2.get(12);
                    int i7 = instance2.get(13);
                    String string = Settings.System.getString(getContentResolver(), "time_12_24");
                    if (string == null || !string.equals("24")) {
                        if (i5 > 12) {
                            i5 -= 12;
                        } else if (i5 == 0) {
                            i5 = 12;
                        }
                        i = 0;
                    } else {
                        i = 1;
                    }
                    if (i2 < 2000) {
                        i2 = 2000;
                    }
                    byte[] bArr = {-14, 0, EventUtils.MCU_KEY_LEFT_TEMP_ADD, 7, (byte) (i2 - 2000), (byte) i3, (byte) i4, (byte) i5, (byte) i6, (byte) i7, (byte) (1 ^ i)};
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                    }
                }
            }

            private void sendKSW_0x00_0x65(int i, int i2, int i3, int i4, int i5) {
                if (i >= 0 && i <= 100 && i2 >= 0 && i2 <= 100 && i3 >= 0 && i3 <= 100 && i4 >= 0 && i4 <= 100 && i5 >= 0 && i5 <= 6) {
                    byte[] bArr = {-14, 0, EventUtils.MCU_KEY_LEFT_TEMP_SUB, 5, (byte) i, (byte) i2, (byte) i3, (byte) i4, (byte) i5};
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                    }
                }
            }

            private void sendKSW_0x00_0x66(int i) {
                if (i >= 0) {
                    byte[] bArr = {-14, 0, EventUtils.MCU_KEY_F_CAM, 2, (byte) i, 1};
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                    }
                }
            }

            public void sendKSW_0x00_0x67_third() {
                if (this.mSysProviderOpt.getRecordInteger("KESAIWEI_RECORD_BT_INDEX", 0) != 2 || !this.m_iBTPlayStatus) {
                    byte[] bArr = {-14, 0, EventUtils.MCU_KEY1_2, 1, 13};
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                    }
                }
            }

            /* JADX WARNING: Removed duplicated region for block: B:47:0x009a A[RETURN] */
            /* JADX WARNING: Removed duplicated region for block: B:48:0x009b  */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void sendKSW_0x00_0x67(com.szchoiceway.eventcenter.EventUtils.eSrcMode r10, boolean r11) {
                /*
                    r9 = this;
                    boolean r11 = r9.handshakeFinish
                    if (r11 != 0) goto L_0x0005
                    return
                L_0x0005:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r11 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_Original_TO_ARM
                    r0 = 9
                    r1 = 8
                    r2 = 6
                    r3 = 4
                    r4 = 3
                    r5 = 2
                    r6 = 13
                    r7 = 5
                    r8 = 1
                    if (r10 != r11) goto L_0x0019
                L_0x0015:
                    r0 = 13
                    goto L_0x0096
                L_0x0019:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r11 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MUSIC
                    if (r10 != r11) goto L_0x0020
                    r0 = 1
                    goto L_0x0096
                L_0x0020:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r11 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOVIE
                    if (r10 != r11) goto L_0x0027
                    r0 = 2
                    goto L_0x0096
                L_0x0027:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r11 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BT
                    if (r10 != r11) goto L_0x002e
                    r0 = 3
                    goto L_0x0096
                L_0x002e:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r11 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_BTMUSIC
                    if (r10 != r11) goto L_0x0034
                    r0 = 4
                    goto L_0x0096
                L_0x0034:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r11 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_DVR
                    if (r10 != r11) goto L_0x003c
                    r9.iInterfaceStatus_KSW = r7
                    r0 = 5
                    goto L_0x0096
                L_0x003c:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r11 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_AUX
                    if (r10 != r11) goto L_0x0044
                    r9.iInterfaceStatus_KSW = r2
                    r0 = 6
                    goto L_0x0096
                L_0x0044:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r11 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_MOBILE_APP
                    if (r10 != r11) goto L_0x004a
                    r0 = 7
                    goto L_0x0096
                L_0x004a:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r11 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_DVD
                    if (r10 != r11) goto L_0x0082
                    java.lang.String r11 = com.szchoiceway.eventcenter.EventUtils.CurTopPackage(r9)
                    java.lang.StringBuilder r0 = new java.lang.StringBuilder
                    r0.<init>()
                    java.lang.String r2 = "sendKSW_0x00_0x67: curTopActivity = "
                    r0.append(r2)
                    r0.append(r11)
                    java.lang.String r0 = r0.toString()
                    java.lang.String r2 = "EventService"
                    android.util.Log.i(r2, r0)
                    java.lang.String r0 = "com.szchoiceway.dvdplayer"
                    boolean r0 = r0.endsWith(r11)
                    if (r0 == 0) goto L_0x0075
                    r11 = 12
                    r9.iInterfaceStatus_KSW = r11
                    goto L_0x007f
                L_0x0075:
                    java.lang.String r0 = "com.szchoiceway.ksw_dvd"
                    boolean r11 = r0.endsWith(r11)
                    if (r11 == 0) goto L_0x007f
                    r9.iInterfaceStatus_KSW = r1
                L_0x007f:
                    r0 = 8
                    goto L_0x0096
                L_0x0082:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r11 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_CMMB
                    if (r10 != r11) goto L_0x0089
                    r9.iInterfaceStatus_KSW = r0
                    goto L_0x0096
                L_0x0089:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r11 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_RADIO
                    if (r10 != r11) goto L_0x0090
                    r0 = 10
                    goto L_0x0096
                L_0x0090:
                    com.szchoiceway.eventcenter.EventUtils$eSrcMode r11 = com.szchoiceway.eventcenter.EventUtils.eSrcMode.SRC_FRONT_CAMERA
                    if (r10 != r11) goto L_0x0015
                    r0 = 11
                L_0x0096:
                    r11 = 31
                    if (r0 != r11) goto L_0x009b
                    return
                L_0x009b:
                    com.szchoiceway.eventcenter.SysProviderOpt r11 = r9.mSysProviderOpt
                    if (r11 == 0) goto L_0x00b9
                    java.lang.StringBuilder r1 = new java.lang.StringBuilder
                    r1.<init>()
                    java.lang.String r2 = ""
                    r1.append(r2)
                    byte r10 = r10.getValue()
                    r1.append(r10)
                    java.lang.String r10 = r1.toString()
                    java.lang.String r1 = "KSW_ACC_ON_FOCUS"
                    r11.updateRecord(r1, r10)
                L_0x00b9:
                    r9.kesaiwei_m_iMode = r0
                    byte[] r10 = new byte[r7]
                    r11 = -14
                    r1 = 0
                    r10[r1] = r11
                    r10[r8] = r1
                    r11 = 103(0x67, float:1.44E-43)
                    r10[r5] = r11
                    r10[r4] = r8
                    r10[r3] = r0
                    com.szchoiceway.eventcenter.EventService$SendThread r11 = r9.mSendThread
                    if (r11 == 0) goto L_0x00d3
                    r11.notifyToSend(r10)
                L_0x00d3:
                    return
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.sendKSW_0x00_0x67(com.szchoiceway.eventcenter.EventUtils$eSrcMode, boolean):void");
            }

            public void sendKSW_0x00_0x68(int i, int i2) {
                if (i >= 0) {
                    byte[] bArr = {-14, 0, EventUtils.MCU_KEY1_3, 2, (byte) i, (byte) i2};
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                    }
                }
            }

            public void sendKSW_0x00_0x69(byte b, byte b2, byte b3) {
                Log.i(TAG, "sendKSW_0x00_0x69: byPara0 = " + b + ", byPara1 = " + b2);
                byte[] bArr = {-14, 0, EventUtils.MCU_KEY1_4, 3, b, b2, b3};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private void sendKSW_0x00_0x6A(int i, int i2) {
                Log.i(TAG, "sendKSW_0x00_0x6A: byParaKSW endBackCar 7770 = " + i + ", byPara1 = " + i2);
                byte[] bArr = {-14, 0, 106, 2, (byte) i, (byte) i2};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private void sendKSW_0x00_0x6B(byte b, int i, int i2, int i3) {
                byte[] bArr;
                byte b2 = b;
                int i4 = i;
                int i5 = i2;
                int i6 = i3;
                Log.i(TAG, "sendKSW_0x00_0x6B: iMode = " + b2 + ", iX = " + i4 + ", iY = " + i5 + ", iClickStatus = " + i6);
                boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_SEND_TOUCH_DATA_CONTINUED, false);
                if (i6 != 2 || (b2 == 2 && recordBoolean)) {
                    int i7 = i4 / 256;
                    int i8 = i4 % 256;
                    int i9 = i5 / 256;
                    int i10 = i5 % 256;
                    if (recordBoolean) {
                        bArr = new byte[]{-14, 0, EventUtils.MCU_KEY2_10, 6, 10, (byte) i7, (byte) i8, (byte) i9, (byte) i10, (byte) i6};
                    } else {
                        bArr = new byte[]{-14, 0, EventUtils.MCU_KEY2_10, 6, b2, (byte) i7, (byte) i8, (byte) i9, (byte) i10, (byte) i6};
                    }
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                    }
                }
            }

            public void sendKSW_0x00_0x70(int i, int i2) {
                int i3;
                byte b = (byte) i;
                if (b != 15 || i2 == 0) {
                    i3 = 0;
                } else {
                    i3 = i2;
                    i2 = 1;
                }
                if (b == 30 && i2 == 1) {
                    i3 = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_REVERSE_EXIT_TIME_CUSTOMIZE, 0);
                }
                byte[] bArr = {-14, 0, 112, 3, b, (byte) i2, (byte) i3};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private void sendKSW_0x00_0x71(int i) {
                byte[] bArr = {-14, 0, 113, 1, (byte) i};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private void sendKSW_0x00_0x73(int i, int i2, int i3, int i4) {
                if (i < 0 || i > 5) {
                    i = 0;
                }
                if (i2 < 0 || i2 > 24) {
                    i2 = 12;
                }
                if (i3 < 0 || i3 > 24) {
                    i3 = 12;
                }
                if (i4 < 0 || i4 > 24) {
                    i4 = 12;
                }
                byte[] bArr = {-14, 0, 115, 4, (byte) i2, (byte) i3, (byte) i4, (byte) i};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private void sendKSW_0x00_0x74(int i) {
                byte[] bArr = {-14, 0, EventUtils.CMD_WHEEL_STATE, 1, (byte) i};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private void sendKSW_0x00_0x75(boolean z, int i) {
                byte[] bArr = {-14, 0, 117, 3, z ? (byte) 1 : 0, (byte) ((i >> 8) & 255), (byte) (i & 255)};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            /* access modifiers changed from: private */
            public void sendKSW_0x00_0x76(int i, int i2, int i3) {
                byte[] bArr = {-14, 0, 118, 3, (byte) i, (byte) i2, (byte) i3};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private void sendKSW_0x00_0x77(int i, int i2, int i3, int i4) {
                Log.i(TAG, "sendKSW_0x00_0x77: byPara0 = " + i + ",byPara1 = " + i2 + ",byPara2 = " + i3 + ",type = " + i4);
                byte[] bArr = {-14, 0, EventUtils.CMD_DSP_TYTE, 3, (byte) i, (byte) i2, (byte) i3, (byte) i4};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private void sendKSW_0x00_0x78(int i, int i2) {
                Log.i(TAG, "sendKSW_0x00_0x78: byPara0 = " + i + ",byPara1 = " + i2);
                byte[] bArr = {-14, 0, EventUtils.CMD_MUTE, 2, (byte) i, (byte) i2};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private void sendKSW_0x00_0x7d(int i) {
                byte[] bArr = {-14, 0, EventUtils.CMD_RADIO_ONOFF, 4, 3, (byte) i, 0, 0};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private void sendKswPlatformCode() {
                double d = (double) 256;
                int random = ((int) (Math.random() * d)) + 0;
                int random2 = ((int) (Math.random() * d)) + 0;
                int random3 = ((int) (Math.random() * d)) + 0;
                Log.d(TAG, "sendKswPlatformCode randomNum0 = " + random + ", randomNum1 = " + random2 + ", randomNum2 = " + random3);
                byte b = (byte) random;
                byte b2 = (byte) random2;
                byte b3 = (byte) random3;
                byte[] bArr = {38, b, b2, b3};
                Log.d(TAG, "sendKswPlatformCode code = " + getCRC8(bArr));
                byte[] bArr2 = {-14, 0, EventUtils.CMD_KEY_AD, 5, 38, b, b2, b3, getCRC8(bArr)};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr2);
                }
            }

            public void sendKSW_0x00_0x74_all() {
                sendKSW_0x00_0x74(5);
                sendKSW_0x00_0x74(6);
                sendKSW_0x00_0x74(8);
                sendKSW_0x00_0x74(9);
            }

            private void ksw_initSendBL() {
                sendKSW_0x00_0x6C((byte) getSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, 50));
            }

            private void sendKSW_0x00_0x6C(byte b) {
                byte[] bArr = {-14, 0, EventUtils.MCU_KEY1_5, 2, 1, b};
                if (this.mSendThread != null) {
                    Log.i(TAG, "--->>> KSW sendKSW_0x00_0x6C = " + EventUtils.bytesToHexString(bArr));
                    this.mSendThread.notifyToSend(bArr);
                }
            }

            private void sendKSW_0x00_0x6C() {
                byte[] bArr = {-14, 0, EventUtils.MCU_KEY1_5, 2, 2, true ^ this.m_isOff_BackLight_KSW};
                if (this.mSendThread != null) {
                    Log.i(TAG, "--->>> KSW sendKSW_0x00_0x6C = " + EventUtils.bytesToHexString(bArr));
                    this.mSendThread.notifyToSend(bArr);
                }
            }

            private void sendKSW_0x00_0x6F(int i) {
                byte[] bArr = {-14, 0, 111, 1, (byte) i};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void sendBeatTimer_KSW(int i) {
                if (i == 1) {
                    sendKSW_0x00_0x6F(1);
                    this.mEventHandler.removeMessages(EventUtils.HANDLER_HEART_BEAT_TIMER);
                    this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_HEART_BEAT_TIMER, 2000);
                } else if (i == 2) {
                    sendKSW_0x00_0x6F(2);
                } else if (i == 0) {
                    sendKSW_0x00_0x6F(0);
                    this.mEventHandler.removeMessages(EventUtils.HANDLER_HEART_BEAT_TIMER);
                }
            }

            public void sendKSWInterfaceState() {
                this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_INTERFACE_STATE);
                this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_INTERFACE_STATE, 5000);
            }

            public void kill3rdMusicAPK() {
                List<ActivityManager.RunningTaskInfo> runningTasks = ((ActivityManager) getSystemService("activity")).getRunningTasks(100);
                if (runningTasks != null && runningTasks.size() > 0) {
                    for (int i = 1; i < runningTasks.size(); i++) {
                        ComponentName componentName = runningTasks.get(i).topActivity;
                        for (int i2 = 0; i2 < this.musicPkgLst.length; i2++) {
                            if (componentName.getPackageName().equals(this.musicPkgLst[i2])) {
                                Log.i(TAG, "Music APK: " + componentName.getPackageName());
                                EventUtils.killProcess(this.musicPkgLst[i2]);
                            }
                        }
                    }
                }
            }

            public void SetCon_bri_hue(int i) {
                Log.e(TAG, " ****SetCon_bri_hue**** ");
                try {
                    FileOutputStream fileOutputStream = new FileOutputStream("/sys/camera_bch/camera_bch");
                    Log.i(TAG, "SetCon_bri_hue= fos != null");
                    String str = BuildConfig.FLAVOR + i;
                    Log.e(TAG, "SetCon_bri_hue str " + str);
                    byte[] bArr = new byte[str.length()];
                    fileOutputStream.write(str.getBytes());
                    fileOutputStream.close();
                } catch (IOException e) {
                    Log.e(TAG, "SetCon_bri_hue error " + e.toString());
                }
            }

            public void ProcessKey_cheku_bottom(int i) {
                byte b = (byte) i;
                Log.i(TAG, "---->>> byTempKey = " + b);
                switch (b) {
                    case 1:
                        sendKeyDownUpSync(4);
                        return;
                    case 2:
                        Log.i(TAG, "--->>> KeyEvent.KEYCODE_HOME 555");
                        sendKeyDownUpSync(3);
                        return;
                    case 3:
                        EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.SET_MODE_PACKAGE_NAME, EventUtils.SET_MODE_CLASS_NAME);
                        return;
                    case 4:
                        EventUtils.startActivityIfNotRuning(getApplicationContext(), "com.szchoiceway.navigation", EventUtils.NAV_MODE_CLASS_NAME);
                        return;
                    case 5:
                        EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.BT_MODE_PACKAGE_NAME, EventUtils.BT_MODE_CLASS_NAME);
                        return;
                    case 6:
                        if (this.mValidMode == EventUtils.eSrcMode.SRC_MUSIC) {
                            EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.MOVIE_MODE_PACKAGE_NAME, EventUtils.MOVIE_MODE_CLASS_NAME);
                            return;
                        } else {
                            EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.MUSIC_MODE_PACKAGE_NAME, EventUtils.MUSIC_MODE_CLASS_NAME);
                            return;
                        }
                    case 7:
                        sendBroadcast(new Intent(EventUtils.CAN_SHOW_AIR_INFO_EVT));
                        return;
                    case 8:
                        EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.DVR_MODE_PACKAGE_NAME, EventUtils.DVR_MODE_CLASS_NAME);
                        return;
                    case 10:
                        PowerOff(true);
                        Log.i(TAG, "--->>> BRZH PowerOff 555");
                        return;
                    default:
                        return;
                }
            }

            public void ProcessKey_cheku_bottom(int i, boolean z) {
                if (i == 9) {
                    byte[] bArr = {73, 6, z ? (byte) 1 : 0};
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                    }
                }
            }

            public void SendVol_KSW(boolean z, int i, int i2, int i3) {
                if (i == 10) {
                    sendKSW_0x00_0x6A(i2, i3);
                } else {
                    sendKSW_0x00_0x62(z, i, i2, i3);
                }
            }

            public void send_KSW_page2_vol_info(int i, int i2, int i3, int i4) {
                sendKSW_0x00_0x73(i, i2 + 12, i3 + 12, i4 + 12);
            }

            public boolean getmIsAddMouseView() {
                return mIsAddMouseView;
            }

            public BackcarEvent getBackcarEvt() {
                return this.mBackcarEvt;
            }

            public void openTVout(int i, boolean z) {
                Log.i(TAG, "openTVout: controller=" + i + "---open=" + z);
                synchronized (this) {
                    if (z) {
                        this.mTVOutController = i;
                        openTVout(true);
                    } else if (this.mTVOutController == i || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_NULL.getIntValue()) {
                        openTVout(false);
                    }
                }
            }

            public void sendBroadcastCanKeyExtra(String str, int i) {
                Intent intent = new Intent(str);
                intent.putExtra(EventUtils.ZXW_CAN_KEY_EVT_EXTRA, i);
                sendBroadcast(intent);
            }

            public void sendBroadcastPark_KSW() {
                Log.i(TAG, "--->>> KSW b_kesaiwei_chk_Video_Driving_Ban = " + this.b_kesaiwei_chk_Video_Driving_Ban);
                sendBroadcast(new Intent(EventUtils.KSW_ZXW_VIDEO_BAN_PARK));
            }

            public void setArmView_KeSaiwei() {
                if (this.m_iUITypeVer == 102) {
                    Intent intent = new Intent("com.szchoiceway.zxwauto.ACTION_AUTOMODEDISPLAY");
                    intent.putExtra("AndroidAutoModeState", 1);
                    sendBroadcast(intent);
                } else if (this.b_Original_View) {
                    sendKSW_0x00_0x69((byte) 18, (byte) 1, (byte) 0);
                }
            }

            public void SendSwitchModeExtra_KSW(int i) {
                Log.i(TAG, "--->>> KSW 888 ES s send: iMode = " + i);
                if (i == 1) {
                    sendKSW_0x00_0x67(EventUtils.eSrcMode.SRC_AUX, true);
                } else if (i == 2) {
                    sendKSW_0x00_0x67(EventUtils.eSrcMode.SRC_DVR, true);
                } else if (i == 3) {
                    sendKSW_0x00_0x67(EventUtils.eSrcMode.SRC_CMMB, true);
                } else if (i == 4) {
                    sendKSW_0x00_0x67(EventUtils.eSrcMode.SRC_DVD, true);
                } else if (i == 5) {
                    sendKSW_0x00_0x67(EventUtils.eSrcMode.SRC_RADIO, true);
                    setCurModeCallback(EventUtils.eSrcMode.SRC_RADIO.getIntValue(), this.mModeCallback);
                }
            }

            public void backcarConnected_KeSaiWei(boolean z) {
                if (z) {
                    if (!this.b_Conn_KSW) {
                        this.b_Conn_KSW = true;
                        this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_BACKCAR_START_KSW);
                    }
                    if (this.m_isOff_BackLight_KSW) {
                        this.mBackCarWhenOffScreen = true;
                        backLightOn_KSW();
                    }
                    this.hasEnterBackcar = true;
                    return;
                }
                if (this.b_Conn_KSW) {
                    this.b_Conn_KSW = false;
                    this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_BACKCAR_END_KSW);
                }
                if (this.mBackCarWhenOffScreen) {
                    this.mBackCarWhenOffScreen = false;
                    backLightOff_KSW();
                }
                this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_END_BACKCAR);
                this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_END_BACKCAR, 3000);
            }

            /* access modifiers changed from: private */
            public void showMouseView() {
                MouseFloatEvent mouseFloatEvent = this.m_MouseFloatEvent;
                if (mouseFloatEvent != null) {
                    if (!this.m_bFirstMouse) {
                        this.m_bFirstMouse = true;
                        mouseFloatEvent.exitMouseMini();
                    }
                    this.m_MouseFloatEvent.startMouseMini();
                    this.mEventHandler.removeMessages(EventUtils.HANDLER_DELAY_MOUSE_HIDE);
                    this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_DELAY_MOUSE_HIDE, 5000);
                }
            }

            /* access modifiers changed from: private */
            public void hideMouseView() {
                MouseFloatEvent mouseFloatEvent = this.m_MouseFloatEvent;
                if (mouseFloatEvent != null) {
                    mouseFloatEvent.exitMouseMini();
                }
            }

            private void updateMouseParam(int i, int i2) {
                MouseFloatEvent mouseFloatEvent = this.m_MouseFloatEvent;
                if (mouseFloatEvent != null) {
                    mouseFloatEvent.updateMouseParam(i, i2);
                }
            }

            public void backLightOff_KSW() {
                if (!this.m_isOff_BackLight_KSW) {
                    Log.i(TAG, "--->>> backLightOff_KSW");
                    this.m_isOff_BackLight_KSW = true;
                    sendKSW_0x00_0x6C();
                    this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_BACKLIGHT_START_KSW, 100);
                }
            }

            public void backLightOn_KSW() {
                if (this.m_isOff_BackLight_KSW) {
                    Log.i(TAG, "--->>> backLightOn_KSW");
                    this.m_isOff_BackLight_KSW = false;
                    sendKSW_0x00_0x6C();
                    this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_BACKLIGHT_END_KSW);
                }
            }

            private void killApp_KeSaiWei() {
                Log.i(TAG, "--->>> KaiSaiWei killApp");
                EventUtils.killProcess(EventUtils.MUSIC_MODE_PACKAGE_NAME);
                EventUtils.killProcess(EventUtils.MOVIE_MODE_PACKAGE_NAME);
                EventUtils.killProcess(EventUtils.PHONEAPP_MODE_PACKAGE_NAME);
                EventUtils.killProcess(EventUtils.DASHBOARD_MODE_PACKAGE_NAME);
                EventUtils.killProcess("cn.kuwo.kwmusiccar");
                kill3rdMusicAPK();
                sendBroadcast(new Intent(EventUtils.KSW_STOP_BTMUSIC_SWITCH));
                setCurModeCallback(EventUtils.eSrcMode.SRC_ANDROID.getIntValue(), this.mModeCallback);
            }

            /* JADX WARNING: Removed duplicated region for block: B:63:0x0112  */
            /* JADX WARNING: Removed duplicated region for block: B:65:? A[RETURN, SYNTHETIC] */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void notifyLocalLanguageChanged_KSW() {
                /*
                    r6 = this;
                    java.util.Locale r0 = java.util.Locale.getDefault()
                    java.lang.String r0 = r0.getLanguage()
                    java.util.Locale r1 = java.util.Locale.getDefault()
                    java.lang.String r1 = r1.getCountry()
                    java.lang.StringBuilder r2 = new java.lang.StringBuilder
                    r2.<init>()
                    java.lang.String r3 = "--->>> lan = "
                    r2.append(r3)
                    r2.append(r0)
                    java.lang.String r3 = ", country = "
                    r2.append(r3)
                    r2.append(r1)
                    java.lang.String r2 = r2.toString()
                    java.lang.String r3 = "EventService"
                    android.util.Log.i(r3, r2)
                    java.lang.String r2 = "zh"
                    boolean r4 = r0.equals(r2)
                    r5 = 0
                    if (r4 == 0) goto L_0x0042
                    java.lang.String r4 = "CN"
                    boolean r4 = r1.equals(r4)
                    if (r4 == 0) goto L_0x0042
                L_0x003f:
                    r0 = 0
                    goto L_0x010e
                L_0x0042:
                    boolean r2 = r0.equals(r2)
                    if (r2 == 0) goto L_0x0053
                    java.lang.String r2 = "TW"
                    boolean r1 = r1.equals(r2)
                    if (r1 == 0) goto L_0x0053
                    r0 = 1
                    goto L_0x010e
                L_0x0053:
                    java.lang.String r1 = "en"
                    boolean r1 = r0.equals(r1)
                    if (r1 == 0) goto L_0x005e
                    r0 = 2
                    goto L_0x010e
                L_0x005e:
                    java.lang.String r1 = "ar"
                    boolean r1 = r0.equals(r1)
                    if (r1 == 0) goto L_0x0069
                    r0 = 3
                    goto L_0x010e
                L_0x0069:
                    java.lang.String r1 = "de"
                    boolean r1 = r0.equals(r1)
                    if (r1 == 0) goto L_0x0074
                    r0 = 4
                    goto L_0x010e
                L_0x0074:
                    java.lang.String r1 = "el"
                    boolean r1 = r0.equals(r1)
                    if (r1 == 0) goto L_0x007f
                    r0 = 5
                    goto L_0x010e
                L_0x007f:
                    java.lang.String r1 = "es"
                    boolean r1 = r1.equals(r0)
                    if (r1 == 0) goto L_0x008a
                    r0 = 6
                    goto L_0x010e
                L_0x008a:
                    java.lang.String r1 = "fr"
                    boolean r1 = r1.equals(r0)
                    if (r1 == 0) goto L_0x0095
                    r0 = 7
                    goto L_0x010e
                L_0x0095:
                    java.lang.String r1 = "it"
                    boolean r1 = r1.equals(r0)
                    if (r1 == 0) goto L_0x00a1
                    r0 = 8
                    goto L_0x010e
                L_0x00a1:
                    java.lang.String r1 = "iw"
                    boolean r1 = r1.equals(r0)
                    if (r1 == 0) goto L_0x00ac
                    r0 = 9
                    goto L_0x010e
                L_0x00ac:
                    java.lang.String r1 = "ja"
                    boolean r1 = r1.equals(r0)
                    if (r1 == 0) goto L_0x00b7
                    r0 = 10
                    goto L_0x010e
                L_0x00b7:
                    java.lang.String r1 = "ko"
                    boolean r1 = r1.equals(r0)
                    if (r1 == 0) goto L_0x00c2
                    r0 = 11
                    goto L_0x010e
                L_0x00c2:
                    java.lang.String r1 = "nl"
                    boolean r1 = r1.equals(r0)
                    if (r1 == 0) goto L_0x00cd
                    r0 = 12
                    goto L_0x010e
                L_0x00cd:
                    java.lang.String r1 = "pl"
                    boolean r1 = r1.equals(r0)
                    if (r1 == 0) goto L_0x00d8
                    r0 = 13
                    goto L_0x010e
                L_0x00d8:
                    java.lang.String r1 = "pt"
                    boolean r1 = r1.equals(r0)
                    if (r1 == 0) goto L_0x00e3
                    r0 = 14
                    goto L_0x010e
                L_0x00e3:
                    java.lang.String r1 = "ru"
                    boolean r1 = r1.equals(r0)
                    if (r1 == 0) goto L_0x00ee
                    r0 = 15
                    goto L_0x010e
                L_0x00ee:
                    java.lang.String r1 = "th"
                    boolean r1 = r1.equals(r0)
                    if (r1 == 0) goto L_0x00f9
                    r0 = 16
                    goto L_0x010e
                L_0x00f9:
                    java.lang.String r1 = "tr"
                    boolean r1 = r1.equals(r0)
                    if (r1 == 0) goto L_0x0104
                    r0 = 17
                    goto L_0x010e
                L_0x0104:
                    java.lang.String r1 = "vi"
                    boolean r0 = r1.equals(r0)
                    if (r0 == 0) goto L_0x003f
                    r0 = 18
                L_0x010e:
                    com.szchoiceway.eventcenter.SysProviderOpt r1 = r6.mSysProviderOpt
                    if (r1 == 0) goto L_0x0141
                    java.lang.StringBuilder r1 = new java.lang.StringBuilder
                    r1.<init>()
                    java.lang.String r2 = "notifyLocalLanguageChanged_KSW languageIndex = "
                    r1.append(r2)
                    r1.append(r0)
                    java.lang.String r1 = r1.toString()
                    android.util.Log.d(r3, r1)
                    com.szchoiceway.eventcenter.SysProviderOpt r1 = r6.mSysProviderOpt
                    java.lang.StringBuilder r2 = new java.lang.StringBuilder
                    r2.<init>()
                    java.lang.String r3 = ""
                    r2.append(r3)
                    r2.append(r0)
                    java.lang.String r0 = r2.toString()
                    java.lang.String r2 = "KESAIWEI_SYS_LANGUAGE"
                    r1.updateRecord(r2, r0)
                    r6.ksw_Send8902BackcarMod(r5)
                L_0x0141:
                    return
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.notifyLocalLanguageChanged_KSW():void");
            }

            private class UNavSndObserver extends UEventObserver {
                private int mPid;

                private UNavSndObserver() {
                    this.mPid = 0;
                }

                /* JADX WARNING: Code restructure failed: missing block: B:76:?, code lost:
                    return;
                 */
                /* JADX WARNING: Removed duplicated region for block: B:19:0x009c A[Catch:{ Exception -> 0x01a9 }, DONT_GENERATE] */
                /* JADX WARNING: Removed duplicated region for block: B:21:0x009e A[Catch:{ Exception -> 0x01a9 }] */
                /* Code decompiled incorrectly, please refer to instructions dump. */
                public void onUEvent(android.os.UEventObserver.UEvent r9) {
                    /*
                        r8 = this;
                        java.lang.String r0 = r9.toString()
                        com.szchoiceway.eventcenter.EventService r1 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x01a9 }
                        java.lang.String r9 = r9.toString()     // Catch:{ Exception -> 0x01a9 }
                        java.lang.String r2 = "STATE"
                        java.lang.String r9 = r1.getState(r9, r2)     // Catch:{ Exception -> 0x01a9 }
                        int r9 = java.lang.Integer.parseInt(r9)     // Catch:{ Exception -> 0x01a9 }
                        r8.mPid = r9     // Catch:{ Exception -> 0x01a9 }
                        com.szchoiceway.eventcenter.EventService r1 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x01a9 }
                        java.lang.String r9 = r1.getPidProcessName(r9)     // Catch:{ Exception -> 0x01a9 }
                        java.lang.String r9 = r9.trim()     // Catch:{ Exception -> 0x01a9 }
                        java.lang.String r1 = "EventService"
                        java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x01a9 }
                        r2.<init>()     // Catch:{ Exception -> 0x01a9 }
                        java.lang.String r3 = "onUEvent pkgName = "
                        r2.append(r3)     // Catch:{ Exception -> 0x01a9 }
                        r2.append(r9)     // Catch:{ Exception -> 0x01a9 }
                        java.lang.String r3 = ", eventStr = "
                        r2.append(r3)     // Catch:{ Exception -> 0x01a9 }
                        r2.append(r0)     // Catch:{ Exception -> 0x01a9 }
                        java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x01a9 }
                        android.util.Log.d(r1, r2)     // Catch:{ Exception -> 0x01a9 }
                        com.szchoiceway.eventcenter.EventService r1 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ Exception -> 0x01a9 }
                        java.lang.Object r1 = r1.mLock     // Catch:{ Exception -> 0x01a9 }
                        monitor-enter(r1)     // Catch:{ Exception -> 0x01a9 }
                        com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        java.lang.String r3 = "MODE"
                        java.lang.String r2 = r2.getState(r0, r3)     // Catch:{ all -> 0x01a6 }
                        java.lang.String r3 = "START_SND_PID"
                        boolean r2 = r2.equals(r3)     // Catch:{ all -> 0x01a6 }
                        r3 = 3
                        r4 = 4
                        r5 = 1
                        r6 = 0
                        if (r2 == 0) goto L_0x00e1
                        java.lang.String r0 = "EventService"
                        java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x01a6 }
                        r2.<init>()     // Catch:{ all -> 0x01a6 }
                        java.lang.String r7 = "now start sound pkg is "
                        r2.append(r7)     // Catch:{ all -> 0x01a6 }
                        r2.append(r9)     // Catch:{ all -> 0x01a6 }
                        java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x01a6 }
                        android.util.Log.d(r0, r2)     // Catch:{ all -> 0x01a6 }
                        com.szchoiceway.eventcenter.EventService r0 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        boolean r0 = r0.isNaviPkg(r9)     // Catch:{ all -> 0x01a6 }
                        if (r0 == 0) goto L_0x01a4
                        com.szchoiceway.eventcenter.EventService r0 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        java.util.List r0 = r0.soundNaviPkgList     // Catch:{ all -> 0x01a6 }
                        if (r0 == 0) goto L_0x01a4
                        com.szchoiceway.eventcenter.EventService r0 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        java.util.List r0 = r0.soundNaviPkgList     // Catch:{ all -> 0x01a6 }
                        r0.add(r9)     // Catch:{ all -> 0x01a6 }
                        com.szchoiceway.eventcenter.EventService r0 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        int r0 = r0.mTelephoneState     // Catch:{ all -> 0x01a6 }
                        if (r0 != 0) goto L_0x0099
                        com.szchoiceway.eventcenter.EventService r0 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        boolean r0 = r0.bZlinkCarplayPhoneOn     // Catch:{ all -> 0x01a6 }
                        if (r0 == 0) goto L_0x0097
                        goto L_0x0099
                    L_0x0097:
                        r0 = 0
                        goto L_0x009a
                    L_0x0099:
                        r0 = 1
                    L_0x009a:
                        if (r0 == 0) goto L_0x009e
                        monitor-exit(r1)     // Catch:{ all -> 0x01a6 }
                        return
                    L_0x009e:
                        java.lang.String r0 = "com.nng.igo"
                        boolean r9 = r9.startsWith(r0)     // Catch:{ all -> 0x01a6 }
                        if (r9 == 0) goto L_0x00c6
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        int r9 = r9.m_iBTStatus     // Catch:{ all -> 0x01a6 }
                        if (r9 >= r4) goto L_0x00c6
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        android.media.AudioManager r9 = r9.audioManager     // Catch:{ all -> 0x01a6 }
                        if (r9 == 0) goto L_0x00c6
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        android.media.AudioManager r9 = r9.audioManager     // Catch:{ all -> 0x01a6 }
                        r0 = 10
                        r9.setStreamVolume(r3, r0, r6)     // Catch:{ all -> 0x01a6 }
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        boolean unused = r9.hasIgoDownVolume = r5     // Catch:{ all -> 0x01a6 }
                    L_0x00c6:
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        java.util.List r9 = r9.soundNaviPkgList     // Catch:{ all -> 0x01a6 }
                        if (r9 == 0) goto L_0x01a4
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        java.util.List r9 = r9.soundNaviPkgList     // Catch:{ all -> 0x01a6 }
                        int r9 = r9.size()     // Catch:{ all -> 0x01a6 }
                        if (r9 != r5) goto L_0x01a4
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        r9.startNaviSound()     // Catch:{ all -> 0x01a6 }
                        goto L_0x01a4
                    L_0x00e1:
                        com.szchoiceway.eventcenter.EventService r2 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        java.lang.String r7 = "MODE"
                        java.lang.String r2 = r2.getState(r0, r7)     // Catch:{ all -> 0x01a6 }
                        java.lang.String r7 = "STOP_SND_PID"
                        boolean r2 = r2.equals(r7)     // Catch:{ all -> 0x01a6 }
                        if (r2 == 0) goto L_0x0176
                        java.lang.String r0 = "EventService"
                        java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ all -> 0x01a6 }
                        r2.<init>()     // Catch:{ all -> 0x01a6 }
                        java.lang.String r7 = "now stop sound pkg is "
                        r2.append(r7)     // Catch:{ all -> 0x01a6 }
                        r2.append(r9)     // Catch:{ all -> 0x01a6 }
                        java.lang.String r2 = r2.toString()     // Catch:{ all -> 0x01a6 }
                        android.util.Log.d(r0, r2)     // Catch:{ all -> 0x01a6 }
                        com.szchoiceway.eventcenter.EventService r0 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        boolean r0 = r0.isNaviPkg(r9)     // Catch:{ all -> 0x01a6 }
                        if (r0 == 0) goto L_0x01a4
                        com.szchoiceway.eventcenter.EventService r0 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        java.util.List r0 = r0.soundNaviPkgList     // Catch:{ all -> 0x01a6 }
                        if (r0 == 0) goto L_0x0120
                        com.szchoiceway.eventcenter.EventService r0 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        java.util.List r0 = r0.soundNaviPkgList     // Catch:{ all -> 0x01a6 }
                        r0.remove(r9)     // Catch:{ all -> 0x01a6 }
                    L_0x0120:
                        com.szchoiceway.eventcenter.EventService r0 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        int r0 = r0.mTelephoneState     // Catch:{ all -> 0x01a6 }
                        if (r0 != 0) goto L_0x0130
                        com.szchoiceway.eventcenter.EventService r0 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        boolean r0 = r0.bZlinkCarplayPhoneOn     // Catch:{ all -> 0x01a6 }
                        if (r0 == 0) goto L_0x012f
                        goto L_0x0130
                    L_0x012f:
                        r5 = 0
                    L_0x0130:
                        if (r5 == 0) goto L_0x0134
                        monitor-exit(r1)     // Catch:{ all -> 0x01a6 }
                        return
                    L_0x0134:
                        java.lang.String r0 = "com.nng.igo"
                        boolean r9 = r9.startsWith(r0)     // Catch:{ all -> 0x01a6 }
                        if (r9 == 0) goto L_0x015c
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        int r9 = r9.m_iBTStatus     // Catch:{ all -> 0x01a6 }
                        if (r9 >= r4) goto L_0x015c
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        android.media.AudioManager r9 = r9.audioManager     // Catch:{ all -> 0x01a6 }
                        if (r9 == 0) goto L_0x015c
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        android.media.AudioManager r9 = r9.audioManager     // Catch:{ all -> 0x01a6 }
                        r0 = 15
                        r9.setStreamVolume(r3, r0, r6)     // Catch:{ all -> 0x01a6 }
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        boolean unused = r9.hasIgoDownVolume = r6     // Catch:{ all -> 0x01a6 }
                    L_0x015c:
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        java.util.List r9 = r9.soundNaviPkgList     // Catch:{ all -> 0x01a6 }
                        if (r9 == 0) goto L_0x01a4
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        java.util.List r9 = r9.soundNaviPkgList     // Catch:{ all -> 0x01a6 }
                        int r9 = r9.size()     // Catch:{ all -> 0x01a6 }
                        if (r9 != 0) goto L_0x01a4
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        r9.endNaviSound()     // Catch:{ all -> 0x01a6 }
                        goto L_0x01a4
                    L_0x0176:
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        java.lang.String r2 = "MODE"
                        java.lang.String r9 = r9.getState(r0, r2)     // Catch:{ all -> 0x01a6 }
                        java.lang.String r2 = "sound"
                        boolean r9 = r9.equals(r2)     // Catch:{ all -> 0x01a6 }
                        if (r9 == 0) goto L_0x01a4
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        java.lang.String r2 = "STATE"
                        java.lang.String r9 = r9.getState(r0, r2)     // Catch:{ all -> 0x01a6 }
                        java.lang.String r2 = "mute"
                        boolean r9 = r9.equals(r2)     // Catch:{ all -> 0x01a6 }
                        if (r9 == 0) goto L_0x0197
                        goto L_0x01a4
                    L_0x0197:
                        com.szchoiceway.eventcenter.EventService r9 = com.szchoiceway.eventcenter.EventService.this     // Catch:{ all -> 0x01a6 }
                        java.lang.String r2 = "STATE"
                        java.lang.String r9 = r9.getState(r0, r2)     // Catch:{ all -> 0x01a6 }
                        java.lang.String r0 = "unmute"
                        r9.equals(r0)     // Catch:{ all -> 0x01a6 }
                    L_0x01a4:
                        monitor-exit(r1)     // Catch:{ all -> 0x01a6 }
                        goto L_0x01ad
                    L_0x01a6:
                        r9 = move-exception
                        monitor-exit(r1)     // Catch:{ all -> 0x01a6 }
                        throw r9     // Catch:{ Exception -> 0x01a9 }
                    L_0x01a9:
                        r9 = move-exception
                        r9.printStackTrace()
                    L_0x01ad:
                        return
                    */
                    throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.UNavSndObserver.onUEvent(android.os.UEventObserver$UEvent):void");
                }
            }

            /* access modifiers changed from: private */
            public void startNaviSound() {
                sendKSW_0x00_0x69((byte) 19, (byte) 1, (byte) 0);
                this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_CHECK_NAVI_ALIVE);
                this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_CHECK_NAVI_ALIVE, 5000);
            }

            /* access modifiers changed from: private */
            public void endNaviSound() {
                sendKSW_0x00_0x69((byte) 19, (byte) 0, (byte) 0);
                this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_CHECK_NAVI_ALIVE);
            }

            public int getLetterConnectMode() {
                return this.mConnectMode;
            }

            public int getLetterConnectState() {
                return this.mConnectState;
            }

            /* access modifiers changed from: private */
            public int getLetterRunningState() {
                return this.mRunningState;
            }

            /* access modifiers changed from: private */
            public int getLetterMediaSatte() {
                return this.mMediaState;
            }

            /* access modifiers changed from: private */
            public int getLetterRecorderState() {
                return this.mRecorderState;
            }

            /* access modifiers changed from: private */
            public int getLetterTelephoneState() {
                return this.mTelephoneState;
            }

            public class SettingsObserver extends ContentObserver {
                private Context mContext;

                public void onCarletterConnectModeChanged(int i) {
                }

                public void onCarletterRecorderStateChanged(int i) {
                }

                public SettingsObserver(Context context, Handler handler) {
                    super(handler);
                    this.mContext = context;
                }

                public void observer() {
                    ContentResolver contentResolver = this.mContext.getContentResolver();
                    contentResolver.registerContentObserver(Settings.System.getUriFor(CarletterInterface.CL_CARLETTER_CONNECT_MODE), false, this);
                    contentResolver.registerContentObserver(Settings.System.getUriFor(CarletterInterface.CL_CARLETTER_CONNECT_STATE), false, this);
                    contentResolver.registerContentObserver(Settings.System.getUriFor(CarletterInterface.CL_CARLETTER_RUNNING_STATE), false, this);
                    contentResolver.registerContentObserver(Settings.System.getUriFor(CarletterInterface.CL_CARLETTER_MEDIA_STATE), false, this);
                    contentResolver.registerContentObserver(Settings.System.getUriFor(CarletterInterface.CL_CARLETTER_RECORDER_STATE), false, this);
                    contentResolver.registerContentObserver(Settings.System.getUriFor(CarletterInterface.CL_CARLETTER_TELEPHONE_STATE), false, this);
                }

                public void onChange(boolean z) {
                    super.onChange(z);
                    int i = Settings.System.getInt(this.mContext.getContentResolver(), CarletterInterface.CL_CARLETTER_CONNECT_MODE, 0);
                    if (EventService.this.mConnectMode != i) {
                        EventService.this.mConnectMode = i;
                        Log.d(EventService.TAG, "mConnectMode = " + EventService.this.mConnectMode);
                        onCarletterConnectModeChanged(EventService.this.mConnectMode);
                    }
                    int i2 = Settings.System.getInt(this.mContext.getContentResolver(), CarletterInterface.CL_CARLETTER_CONNECT_STATE, 0);
                    if (EventService.this.mConnectState != i2) {
                        EventService.this.mConnectState = i2;
                        onCarletterConnectStateChanged(EventService.this.mConnectState);
                    }
                    int i3 = Settings.System.getInt(this.mContext.getContentResolver(), CarletterInterface.CL_CARLETTER_RUNNING_STATE, 0);
                    if (EventService.this.mRunningState != i3) {
                        int unused = EventService.this.mRunningState = i3;
                        onCarletterRunningStateChanged(EventService.this.mRunningState);
                    }
                    int i4 = Settings.System.getInt(this.mContext.getContentResolver(), CarletterInterface.CL_CARLETTER_MEDIA_STATE, 0);
                    if (EventService.this.mMediaState != i4) {
                        int unused2 = EventService.this.mMediaState = i4;
                        onCarletterMediaStateChanged(EventService.this.mMediaState);
                    }
                    int i5 = Settings.System.getInt(this.mContext.getContentResolver(), CarletterInterface.CL_CARLETTER_RECORDER_STATE, 0);
                    if (EventService.this.mRecorderState != i5) {
                        int unused3 = EventService.this.mRecorderState = i5;
                        onCarletterRecorderStateChanged(EventService.this.mRecorderState);
                    }
                    int i6 = Settings.System.getInt(this.mContext.getContentResolver(), CarletterInterface.CL_CARLETTER_TELEPHONE_STATE, 0);
                    if (EventService.this.mTelephoneState != i6) {
                        int unused4 = EventService.this.mTelephoneState = i6;
                        onCarletterTelephoneStateChanged(EventService.this.mTelephoneState);
                    }
                }

                public void onCarletterConnectStateChanged(int i) {
                    EventService eventService = EventService.this;
                    boolean z = true;
                    if (i != 1) {
                        z = false;
                    }
                    boolean unused = eventService.isLetterConnect = z;
                    boolean unused2 = EventService.this.isLetterConnect;
                    Log.d(EventService.TAG, "letter connect " + EventService.this.isLetterConnect);
                }

                public void onCarletterRunningStateChanged(int i) {
                    Log.d(EventService.TAG, "onCarletterRunningStateChanged mode = " + i);
                    boolean unused = EventService.this.bLetterResume = i == 0;
                    EventService.this.mEventHandler.postDelayed(new Runnable() {
                        public final void run() {
                            EventService.SettingsObserver.this.lambda$onCarletterRunningStateChanged$0$EventService$SettingsObserver();
                        }
                    }, 2000);
                }

                public /* synthetic */ void lambda$onCarletterRunningStateChanged$0$EventService$SettingsObserver() {
                    if (EventService.this.bLetterResume && EventService.this.handshakeFinish && EventService.this.mTelephoneState == 0) {
                        EventService.this.sendKSW_0x00_0x67_third();
                    }
                }

                public void onCarletterMediaStateChanged(int i) {
                    EventService eventService = EventService.this;
                    boolean z = true;
                    if (i != 1) {
                        z = false;
                    }
                    boolean unused = eventService.isLetterPlaying = z;
                }

                public void onCarletterTelephoneStateChanged(int i) {
                    if (EventService.this.mConnectState != 0) {
                        Log.d(EventService.TAG, "telephoneStateChange sate = " + i + ", thirdPhoneOn = " + EventService.this.thirdPhoneOn);
                        if (i == 1 || (i == 2 && !EventService.this.thirdPhoneOn)) {
                            EventService.this.thirdPhoneOn();
                        }
                        if (i == 0) {
                            EventService.this.thirdPhoneOff(false);
                            EventService.this.sendBroadcast(new Intent(EventUtils.ZXW_ACTION_LETTER_PHONE_OFF));
                        }
                    }
                }
            }

            /* access modifiers changed from: private */
            public boolean isNaviPkg(String str) {
                return this.mSysProviderOpt.getRecordValue(SysProviderOpt.NAV_PACKAGENAME, "com.szchoiceway.navigation").equals(str);
            }

            /* access modifiers changed from: private */
            public String getPidProcessName(int i) {
                for (ActivityManager.RunningAppProcessInfo next : ((ActivityManager) getSystemService("activity")).getRunningAppProcesses()) {
                    if (next.pid == i) {
                        return next.processName;
                    }
                }
                return BuildConfig.FLAVOR;
            }

            private int getProcessPid(String str) {
                for (ActivityManager.RunningAppProcessInfo next : ((ActivityManager) getSystemService("activity")).getRunningAppProcesses()) {
                    if (next.processName.startsWith(str)) {
                        return next.pid;
                    }
                }
                return -1;
            }

            /* access modifiers changed from: private */
            public String getState(String str, String str2) {
                String str3;
                int indexOf;
                char[] charArray = str.toCharArray();
                if (!str.contains(str2) || (indexOf = str.indexOf(str2) + str2.length()) >= charArray.length) {
                    str3 = BuildConfig.FLAVOR;
                } else {
                    str3 = BuildConfig.FLAVOR;
                    for (indexOf = str.indexOf(str2) + str2.length(); charArray[indexOf] != ','; indexOf++) {
                        if (indexOf >= charArray.length - 1) {
                            return str3;
                        }
                        if (charArray[indexOf] != '=') {
                            str3 = str3 + charArray[indexOf];
                        }
                    }
                }
                return str3.replace(" ", BuildConfig.FLAVOR);
            }

            private void sendNavStateToMcu(boolean z) {
                Log.i(TAG, "sendNavStateToMcu: navSoundPlaying = " + z);
                byte[] bArr = {63, z ? (byte) 1 : 0};
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            private boolean checkRestoreFactory() {
                SharedPreferences sharedPreferences = getSharedPreferences(EventUtils.ZXW_DATABASE_UI_FILENAME, 4);
                SharedPreferences sharedPreferences2 = getSharedPreferences(EventUtils.ZXW_DATABASE_CARTYPE_FILENAME, 4);
                SharedPreferences sharedPreferences3 = getSharedPreferences(EventUtils.ZXW_DATABASE_CAN_FILENAME, 4);
                SharedPreferences sharedPreferences4 = getSharedPreferences(EventUtils.ZXW_DATABASE_NAVI_LIST_FILENAME, 4);
                SharedPreferences sharedPreferences5 = getSharedPreferences(EventUtils.ZXW_DATABASE_DVR_LIST_FILENAME, 4);
                if (!sharedPreferences.getAll().isEmpty() || !sharedPreferences2.getAll().isEmpty() || !sharedPreferences3.getAll().isEmpty() || !sharedPreferences4.getAll().isEmpty() || !sharedPreferences5.getAll().isEmpty() || SysProviderOpt.getInstance(this).getRecordBoolean(SysProviderOpt.KSW_ACTION_IMPORT_CONFIG, false)) {
                    return false;
                }
                return true;
            }

            private void checkRestoreFactory2() {
                Log.d(TAG, "restoreFactoryCheck 000");
                runCmd("chmod 777 /mnt/privdata1/");
                do {
                } while (!getCmdResult());
                File file2 = new File(ksw_backup_path + ksw_factory_xml_copy_filename);
                File file3 = new File(ksw_backup_path + ksw_lcd_xml_copy_filename);
                this.isImportBackup = true;
                Log.d(TAG, "import true");
                copyMedia();
                copyManual();
                File file4 = new File("/mnt/privdata1/touchParam.txt");
                if (file4.exists()) {
                    try {
                        FileInputStream fileInputStream = new FileInputStream(file4);
                        InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);
                        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
                        StringBuffer stringBuffer = new StringBuffer();
                        while (true) {
                            String readLine = bufferedReader.readLine();
                            if (readLine == null) {
                                break;
                            }
                            stringBuffer.append(readLine);
                        }
                        bufferedReader.close();
                        inputStreamReader.close();
                        fileInputStream.close();
                        Log.d(TAG, "restoreFactoryCheck touchParam = " + stringBuffer);
                        this.mSysProviderOpt.updateRecord(SysProviderOpt.SYS_TOUCH_ORGIN_KEY, stringBuffer.toString());
                        setTouchInfor(this.mSysProviderOpt.getRecordValue(SysProviderOpt.SYS_TOUCH_ORGIN_KEY, stringBuffer.toString()));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                if (!file2.exists() && !file3.exists()) {
                    Log.d(TAG, "restoreFactoryCheck configuration product");
                    this.xmlUtils.parseFactoryXml(ksw_product_path + ksw_cartype_xml_copy_filename);
                    SysProviderOpt.getInstance(this).updateRecord(SysProviderOpt.KSW_ACTION_IMPORT_CONFIG, "1");
                } else if (file2.exists() && file2.length() == 0) {
                    boolean delete = file2.delete();
                    Log.d(TAG, "error backFactoryXml delete = " + delete);
                    Message message = new Message();
                    message.what = 1;
                    message.obj = 3;
                    this.mHandler.sendMessage(message);
                    Handler handler = this.mEventHandler;
                    if (handler != null) {
                        handler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_CHECK_COPY_MEDIA_MANUAL, 1000);
                    }
                    SysProviderOpt.getInstance(this).updateRecord(SysProviderOpt.KSW_ACTION_IMPORT_CONFIG, "1");
                    return;
                } else if (!file3.exists() || file3.length() != 0) {
                    Log.d(TAG, "restoreFactoryCheck configuration backup");
                    parserXml(ksw_backup_path);
                } else {
                    boolean delete2 = file3.delete();
                    Log.d(TAG, "error backLcdXml delete = " + delete2);
                    Message message2 = new Message();
                    message2.what = 1;
                    message2.obj = 4;
                    this.mHandler.sendMessage(message2);
                    Handler handler2 = this.mEventHandler;
                    if (handler2 != null) {
                        handler2.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_CHECK_COPY_MEDIA_MANUAL, 1000);
                    }
                    SysProviderOpt.getInstance(this).updateRecord(SysProviderOpt.KSW_ACTION_IMPORT_CONFIG, "1");
                    return;
                }
                Handler handler3 = this.mEventHandler;
                if (handler3 != null) {
                    handler3.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_CHECK_COPY_MEDIA_MANUAL, 1000);
                }
                Message message3 = new Message();
                message3.what = 1;
                message3.obj = 2;
                this.mHandler.sendMessage(message3);
            }

            public boolean checkConfig() {
                if (Build.VERSION.SDK_INT == 31) {
                    if (this.configUtil == null) {
                        this.configUtil = new ConfigUtil(this);
                    }
                    return this.configUtil.checkConfig();
                }
                if (this.configUtil2 == null) {
                    this.configUtil2 = new ConfigUtil2(this);
                }
                return this.configUtil2.checkConfig();
            }

            public void killAllRunningAPK_XingShuo() {
                Context applicationContext = getApplicationContext();
                setCurModeCallback(EventUtils.eSrcMode.SRC_NONE.getIntValue(), this.mModeCallback);
                for (ActivityManager.RunningAppProcessInfo next : ((ActivityManager) applicationContext.getSystemService("activity")).getRunningAppProcesses()) {
                    Log.i(TAG, "--->>> xingshuo appProcess.processName = " + next.processName);
                    if (next.processName.equals(EventUtils.FATSET_MODE_PACKAGE_NAME) || next.processName.equals(EventUtils.SET_MODE_PACKAGE_NAME)) {
                        EventUtils.killProcess(next.processName);
                    } else if (!next.processName.startsWith("com.szchoiceway") && !next.processName.startsWith("com.android") && !next.processName.startsWith("system")) {
                        EventUtils.killProcess(next.processName);
                    }
                }
            }

            public void timeSetChange_KSW() {
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_USER_TIME_TYPE, 1);
                if (recordInteger != 0) {
                    sendKSW_0x00_0x64();
                }
                String string = Settings.System.getString(getContentResolver(), "time_12_24");
                boolean z = string != null && string.equals("24");
                if (this.m_bTime24_KSW != z) {
                    this.m_bTime24_KSW = z;
                    if (z) {
                        sendKSW_0x00_0x6A(15, 0);
                    } else {
                        sendKSW_0x00_0x6A(15, 1);
                    }
                }
                if (this.m_iTimeType_KSW != recordInteger) {
                    this.m_iTimeType_KSW = recordInteger;
                    if (recordInteger == 0) {
                        sendKSW_0x00_0x6A(16, 1);
                    } else {
                        sendKSW_0x00_0x6A(16, 0);
                    }
                }
                this.mEventHandler.removeMessages(258);
                this.mEventHandler.sendEmptyMessageDelayed(258, 1000);
            }

            public void sendDvdDataToMcu(byte[] bArr) {
                if (bArr != null) {
                    byte[] bArr2 = new byte[(bArr.length + 4)];
                    bArr2[0] = -14;
                    bArr2[1] = 0;
                    bArr2[2] = 110;
                    bArr2[3] = (byte) bArr.length;
                    System.arraycopy(bArr, 0, bArr2, 4, bArr.length);
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr2);
                    }
                }
            }

            public void initArmUpgrade() {
                if (this.mSysProviderOpt != null) {
                    Log.i(TAG, "--->>> KSW initArmUpgrade");
                    this.mSysProviderOpt.updateRecord(SysProviderOpt.KSW_INIT_ARM_UPGRADE, "1");
                    this.mSysProviderOpt.updateRecord(SysProviderOpt.KSW_INIT_ARM_UPGRADE_GOOGLE_APP, "1");
                }
            }

            public void BTNormalMode_KeyDisable_KSW() {
                if (this.bBtSpeak_Keydisable_KSW) {
                    this.bBtSpeak_Keydisable_KSW = false;
                }
            }

            public void BTSpeakMode_KeyDisable_KSW() {
                if (!this.bBtSpeak_Keydisable_KSW) {
                    this.bBtSpeak_Keydisable_KSW = true;
                }
            }

            public void BTSpeakMode_MCU_KSW(int i) {
                Log.d(TAG, "BTSpeakMode_MCU_KSW iValue = " + i + ", lastBTSpeakMode = " + this.m_iSpeakValue);
                if (this.m_iSpeakValue != i) {
                    sendKSW_0x00_0x63(i, 1);
                    this.m_iSpeakValue = i;
                }
            }

            public void retrurnModeRequst_KSW(int i) {
                sendKSW_0x00_0x68(4, i);
            }

            public void sendMcuData_KSW(byte[] bArr) {
                SendThread sendThread;
                if (bArr != null && (sendThread = this.mSendThread) != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void setDashBoardCallback(ICallbackfn iCallbackfn) {
                synchronized (this) {
                    this.mDashBoardCallbackfn = iCallbackfn;
                }
            }

            public void setGpsFocusCallback(ICallbackfn iCallbackfn) {
                synchronized (this) {
                    this.mGpsFocusCallbackfn = iCallbackfn;
                }
            }

            public void notifyDashBoardCallbackEvt(int i, int i2, int i3, byte[] bArr, String str) {
                if (this.mDashBoardCallbackfn != null) {
                    try {
                        Log.i(TAG, "--->>> KSW bydata = " + EventUtils.bytesToHexString(bArr));
                        this.mDashBoardCallbackfn.notifyEvt(i, i2, i3, bArr, str);
                    } catch (Exception e) {
                        Log.e(TAG, "notifyDashBoardCallbackEvt: " + e.toString());
                    }
                }
            }

            private void notifyGpsFocusCallbackEvt(int i, int i2, int i3, byte[] bArr, String str) {
                ICallbackfn iCallbackfn = this.mGpsFocusCallbackfn;
                if (iCallbackfn != null) {
                    try {
                        iCallbackfn.notifyEvt(i, i2, i3, bArr, str);
                    } catch (Exception e) {
                        Log.e(TAG, "notifyGpsFocusCallbackEvt: " + e.toString());
                    }
                }
            }

            public void ksw_Send8902BackcarMod_0x01() {
                sendKSW_0x00_0x6A(1, this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KESAIWEI_SYS_BACKCAR_MIRROR, false) ? 1 : 0);
            }

            public void ksw_Send8902BackcarMod_0x02() {
                boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KESAIWEI_SYS_VIDEO_DRIVING_BAN, false);
                this.b_kesaiwei_chk_Video_Driving_Ban = recordBoolean;
                sendKSW_0x00_0x6A(14, recordBoolean ? 1 : 0);
                sendBroadcastPark_KSW();
            }

            public void ksw_Send8902BackcarMod_0x03() {
                sendKSW_0x00_0x6A(9, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_SD_HOST, 1));
            }

            public void ksw_Send8902BackcarMod_0x04() {
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_CAMERA_SELECTION, 1);
                this.i_kesaiwei_Camera_Selection = recordInteger;
                sendKSW_0x00_0x6A(11, recordInteger);
            }

            public void ksw_Send8902BackcarMod_0x05() {
                sendKSW_0x00_0x6A(12, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_DVD_SELECTION, 0));
            }

            public void ksw_Send8902BackcarMod_0x06() {
                sendKSW_0x00_0x6A(8, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_LANGUAGE, 1));
            }

            public void ksw_Send8902BackcarMod_0x07() {
                sendKSW_0x00_0x70(2, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_RECORD_AMPLIFIER, 0));
            }

            public void ksw_Send8902BackcarMod_0x08() {
                int i = 0;
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_RECORD_AUX_SWITCHING, 0);
                if (recordInteger == 0) {
                    i = 1;
                } else if (recordInteger != 1) {
                    i = recordInteger;
                }
                sendKSW_0x00_0x70(3, i);
            }

            public void ksw_Send8902BackcarMod_0x09() {
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_RECORD_DVR, 0);
                Log.i(TAG, "ksw_Send8902BackcarMod_0x09: jelly-kesaiwei_Dvr = " + recordInteger);
                sendKSW_0x00_0x70(4, recordInteger);
            }

            public void ksw_Send8902BackcarMod_0x0a() {
                sendKSW_0x00_0x70(1, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_RECORD_CAR_TYPE, 1));
            }

            public void ksw_Send8902BackcarMod_0x0b() {
                sendKSW_0x00_0x6A(18, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_RECORD_BT_OFF, 0));
            }

            public void ksw_Send8902BackcarMod_0x0b_btIndex() {
                sendKSW_0x00_0x70(5, this.mSysProviderOpt.getRecordInteger("KESAIWEI_RECORD_BT_INDEX", 0));
            }

            public void ksw_Send8902BackcarMod_0x0c() {
                sendKSW_0x00_0x70(14, this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_ORIGINAL_CAR_VIDEO_DISPLAY, true) ? 1 : 0);
            }

            public void ksw_Send8902BackcarMod_0x0f() {
                sendKSW_0x00_0x63(4, 1);
            }

            public void ksw_Send8902BackcarMod_0x10() {
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SYS_BT_TYPE_KEY, 3);
                if (recordInteger != 1 && recordInteger != 5 && recordInteger != 8 && recordInteger == 3) {
                    int i = Build.VERSION.SDK_INT;
                }
            }

            public void ksw_Send8902BackcarMod_0x12() {
                ksw_Send8902BackcarMod(false);
                ksw_Send8902BackcarMod_0x07();
                ksw_Send8902BackcarMod_0x08();
                ksw_Send8902BackcarMod_0x09();
                ksw_Send8902BackcarMod_0x0a();
                ksw_Send8902BackcarMod_0x0b();
                ksw_Send8902BackcarMod_0x0b_btIndex();
                ksw_Send8902BackcarMod_0x0c();
                ksw_Send8902BackcarMod_0x10();
                ksw_Send8902BackcarMod_0x17();
                ksw_Send8902BackcarMod_0x1d();
                ksw_Send8902BackcarMod_0x1e();
                ksw_Send8902BackcarMod_0x1f();
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    m_b_isGuoWai = sysProviderOpt.getRecordBoolean(SysProviderOpt.MAISILUO_SYS_GOOGLEPLAY, m_b_isGuoWai);
                    SysProviderOpt sysProviderOpt2 = this.mSysProviderOpt;
                    sysProviderOpt2.updateRecord(SysProviderOpt.SYS_COUNTRY, (m_b_isGuoWai ? 1 : 0) + BuildConfig.FLAVOR);
                }
                if (m_b_isGuoWai) {
                    LocalePicker.updateLocale(Locale.US);
                } else {
                    LocalePicker.updateLocale(Locale.SIMPLIFIED_CHINESE);
                }
            }

            public void ksw_Send8902BackcarMod_0x16() {
                sendKSW_0x00_0x67(EventUtils.eSrcMode.SRC_ATSL_AIRCONSOLE, false);
            }

            public void ksw_Send8902BackcarMod_0x17() {
                sendKSW_0x00_0x70(6, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_CCC_IDRIVE_TYPE, 0));
            }

            public void ksw_Send8902BackcarMod_0x18() {
                boolean z = false;
                boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_HAVE_FRONT_CAMERA, false);
                if (this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_DATA_PRODUCT_INDEX, 0) != 2) {
                    z = recordBoolean;
                }
                sendKSW_0x00_0x6A(20, z ? 1 : 0);
            }

            public void ksw_Send8902BackcarMod_0x1a() {
                sendKSW_0x00_0x75(this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KESAIWEI_FM_ON, false), this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_FM_CUR_FREQ, 8750));
            }

            public void ksw_Send8902BackcarMod_0x1b() {
                sendKSW_0x00_0x6A(22, this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KESAIWEI_SYS_REVERSING_TRACK, true) ? 1 : 0);
            }

            public void ksw_Send8902BackcarMod_0x1c() {
                sendKSW_0x00_0x6A(23, this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KESAIWEI_SYS_RADAR, true) ? 1 : 0);
            }

            public void ksw_Send8902BackcarMod_0x1d() {
                sendKSW_0x00_0x70(7, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_AGREEMENT_SELECT_INDEX, 5));
            }

            public void ksw_Send8902BackcarMod_0x1e() {
                sendKSW_0x00_0x70(8, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_REVEERSING_MUTE_SELECT_INDEX, 0));
            }

            public void ksw_Send8902BackcarMod_0x1f() {
                sendKSW_0x00_0x70(9, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_HANDSET_AUTOMATIC_SET_INDEX, 0));
            }

            public void ksw_Send8902BackcarMod_0x20() {
                String language = Locale.getDefault().getLanguage();
                String country = Locale.getDefault().getCountry();
                sendKSW_0x00_0x70(10, ((!language.equals("zh") || !country.equals("CN")) && (!language.equals("zh") || !country.equals("TW"))) ? 1 : 0);
            }

            public void ksw_Send8902BackcarMod_0x21() {
                sendKSW_0x00_0x77(this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_AMBIENT_LIGHT_R_VALUE, -1), this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_AMBIENT_LIGHT_G_VALUE, -1), this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_AMBIENT_LIGHT_B_VALUE, -1), this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_CUR_SELECT_POSITION, -1));
            }

            public void ksw_Send8902BackcarMod_0x22() {
                String str;
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_COLLECT_CAN_DATA_SWITCH_INDEX, 0);
                if (recordInteger != 0) {
                    String str2 = EventUtils.getMcuLogPath(this) + "/";
                    if (this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_COLLECT_CAN_DATA_SWITCH_INDEX, 1) == 1) {
                        str = "CANBus_Log_CAN1_" + EventUtils.MyDate.getFileName() + ".log";
                    } else {
                        str = "CANBus_Log_CAN2_" + EventUtils.MyDate.getFileName() + ".log";
                    }
                    this.canGatherPath = str2 + str;
                    try {
                        if (!new File(this.canGatherPath).createNewFile()) {
                            this.canGatherPath = BuildConfig.FLAVOR;
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    this.canGatherIndex = recordInteger;
                } else {
                    this.canGatherPath = BuildConfig.FLAVOR;
                    this.mEventHandler.removeMessages(EventUtils.EVENT_CAN_GATHER_END);
                    this.mEventHandler.sendEmptyMessageDelayed(EventUtils.EVENT_CAN_GATHER_END, 2000);
                }
                sendKSW_0x00_0x70(15, recordInteger);
            }

            public void ksw_Send8902BackcarMod_0x23() {
                sendKSW_0x00_0x70(16, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_AUX_ACTIVATION_FUNCTION_INDEX, 0));
            }

            public void ksw_Send8902BackcarMod_0x24() {
                sendKSW_0x00_0x70(17, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_VOICE_KEY_FUNCTION_INDEX, 0));
            }

            public void ksw_Send8902BackcarMod_0x25() {
                sendKSW_0x00_0x70(18, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_360_CAMERA_TYPE_INDEX, 0));
            }

            public void ksw_Send8902BackcarMod_0x26() {
                sendKSW_0x00_0x70(19, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_BACKLIGHT_CONTROL_INDEX, 0));
            }

            public void ksw_Send8902BackcarMod_0x28() {
                sendKSW_0x00_0x70(20, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_AHD_CAMERA_TYPE, 0));
            }

            public void ksw_Send8902BackcarMod_0x29() {
                sendKSW_0x00_0x70(21, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_MAP_KEY_FUNCTION_INDEX, 0));
            }

            public void ksw_Send8902BackcarMod_0x2A() {
                sendKSW_0x00_0x70(23, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_AUX_ITEM_POSITION, 0));
            }

            public void ksw_Send8902BackcarMod_0x2B() {
                sendKSW_0x00_0x70(127, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_SLEEP_TIME, 2));
            }

            public void ksw_Send8902BackcarMod_0x2D() {
                sendKSW_0x00_0x70(25, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_BOOT_MODE_MEMORY_INDEX, 0));
            }

            public void ksw_Send8902BackcarMod_0x31() {
                sendKSW_0x00_0x70(22, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_MODE_KEY_FUNCTION_INDEX, 0));
            }

            public void ksw_Send8902BackcarMod_0x32() {
                sendKSW_0x00_0x70(29, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_PHONE_KEY_FUNCTION_INDEX, 0));
            }

            public void ksw_Send8902BackcarMod_0x33() {
                sendKSW_0x00_0x70(28, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_SEND_TOUCH_DATA_CONTINUED, 1));
            }

            public void ksw_Send8902BackcarMod_0x34() {
                sendKSW_0x00_0x70(27, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_WHELLTRACK_INDEX, 0));
            }

            public void ksw_Send8902BackcarMod_0x35() {
                sendKSW_0x00_0x70(30, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_REVERSE_EXIT_TIME_INDEX, 0));
            }

            public void ksw_Send8902BackcarMod_0x36() {
                sendKSW_0x00_0x70(34, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_HORN_SELECTION, 0));
            }

            public void ksw_Send8902BackcarMod_0x37() {
                sendKSW_0x00_0x70(36, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_BOOT_360_CAMERA_INDEX, 0));
            }

            public void ksw_Send8902BackcarMod_0x38() {
                sendKSW_0x00_0x70(37, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_TURN_SIGNAL_CONTROL, 0));
            }

            public void ksw_Send8902BackcarMod_0x39() {
                sendKSW_0x00_0x70(38, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_EXTERNAL_INTERNAL_MIC_SELECTION, 1));
            }

            public void ksw_Send8902BackcarMod_0x40() {
                sendKSW_0x00_0x70(35, this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_SPEED_TYPE_SELECTION, 0));
            }

            public void ksw_Send8902BackcarMod_0x41() {
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSE_TXZ_WARING_VALUE_OIL, 8);
                if (this.txzOilWaringValue != recordInteger) {
                    this.txzOilWaringValue = recordInteger;
                    sendKSW_0x00_0x70(31, recordInteger);
                }
                int recordInteger2 = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSE_TXZ_WARING_VALUE_SPEED, 200);
                if (this.txzSpeedWaringValue != recordInteger2) {
                    this.txzSpeedWaringValue = recordInteger2;
                    sendKSW_0x00_0x70(32, recordInteger2);
                }
            }

            public void send0x7bClockControl() {
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_SELECTION_SMALL_CLOCK_INDEX, 0);
                Calendar instance2 = Calendar.getInstance();
                if (instance2 != null) {
                    byte[] bArr = {-14, 0, EventUtils.CMD_LOUND, 3, (byte) recordInteger, (byte) instance2.get(11), (byte) instance2.get(12)};
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                    }
                }
            }

            public void kswRequestAirData() {
                sendKSW_0x00_0x68(10, 0);
            }

            public void kswSendBenzControlKey(ArrayList<Integer> arrayList) {
                byte[] bArr = new byte[10];
                bArr[0] = -14;
                bArr[1] = 0;
                bArr[2] = EventUtils.CMD_MAIN_VOL;
                bArr[3] = 6;
                bArr[4] = (byte) arrayList.get(0).intValue();
                bArr[5] = (byte) arrayList.get(1).intValue();
                bArr[6] = (byte) arrayList.get(2).intValue();
                if (arrayList.get(3).intValue() == 2) {
                    bArr[7] = -1;
                } else {
                    bArr[7] = (byte) arrayList.get(3).intValue();
                }
                if (arrayList.get(4).intValue() == 2) {
                    bArr[8] = -1;
                } else {
                    bArr[8] = (byte) arrayList.get(4).intValue();
                }
                bArr[9] = (byte) arrayList.get(5).intValue();
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr);
                }
            }

            public void kswSendLandRoverTouchKey(int i, int i2) {
                sendKSW_0x00_0x78(i, i2);
            }

            public void kswSendSpecialSetLR() {
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_LANDROVER_HOST_INDEX, 0);
                if (this.mSpecialSetLRHostIndex != recordInteger) {
                    this.mSpecialSetLRHostIndex = recordInteger;
                    sendKSW_0x00_0x70(40, recordInteger != 0 ? recordInteger != 1 ? recordInteger != 2 ? 0 : 7 : 6 : 5);
                }
                int recordInteger2 = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_LANDRVOER_WHEEL_CONTROL_TYPE, 0);
                if (this.mSpecialSetLRWheelControlIndex != recordInteger2) {
                    this.mSpecialSetLRWheelControlIndex = recordInteger2;
                    sendKSW_0x00_0x70(41, recordInteger2);
                }
                int recordInteger3 = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_LANDROVER_KEY_PANEL_LEFT_INDEX, 0);
                if (this.mSpecialSetLRPanelLeftIndex != recordInteger3) {
                    this.mSpecialSetLRPanelLeftIndex = recordInteger3;
                    sendKSW_0x00_0x70(42, recordInteger3);
                }
                int recordInteger4 = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_LANDROVER_KEY_PANEL_RIGHT_INDEX, 0);
                if (this.mSpecialSetLRPanelRightIndex != recordInteger4) {
                    this.mSpecialSetLRPanelRightIndex = recordInteger4;
                    sendKSW_0x00_0x70(43, recordInteger4);
                }
            }

            public void send0x70FactorySettings(byte b) {
                int i = 0;
                if (b == 44) {
                    i = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_SPLITTING_MACHINE_LVDS_MODE, 0);
                }
                sendKSW_0x00_0x70(b, i);
            }

            public void setEasyconnState_KSW(int i) {
                this.ksw_m_i_easyconn_state = i;
            }

            public int get_m_i_easyconn_state_KSW() {
                return this.ksw_m_i_easyconn_state;
            }

            public void ksw_original_start() {
                if (!this.b_Original_View) {
                    Log.d(TAG, "ksw_original_start mValidMode = " + this.mValidMode.getIntValue());
                    if (!this.isLetterConnect || !this.isLetterPlaying) {
                        String recordValue = this.mSysProviderOpt.getRecordValue(SysProviderOpt.MUSIC_PACKAGENAME, EventUtils.MUSIC_MODE_PACKAGE_NAME);
                        String recordValue2 = this.mSysProviderOpt.getRecordValue(SysProviderOpt.VIDEO_PACKAGENAME, EventUtils.MOVIE_MODE_PACKAGE_NAME);
                        if ((this.mValidMode.getIntValue() != EventUtils.eSrcMode.SRC_MUSIC.getIntValue() || !EventUtils.MUSIC_MODE_PACKAGE_NAME.equals(recordValue)) && !((this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_MOVIE.getIntValue() && EventUtils.MOVIE_MODE_PACKAGE_NAME.equals(recordValue2)) || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_BT.getIntValue() || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_BTMUSIC.getIntValue())) {
                            stopMediaApps();
                        } else {
                            Message obtainMessage = this.mEventHandler.obtainMessage();
                            obtainMessage.what = EventUtils.HANDLER_CAN_KEY_EVENT;
                            obtainMessage.arg1 = 511;
                            this.mEventHandler.sendMessageDelayed(obtainMessage, 500);
                        }
                    } else {
                        sendLetterKeyCode(CarletterInterface.KEYCODE_MEDIA_PAUSE);
                    }
                    notifyValidModeEvt(4097, 0, 0, (byte[]) null, (String) null);
                    byGPSMode = 0;
                    this.b_Original_View = true;
                    boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_ORIGINAL_CAR_VIDEO_DISPLAY, true);
                    Log.d(TAG, "screen = " + recordBoolean);
                    if (!recordBoolean) {
                        this.mEventHandler.postDelayed(new Runnable() {
                            public final void run() {
                                EventService.this.lambda$ksw_original_start$3$EventService();
                            }
                        }, 500);
                    } else {
                        this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_ORIGINAL_START_KSW, 500);
                    }
                    sendKeyDownUpSync(3);
                    killApp_KeSaiWei();
                }
            }

            public /* synthetic */ void lambda$ksw_original_start$3$EventService() {
                this.mPowerOffEvt.showPoweroffWnd();
            }

            public void ksw_original_end() {
                if (this.b_Original_View) {
                    Log.d(TAG, "ksw_original_end");
                    this.b_Original_View = false;
                    this.mEventHandler.sendEmptyMessage(EventUtils.HANDLER_ORIGINAL_END_KSW);
                    if (!this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_ORIGINAL_CAR_VIDEO_DISPLAY, true)) {
                        this.mbVoiceStart = false;
                        this.mPowerOffEvt.hidePoweroffWnd();
                    }
                    Log.i(TAG, "--->>> KSW keycode_home m_btNormalDelay_KSW = " + this.m_btNormalDelay_KSW);
                    if (!this.m_btNormalDelay_KSW && !this.mbVoiceStart) {
                        Log.i(TAG, "--->>> KeyEvent.KEYCODE_HOME 000" + this.mbVoiceStart);
                    }
                    sendBroadcastAsUser(new Intent("com.szchoiceway.eventcenter.KSW_ORIGINAL_START"), UserHandle.ALL);
                    Log.d(TAG, "ksw_original_end m_iBTStatus = " + this.m_iBTStatus);
                    if (this.m_iBTStatus > 3) {
                        this.speakWhenOriginal = true;
                    }
                }
            }

            public void ksw_original_endVoice(boolean z) {
                this.mbVoiceStart = z;
                sendKSW_0x00_0x69((byte) 19, z ? (byte) 1 : 0, (byte) 0);
                if ("XinCheng".equalsIgnoreCase(this.xml_client)) {
                    sendKSW_0x00_0x78(z ? 11 : 12, 0);
                }
                Log.i(TAG, "--->>> KSW ksw_original_endVoice ksw_original_endVoice = " + this.m_btNormalDelay_KSW);
            }

            public void ksw_poweron_sd_usb_cartype_xml_update() {
                this.ksw_m_b_sd_usb_cartype_xml_updating = true;
            }

            public void ksw_poweron_sd_usb_factory_xml_update() {
                boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_AUTO_IMPORT_FACTORY_SETTINGS, true);
                Log.d(TAG, "poweron autoImport " + recordBoolean);
                if (!recordBoolean) {
                    this.mSysProviderOpt.updateRecord(SysProviderOpt.KSW_AUTO_IMPORT_FACTORY_SETTINGS, "1");
                    return;
                }
                Log.d(TAG, "ksw_poweron_sd_usb_factory_xml_update");
                String absolutePath = Environment.getExternalStorageDirectory().getAbsolutePath();
                String[] allPath = EventUtils.getAllPath(this);
                int length = allPath.length;
                int i = 0;
                File file2 = null;
                File file3 = null;
                while (true) {
                    if (i >= length) {
                        break;
                    }
                    String str = allPath[i];
                    if (!str.equals(absolutePath)) {
                        file2 = new File(str + "/OEM/" + ksw_factory_xml_copy_filename);
                        file3 = new File(str + "/OEM/" + ksw_lcd_xml_copy_filename);
                        if (file2.exists() || file3.exists()) {
                            ksw_factory_xml_m_OldPath = str + "/OEM/";
                        }
                    }
                    i++;
                }
                if (BuildConfig.FLAVOR.equals(ksw_factory_xml_m_OldPath)) {
                    Log.i(TAG, "--->>> not factory or lcd copy file exists.");
                } else if (file2 != null && file2.length() == 0 && file3.length() == 0) {
                    Toast.makeText(this, getString(R.string.lb_update_configuration_file_error0), 1).show();
                } else {
                    Log.d(TAG, "ksw_poweron_sd_usb_factory_xml_update path = " + ksw_factory_xml_m_OldPath);
                    this.dialogImportConfirm = new DialogImportConfirm(this, this.xmlUtils, ksw_factory_xml_m_OldPath);
                    boolean isAuxModeBT = isAuxModeBT();
                    Log.d(TAG, "b_Original_View = " + this.b_Original_View + ", m_isOff_BackLight_KSW = " + this.m_isOff_BackLight_KSW + ", isAuxMode = " + isAuxModeBT);
                    boolean z = this.b_Original_View;
                    if (z || this.m_isOff_BackLight_KSW || isAuxModeBT) {
                        if (z) {
                            virtualCenterClick();
                        }
                        if (this.m_isOff_BackLight_KSW) {
                            backLightOn_KSW();
                        }
                        if (isAuxModeBT) {
                            Log.d(TAG, EventUtils.ZXW_ACTION_IMPORT_CONFIGURATION);
                            sendBroadcast(new Intent(EventUtils.ZXW_ACTION_IMPORT_CONFIGURATION));
                        }
                        this.mHandler.sendEmptyMessageDelayed(3, 2000);
                        return;
                    }
                    this.dialogImportConfirm.showDialog();
                }
            }

            public void ksw_sd_usb_factory_xml_update() {
                Log.d(TAG, "ksw_sd_usb_factory_xml_update");
                new Thread() {
                    public void run() {
                        String str;
                        String absolutePath = Environment.getExternalStorageDirectory().getAbsolutePath();
                        String[] allPath = EventUtils.getAllPath(EventService.this);
                        int length = allPath.length;
                        File file = null;
                        File file2 = null;
                        int i = 0;
                        while (true) {
                            if (i >= length) {
                                break;
                            }
                            str = allPath[i];
                            if (!str.equals(absolutePath)) {
                                file = new File(str + "/OEM/" + EventService.ksw_factory_xml_copy_filename);
                                file2 = new File(str + "/OEM/" + EventService.ksw_lcd_xml_copy_filename);
                                if ((file.exists() && file.isFile()) || (file2.exists() && file2.isFile())) {
                                    String unused = EventService.ksw_factory_xml_m_OldPath = str + "/OEM/";
                                }
                            }
                            i++;
                        }
                        String unused2 = EventService.ksw_factory_xml_m_OldPath = str + "/OEM/";
                        if (BuildConfig.FLAVOR.equals(EventService.ksw_factory_xml_m_OldPath)) {
                            Log.i(EventService.TAG, "--->>> not factory or lcd copy file exists.");
                            EventService.this.sendBroadcast(new Intent(EventUtils.ZXW_ACTION_UPDATE_CONFIGURATION_FILE_NOT_EXIT));
                            return;
                        }
                        Log.d(EventService.TAG, "ksw_sd_usb_factory_xml_update path = " + EventService.ksw_factory_xml_m_OldPath);
                        EventService.this.parserXml(EventService.ksw_factory_xml_m_OldPath);
                        if (file != null) {
                            if (file.length() > 0) {
                                EventService.this.copyFile(file.getAbsolutePath(), EventService.ksw_backup_path + EventService.ksw_factory_xml_copy_filename);
                            } else {
                                Log.i(EventService.TAG, "--->>>  factoryFile error.");
                                EventService.this.sendBroadcast(new Intent(EventUtils.ZXW_ACTION_UPDATE_CONFIGURATION_FILE_ERROR));
                            }
                        }
                        if (file2 != null) {
                            if (file2.length() > 0) {
                                EventService.this.copyFile(file2.getAbsolutePath(), EventService.ksw_backup_path + EventService.ksw_lcd_xml_copy_filename);
                            } else {
                                Log.i(EventService.TAG, "--->>>  lcdFile error.");
                                EventService.this.sendBroadcast(new Intent(EventUtils.ZXW_ACTION_UPDATE_CONFIGURATION_LCD_FILE_ERROR));
                            }
                        }
                        if (EventService.this.xmlUtils.getParseResult()) {
                            EventService.this.sendBroadcast(new Intent(EventUtils.ZXW_ACTION_UPDATE_CONFIGURATION_SUCCED));
                        } else {
                            EventService.this.sendBroadcast(new Intent(EventUtils.ZXW_ACTION_UPDATE_CONFIGURATION_FAILED));
                        }
                    }
                }.start();
            }

            public void ksw_poweron_sd_usb_logo_update() {
                new Thread() {
                    public void run() {
                        String absolutePath = Environment.getExternalStorageDirectory().getAbsolutePath();
                        String[] allPath = EventUtils.getAllPath(EventService.this);
                        int length = allPath.length;
                        File file = null;
                        int i = 0;
                        while (true) {
                            if (i >= length) {
                                break;
                            }
                            String str = allPath[i];
                            if (!str.equals(absolutePath)) {
                                file = new File(str + "/OEM/" + EventService.ksw_logo_copy_filename);
                                if (file.exists() && file.isFile()) {
                                    String unused = EventService.ksw_logo_m_OldPath = file.getAbsolutePath();
                                    break;
                                }
                            }
                            i++;
                        }
                        if (file == null || !file.exists() || !file.isFile()) {
                            Log.i(EventService.TAG, "--->>> not bootlogo exists.");
                            String unused2 = EventService.ksw_logo_m_OldPath = BuildConfig.FLAVOR;
                            return;
                        }
                        try {
                            boolean unused3 = EventService.this.isUpdatingLogo = true;
                            EventService.this.ksw_set_logo(BitmapFactory.decodeStream(new FileInputStream(file)));
                            EventService eventService = EventService.this;
                            String access$26000 = EventService.ksw_logo_m_OldPath;
                            eventService.copyFile(access$26000, EventService.ksw_local_path + EventService.ksw_logo_copy_filename);
                            EventService eventService2 = EventService.this;
                            String access$260002 = EventService.ksw_logo_m_OldPath;
                            eventService2.copyFile(access$260002, EventService.ksw_backup_path + EventService.ksw_logo_copy_filename);
                            Looper.prepare();
                            EventService eventService3 = EventService.this;
                            Toast.makeText(eventService3, eventService3.getString(R.string.lb_update_logo), 1).show();
                            Looper.loop();
                            boolean unused4 = EventService.this.isUpdatingLogo = false;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }.start();
            }

            public void ksw_poweron_sd_usb_logo_update_animal() {
                new Thread() {
                    public void run() {
                        String absolutePath = Environment.getExternalStorageDirectory().getAbsolutePath();
                        String[] allPath = EventUtils.getAllPath(EventService.this);
                        int length = allPath.length;
                        File file = null;
                        int i = 0;
                        while (true) {
                            if (i >= length) {
                                break;
                            }
                            String str = allPath[i];
                            if (!str.equals(absolutePath)) {
                                file = new File(str + "/OEM/" + EventService.ksw_logo_copy_filename_animal);
                                if (file.exists() && file.isFile()) {
                                    String unused = EventService.ksw_logo_m_OldPath_animal = file.getAbsolutePath();
                                    break;
                                }
                            }
                            i++;
                        }
                        if (file == null || !file.exists() || !file.isFile()) {
                            Log.i(EventService.TAG, "--->>> not bootanimation exists.");
                            String unused2 = EventService.ksw_logo_m_OldPath_animal = BuildConfig.FLAVOR;
                            return;
                        }
                        boolean unused3 = EventService.this.isUpdatingAnimation = true;
                        EventService.this.runCmd("chmod 777 /mnt/privdata1/");
                        do {
                        } while (!EventService.this.getCmdResult());
                        File file2 = new File(EventService.ksw_backup_path + EventService.ksw_logo_copy_filename_animal_tmp);
                        if (file2.exists()) {
                            file2.delete();
                        }
                        EventService eventService = EventService.this;
                        String access$26300 = EventService.ksw_logo_m_OldPath_animal;
                        if (eventService.copyFile(access$26300, EventService.ksw_backup_path + EventService.ksw_logo_copy_filename_animal)) {
                            EventService eventService2 = EventService.this;
                            eventService2.runCmd("chmod 777 /mnt/privdata1/" + EventService.ksw_logo_copy_filename_animal);
                            do {
                            } while (!EventService.this.getCmdResult());
                        }
                        Looper.prepare();
                        EventService eventService3 = EventService.this;
                        Toast.makeText(eventService3, eventService3.getString(R.string.lb_update_animation), 1).show();
                        Looper.loop();
                        boolean unused4 = EventService.this.isUpdatingAnimation = false;
                    }
                }.start();
            }

            public void ksw_poweron_sd_usb_map_apk_list_update() {
                this.mapApkLst = new ArrayList();
                SharedPreferences sharedPreferences = getSharedPreferences(EventUtils.ZXW_DATABASE_NAVI_LIST_FILENAME, 4);
                if (sharedPreferences.getAll().size() > 0) {
                    this.mapApkLst.addAll(sharedPreferences.getAll().keySet());
                }
            }

            public boolean copyFile(String str, String str2) {
                Log.d(TAG, "copyFile oldPath = " + str + ", newPath = " + str2);
                try {
                    File file2 = new File(str);
                    File file3 = new File(str2);
                    if (file3.exists()) {
                        file3.delete();
                    }
                    file3.createNewFile();
                    boolean z = true;
                    file3.setReadable(true);
                    Log.i(TAG, "--->>> copyFile = 000");
                    if (file2.exists()) {
                        Log.i(TAG, "--->>> copyFile = 111");
                        FileInputStream fileInputStream = new FileInputStream(str);
                        FileOutputStream fileOutputStream = new FileOutputStream(str2);
                        byte[] bArr = new byte[1024];
                        while (true) {
                            int read = fileInputStream.read(bArr);
                            if (read == -1) {
                                break;
                            }
                            fileOutputStream.write(bArr, 0, read);
                        }
                        Log.i(TAG, "--->>> copyFile = 222");
                        fileOutputStream.flush();
                        fileOutputStream.close();
                        fileInputStream.close();
                    } else {
                        z = false;
                    }
                    Runtime.getRuntime().exec("sync");
                    return z;
                } catch (Exception e) {
                    e.printStackTrace();
                    return false;
                }
            }

            public void ksw_dvd_switch_8836_arm_view(int i) {
                if (i == 1 || i == 2) {
                    sendKSW_0x00_0x71(i);
                }
            }

            public void ksw_send_amap_auto(boolean z) {
                Log.i(TAG, "ksw_send_amap_auto: bZoom = " + z);
                if (this.bResponseKey) {
                    Log.i(TAG, "ksw_send_amap_auto: bResponseKey = " + this.bResponseKey);
                    Intent intent = new Intent();
                    intent.setAction("AUTONAVI_STANDARD_BROADCAST_RECV");
                    intent.putExtra("KEY_TYPE", 10027);
                    intent.putExtra("EXTRA_TYPE", 1);
                    intent.putExtra("EXTRA_OPERA", z ^ true ? 1 : 0);
                    sendBroadcastAsUser(intent, UserHandle.ALL);
                    this.bResponseKey = false;
                    Handler handler = this.mEventHandler;
                    if (handler != null) {
                        handler.removeMessages(EventUtils.HANDLER_RESPONSE_KEY);
                        this.mEventHandler.sendEmptyMessageDelayed(EventUtils.HANDLER_RESPONSE_KEY, 500);
                    }
                }
            }

            public void ksw_rev_amap_auto(int i) {
                if (i == 2 || i == 4) {
                    this.ksw_m_b_amap_auto_front = false;
                } else if (i == 3) {
                    this.ksw_m_b_amap_auto_front = true;
                }
            }

            /* access modifiers changed from: private */
            public void parserXml(String str) {
                this.xmlUtils.parseXml(str);
            }

            public void ksw_set_logo(Bitmap bitmap) {
                Log.d(TAG, "saveLogoFile bitmap = " + bitmap);
                if (bitmap != null) {
                    if (this.mSysProviderOpt.getRecordValue(SysProviderOpt.RESOLUTION, "1920x720").startsWith("720x1920")) {
                        Log.d(TAG, "saveLogoFile rotate 90");
                        Matrix matrix = new Matrix();
                        matrix.setRotate(90.0f, ((float) bitmap.getWidth()) / 2.0f, ((float) bitmap.getHeight()) / 2.0f);
                        bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
                    }
                    int width = bitmap.getWidth();
                    int height = bitmap.getHeight();
                    int i = width * 3;
                    int i2 = ((width % 4) + i) * height;
                    try {
                        runCmd("chmod 777 " + LOGO_PATH);
                        while (!getCmdResult()) {
                        }
                        RandomAccessFile randomAccessFile = new RandomAccessFile(LOGO_PATH, "rw");
                        randomAccessFile.seek(PlaybackStateCompat.ACTION_SET_CAPTIONING_ENABLED);
                        writeWord(randomAccessFile, 19778);
                        writeDword(randomAccessFile, (long) (i2 + 54));
                        writeWord(randomAccessFile, 0);
                        writeWord(randomAccessFile, 0);
                        writeDword(randomAccessFile, 54);
                        writeDword(randomAccessFile, 40);
                        writeLong(randomAccessFile, (long) width);
                        writeLong(randomAccessFile, (long) height);
                        writeWord(randomAccessFile, 1);
                        writeWord(randomAccessFile, 24);
                        writeDword(randomAccessFile, 0);
                        writeDword(randomAccessFile, 0);
                        writeLong(randomAccessFile, 0);
                        writeLong(randomAccessFile, 0);
                        writeDword(randomAccessFile, 0);
                        writeDword(randomAccessFile, 0);
                        byte[] bArr = new byte[i2];
                        int i3 = i + (width % 4);
                        int i4 = height - 1;
                        int i5 = 0;
                        while (i5 < height) {
                            int i6 = 0;
                            int i7 = 0;
                            while (i6 < width) {
                                int pixel = bitmap.getPixel(i6, i5);
                                int i8 = (i4 * i3) + i7;
                                bArr[i8] = (byte) Color.blue(pixel);
                                bArr[i8 + 1] = (byte) Color.green(pixel);
                                bArr[i8 + 2] = (byte) Color.red(pixel);
                                i6++;
                                i7 += 3;
                            }
                            i5++;
                            i4--;
                        }
                        randomAccessFile.write(bArr);
                        randomAccessFile.close();
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e2) {
                        e2.printStackTrace();
                    }
                }
            }

            private void ksw_set_logo_frist_start() {
                Bitmap decodeFile;
                try {
                    this.mEventHandler.post(new Runnable() {
                        public void run() {
                        }
                    });
                    int i = 1280;
                    int i2 = this.m_iModeSet;
                    int i3 = 480;
                    if (!(i2 == 3 || i2 == 5 || i2 == 6)) {
                        if (i2 != 14) {
                            if (i2 == 9) {
                                i = 800;
                            } else if (this.m_iUITypeVer == 41) {
                                i = (int) getResources().getDimension(R.dimen.backcar_width);
                                i3 = (int) getResources().getDimension(R.dimen.backcar_height);
                            }
                            decodeFile = BitmapFactory.decodeFile(ksw_logo_m_OldPath, new BitmapFactory.Options());
                            this.mEventHandler.post(new Runnable() {
                                public void run() {
                                }
                            });
                            if (!(decodeFile.getWidth() == i && decodeFile.getHeight() == i3)) {
                                decodeFile = ksw_resizeImage(decodeFile, i, i3);
                            }
                            ksw_savaLogoFile(decodeFile);
                            Intent intent = new Intent(EventUtils.ZXW_SENDBROADCAST8902MOD);
                            intent.putExtra(EventUtils.ZXW_SENDBROADCAST8902MOD_EXTRA, 19);
                            sendBroadcast(intent);
                            this.mEventHandler.post(new Runnable() {
                                public void run() {
                                }
                            });
                        }
                    }
                    i = 1024;
                    i3 = 600;
                    decodeFile = BitmapFactory.decodeFile(ksw_logo_m_OldPath, new BitmapFactory.Options());
                    this.mEventHandler.post(new Runnable() {
                        public void run() {
                        }
                    });
                    decodeFile = ksw_resizeImage(decodeFile, i, i3);
                    ksw_savaLogoFile(decodeFile);
                    Intent intent2 = new Intent(EventUtils.ZXW_SENDBROADCAST8902MOD);
                    intent2.putExtra(EventUtils.ZXW_SENDBROADCAST8902MOD_EXTRA, 19);
                    sendBroadcast(intent2);
                    this.mEventHandler.post(new Runnable() {
                        public void run() {
                        }
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            private Bitmap ksw_resizeImage(Bitmap bitmap, int i, int i2) {
                int width = bitmap.getWidth();
                int height = bitmap.getHeight();
                Matrix matrix = new Matrix();
                matrix.postScale(((float) i) / ((float) width), ((float) i2) / ((float) height));
                return Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
            }

            private static void writeWord(RandomAccessFile randomAccessFile, int i) throws IOException {
                randomAccessFile.write(new byte[]{(byte) (i & 255), (byte) ((i >> 8) & 255)});
            }

            private static void writeDword(RandomAccessFile randomAccessFile, long j) throws IOException {
                randomAccessFile.write(new byte[]{(byte) ((int) (j & 255)), (byte) ((int) ((j >> 8) & 255)), (byte) ((int) ((j >> 16) & 255)), (byte) ((int) ((j >> 24) & 255))});
            }

            private static void writeLong(RandomAccessFile randomAccessFile, long j) throws IOException {
                randomAccessFile.write(new byte[]{(byte) ((int) (j & 255)), (byte) ((int) ((j >> 8) & 255)), (byte) ((int) ((j >> 16) & 255)), (byte) ((int) ((j >> 24) & 255))});
            }

            private void ksw_savaLogoFile(Bitmap bitmap) {
                String str;
                Bitmap bitmap2 = bitmap;
                if (bitmap2 != null) {
                    int width = bitmap.getWidth();
                    int height = bitmap.getHeight();
                    int i = width * 3;
                    int i2 = ((width % 4) + i) * height;
                    try {
                        if (Build.VERSION.SDK_INT >= 26) {
                            str = "/dev/block/by-name/logo";
                        } else {
                            str = Build.VERSION.SDK_INT > 19 ? "/dev/block/platform/emmc/by-name/logo" : "/dev/block/mtd/by-name/logo";
                        }
                        FileOutputStream fileOutputStream = new FileOutputStream(str);
                        Log.i(TAG, " --->>> New filelogo OK");
                        writeWord(fileOutputStream, 19778);
                        writeDword(fileOutputStream, (long) (i2 + 54));
                        writeWord(fileOutputStream, 0);
                        writeWord(fileOutputStream, 0);
                        writeDword(fileOutputStream, 54);
                        writeDword(fileOutputStream, 40);
                        writeLong(fileOutputStream, (long) width);
                        writeLong(fileOutputStream, (long) height);
                        writeWord(fileOutputStream, 1);
                        writeWord(fileOutputStream, 24);
                        writeDword(fileOutputStream, 0);
                        writeDword(fileOutputStream, 0);
                        writeLong(fileOutputStream, 0);
                        writeLong(fileOutputStream, 0);
                        writeDword(fileOutputStream, 0);
                        writeDword(fileOutputStream, 0);
                        byte[] bArr = new byte[i2];
                        int i3 = i + (width % 4);
                        int i4 = height - 1;
                        int i5 = 0;
                        while (i5 < height) {
                            int i6 = 0;
                            int i7 = 0;
                            while (i6 < width) {
                                int pixel = bitmap2.getPixel(i6, i5);
                                int i8 = (i4 * i3) + i7;
                                bArr[i8] = (byte) Color.blue(pixel);
                                bArr[i8 + 1] = (byte) Color.green(pixel);
                                bArr[i8 + 2] = (byte) Color.red(pixel);
                                i6++;
                                i7 += 3;
                            }
                            i5++;
                            i4--;
                        }
                        Log.i(TAG, " --->>> write write write");
                        fileOutputStream.write(bArr);
                        fileOutputStream.flush();
                        fileOutputStream.close();
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e2) {
                        e2.printStackTrace();
                    }
                }
            }

            /* access modifiers changed from: protected */
            public void writeWord(FileOutputStream fileOutputStream, int i) throws IOException {
                fileOutputStream.write(new byte[]{(byte) (i & 255), (byte) ((i >> 8) & 255)});
            }

            /* access modifiers changed from: protected */
            public void writeDword(FileOutputStream fileOutputStream, long j) throws IOException {
                fileOutputStream.write(new byte[]{(byte) ((int) (j & 255)), (byte) ((int) ((j >> 8) & 255)), (byte) ((int) ((j >> 16) & 255)), (byte) ((int) ((j >> 24) & 255))});
            }

            /* access modifiers changed from: protected */
            public void writeLong(FileOutputStream fileOutputStream, long j) throws IOException {
                fileOutputStream.write(new byte[]{(byte) ((int) (j & 255)), (byte) ((int) ((j >> 8) & 255)), (byte) ((int) ((j >> 16) & 255)), (byte) ((int) ((j >> 24) & 255))});
            }

            /* JADX WARNING: Removed duplicated region for block: B:21:0x003d A[SYNTHETIC, Splitter:B:21:0x003d] */
            /* JADX WARNING: Removed duplicated region for block: B:27:0x0047 A[SYNTHETIC, Splitter:B:27:0x0047] */
            /* JADX WARNING: Removed duplicated region for block: B:34:0x005f A[LOOP:1: B:32:0x0057->B:34:0x005f, LOOP_END] */
            /* JADX WARNING: Removed duplicated region for block: B:37:0x0096 A[SYNTHETIC, Splitter:B:37:0x0096] */
            /* JADX WARNING: Unknown top exception splitter block from list: {B:24:0x0042=Splitter:B:24:0x0042, B:18:0x0038=Splitter:B:18:0x0038} */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            private void ksw_set_mapApkLst() {
                /*
                    r5 = this;
                    java.io.File r0 = new java.io.File
                    java.lang.String r1 = "/data/local/mapApkLst.txt"
                    r0.<init>(r1)
                    java.util.ArrayList r1 = new java.util.ArrayList
                    r1.<init>()
                    r2 = 0
                    java.io.BufferedReader r3 = new java.io.BufferedReader     // Catch:{ FileNotFoundException -> 0x0041, IOException -> 0x0037 }
                    java.io.FileReader r4 = new java.io.FileReader     // Catch:{ FileNotFoundException -> 0x0041, IOException -> 0x0037 }
                    r4.<init>(r0)     // Catch:{ FileNotFoundException -> 0x0041, IOException -> 0x0037 }
                    r3.<init>(r4)     // Catch:{ FileNotFoundException -> 0x0041, IOException -> 0x0037 }
                L_0x0017:
                    java.lang.String r0 = r3.readLine()     // Catch:{ FileNotFoundException -> 0x0032, IOException -> 0x002f, all -> 0x002c }
                    if (r0 == 0) goto L_0x0025
                    java.lang.String r0 = r0.trim()     // Catch:{ FileNotFoundException -> 0x0032, IOException -> 0x002f, all -> 0x002c }
                    r1.add(r0)     // Catch:{ FileNotFoundException -> 0x0032, IOException -> 0x002f, all -> 0x002c }
                    goto L_0x0017
                L_0x0025:
                    r3.close()     // Catch:{ FileNotFoundException -> 0x0032, IOException -> 0x002f, all -> 0x002c }
                    r3.close()     // Catch:{ IOException -> 0x004b }
                    goto L_0x004f
                L_0x002c:
                    r0 = move-exception
                    r2 = r3
                    goto L_0x0094
                L_0x002f:
                    r0 = move-exception
                    r2 = r3
                    goto L_0x0038
                L_0x0032:
                    r0 = move-exception
                    r2 = r3
                    goto L_0x0042
                L_0x0035:
                    r0 = move-exception
                    goto L_0x0094
                L_0x0037:
                    r0 = move-exception
                L_0x0038:
                    r0.printStackTrace()     // Catch:{ all -> 0x0035 }
                    if (r2 == 0) goto L_0x004f
                    r2.close()     // Catch:{ IOException -> 0x004b }
                    goto L_0x004f
                L_0x0041:
                    r0 = move-exception
                L_0x0042:
                    r0.printStackTrace()     // Catch:{ all -> 0x0035 }
                    if (r2 == 0) goto L_0x004f
                    r2.close()     // Catch:{ IOException -> 0x004b }
                    goto L_0x004f
                L_0x004b:
                    r0 = move-exception
                    r0.printStackTrace()
                L_0x004f:
                    java.util.ArrayList r0 = new java.util.ArrayList
                    r0.<init>()
                    r5.mapApkLst = r0
                    r0 = 0
                L_0x0057:
                    java.util.List<java.lang.String> r2 = r5.mapApkLst
                    int r2 = r2.size()
                    if (r0 >= r2) goto L_0x0093
                    java.util.List<java.lang.String> r2 = r5.mapApkLst
                    java.lang.Object r3 = r1.get(r0)
                    java.lang.String r3 = (java.lang.String) r3
                    r2.add(r3)
                    java.lang.StringBuilder r2 = new java.lang.StringBuilder
                    r2.<init>()
                    java.lang.String r3 = "ksw_set_mapApkLst: i ="
                    r2.append(r3)
                    r2.append(r0)
                    java.lang.String r3 = ",mapApkLst[i] = "
                    r2.append(r3)
                    java.util.List<java.lang.String> r3 = r5.mapApkLst
                    java.lang.Object r3 = r3.get(r0)
                    java.lang.String r3 = (java.lang.String) r3
                    r2.append(r3)
                    java.lang.String r2 = r2.toString()
                    java.lang.String r3 = "EventService"
                    android.util.Log.i(r3, r2)
                    int r0 = r0 + 1
                    goto L_0x0057
                L_0x0093:
                    return
                L_0x0094:
                    if (r2 == 0) goto L_0x009e
                    r2.close()     // Catch:{ IOException -> 0x009a }
                    goto L_0x009e
                L_0x009a:
                    r1 = move-exception
                    r1.printStackTrace()
                L_0x009e:
                    throw r0
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.ksw_set_mapApkLst():void");
            }

            public void WriteAnimationLogoToSys_auto() throws IOException {
                FileOutputStream fileOutputStream = new FileOutputStream("/data/local/bootanimation.zip");
                Log.i(TAG, " New Animation logo OK");
                String str = ksw_logo_m_OldPath_animal;
                if (str != null && !str.equals(BuildConfig.FLAVOR)) {
                    FileInputStream fileInputStream = new FileInputStream(ksw_logo_m_OldPath_animal);
                    int available = fileInputStream.available();
                    byte[] bArr = new byte[available];
                    Log.i(TAG, "Logo File Size =" + available);
                    fileInputStream.read(bArr);
                    fileInputStream.close();
                    fileOutputStream.write(bArr);
                    fileOutputStream.close();
                    Runtime.getRuntime().exec("chmod 777 /data/local/bootanimation.zip");
                }
            }

            private void deleteKey() {
                File file2 = new File(this.file_gesture);
                if (file2.exists() || !file2.isDirectory()) {
                    file2.delete();
                }
                File file3 = new File(this.file_password);
                if (file3.exists() || !file3.isDirectory()) {
                    file3.delete();
                }
                File file4 = new File(this.file_locksettings_db);
                if (file4.exists() || !file4.isDirectory()) {
                    file4.delete();
                }
                File file5 = new File(this.file_locksettings_db_shm);
                if (file5.exists() || !file5.isDirectory()) {
                    file5.delete();
                }
                File file6 = new File(this.file_locksettings_db_wal);
                if (file6.exists() || !file6.isDirectory()) {
                    file6.delete();
                }
            }

            public void postRunModeActivity(int i) {
                Log.d(TAG, "postRunModeActivity mode = " + i);
                if (!this.mBackcarConnected) {
                    if (isEffectiveMode(i)) {
                        this.mStartMode = EventUtils.eSrcMode.valueOf(i);
                    } else {
                        this.mStartMode = EventUtils.eSrcMode.SRC_NONE;
                    }
                    if (i == EventUtils.eSrcMode.SRC_EXPLORER.getIntValue()) {
                        EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.EXPLORER_MODE_PACKAGE_NAME, EventUtils.EXPLORER_MODE_CLASS_NAME);
                    } else if (i == EventUtils.eSrcMode.SRC_DVR.getIntValue()) {
                        ksw_enter_dvr();
                    } else if (i == EventUtils.eSrcMode.SRC_ATSL_AIRCONSOLE.getIntValue()) {
                        sendSwitchOriginaCar();
                    } else if (i == EventUtils.eSrcMode.SRC_RADIO.getIntValue()) {
                        if (this.m_iUITypeVer != 41) {
                            EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.RADIO_MODE_PACKAGE_NAME, EventUtils.RADIO_MODE_CLASS_NAME);
                        } else {
                            return;
                        }
                    } else if (i == EventUtils.eSrcMode.SRC_MUSIC.getIntValue()) {
                        EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.MUSIC_MODE_PACKAGE_NAME, EventUtils.MUSIC_MODE_CLASS_NAME);
                    } else if (i == EventUtils.eSrcMode.SRC_MOVIE.getIntValue()) {
                        EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.MOVIE_MODE_PACKAGE_NAME, EventUtils.MOVIE_MODE_CLASS_NAME);
                    } else if (i == EventUtils.eSrcMode.SRC_BT.getIntValue() || i == EventUtils.eSrcMode.SRC_BT_ONLY.getIntValue()) {
                        if (this.m_iModeSet == 39) {
                            EventUtils.enterBtWithExtra(this, EventUtils.BT_SetPageKey);
                        } else {
                            EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.BT_MODE_PACKAGE_NAME, EventUtils.BT_MODE_CLASS_NAME);
                        }
                    } else if (i == EventUtils.eSrcMode.SRC_BTMUSIC.getIntValue()) {
                        if (this.m_iModeSet == 39) {
                            EventUtils.enterBtWithExtra(this, EventUtils.BT_SetPageKey);
                        } else {
                            EventUtils.enterBtWithExtra(this, EventUtils.BT_MusicPageKey);
                        }
                    } else if (i == EventUtils.eSrcMode.SRC_PHONELINK.getIntValue()) {
                        if (!EventUtils.startActivityIfNotRuning2(getApplicationContext(), EventUtils.PHONEAPP_MODE_PACKAGE_NAME, EventUtils.PHONEAPP_MODE_CLASS_NAME)) {
                            EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.PHONEAPP_MODE_PACKAGE_NAME, EventUtils.PHONEAPP_MODE_CLASS_NAME2);
                        }
                    } else if (i == EventUtils.eSrcMode.SRC_SETUP.getIntValue()) {
                        EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.SET_MODE_PACKAGE_NAME, EventUtils.SET_MODE_CLASS_NAME);
                    } else if (i == EventUtils.eSrcMode.SRC_GPS.getIntValue()) {
                        EventUtils.startActivityIfNotRuning(getApplicationContext(), "com.szchoiceway.navigation", EventUtils.NAV_MODE_CLASS_NAME);
                    } else if (i == EventUtils.eSrcMode.SRC_ES_FILE_EXPLORER.getIntValue()) {
                        if (EventUtils.getInstallStatus(getApplicationContext(), EventUtils.ESUPER_MODE_PACKAGE_NAME)) {
                            EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.ESUPER_MODE_PACKAGE_NAME, EventUtils.ESUPER_MODE_CLASS_NAME);
                        } else if (EventUtils.getInstallStatus(getApplicationContext(), EventUtils.ESTRONGS_MODE_PACKAGE_NAME)) {
                            EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.ESTRONGS_MODE_PACKAGE_NAME, EventUtils.ESTRONGS_MODE_CLASS_NAME);
                        }
                    } else if (i == EventUtils.eSrcMode.SRC_APP_LIST.getIntValue()) {
                        ProcessCanKey(9);
                        Log.i(TAG, "postRunModeActivity: SRC_APP_LIST");
                        SystemClock.sleep(200);
                        sendBroadcastAsUser(new Intent(EventUtils.ZXW_CAN_START_UP_APPS), UserHandle.ALL);
                    } else if (i == EventUtils.eSrcMode.SRC_CARPLAY.getIntValue()) {
                        if (EventUtils.getInstallStatus(this, EventUtils.ZLINK_MODE_PACKAGE_NAME)) {
                            EventUtils.startZlink(this);
                        } else {
                            EventUtils.startLetter(this);
                        }
                    } else if (i == EventUtils.eSrcMode.SRC_AUX.getIntValue()) {
                        if (this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_HAVE_AUX, false)) {
                            EventUtils.startActivityIfNotRuning(mAppContext, "com.szchoiceway.ksw_aux", "com.szchoiceway.ksw_aux.MainActivity");
                        } else {
                            Toast.makeText(this, getString(R.string.lb_no_device), 1).show();
                        }
                    } else if (i == EventUtils.eSrcMode.SRC_CMMB.getIntValue()) {
                        if (this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_HAVE_TV, false)) {
                            EventUtils.startActivityIfNotRuning(mAppContext, "com.szchoiceway.ksw_cmmb", "com.szchoiceway.ksw_cmmb.MainActivity");
                        } else {
                            Toast.makeText(this, getString(R.string.lb_no_device), 1).show();
                        }
                    } else if (i == EventUtils.eSrcMode.SRC_FRONT_CAMERA.getIntValue()) {
                        if (this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_HAVE_FRONT_CAMERA, false)) {
                            EventUtils.startActivityIfNotRuning(mAppContext, "com.szchoiceway.ksw_fc", "com.szchoiceway.ksw_fc.MainActivity");
                        } else {
                            Toast.makeText(this, getString(R.string.lb_no_device), 1).show();
                        }
                    } else if (i == EventUtils.eSrcMode.SRC_TXZ_WEATHER.getIntValue()) {
                        EventUtils.startActivityIfNotRuning(mAppContext, EventUtils.WEATHER_MODE_PACKAGE_NAME, EventUtils.WEATHER_MODE_CLASS_NAME);
                    } else if (i == EventUtils.eSrcMode.SRC_NONE.getIntValue() || i == EventUtils.eSrcMode.SRC_NULL.getIntValue()) {
                        setCurModeCallback(EventUtils.eSrcMode.SRC_NONE.getIntValue(), (ICallbackfn) null);
                        sendMode(EventUtils.eSrcMode.SRC_NULL, true);
                        ProcessCanKey(85);
                    }
                    if (i > 0 && i <= EventUtils.eSrcMode.SRC_AUX.getIntValue()) {
                        this.mStartModeCount = SystemClock.elapsedRealtime();
                    }
                }
            }

            public void shutdown() {
                Intent intent = new Intent("com.android.internal.intent.action.REQUEST_SHUTDOWN");
                intent.putExtra("android.intent.extra.KEY_CONFIRM", false);
                intent.setFlags(268435456);
                getApplicationContext().startActivity(intent);
            }

            /* access modifiers changed from: private */
            public void ksw_0x00_0xA1_0x19_refreshData(byte[] bArr) {
                int i;
                String str;
                String str2;
                boolean z = false;
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_DISTACNE_UNIT, 0);
                int recordInteger2 = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_TEMP_UNIT, 0);
                int i2 = ((bArr[5] & 255) * 256) + (bArr[6] & 255);
                int i3 = ((bArr[6] & 255) * 256) + (bArr[7] & 255);
                int i4 = this.m_iModeSet;
                if ((i4 == 3 || i4 == 1 || i4 == 5 || i4 == 6 || i4 == 14) && bArr.length >= 23) {
                    i2 = ((bArr[21] & 255) * 256) + (bArr[22] & 255) + ((bArr[20] & 255) * 256 * 256);
                }
                byte b = bArr[9];
                byte b2 = bArr[10];
                this.itvShunShiSuDu = ((bArr[11] & 255) * 256) + (bArr[12] & 255);
                int i5 = ((bArr[13] & 255) * 256) + (bArr[14] & 255);
                int i6 = ((bArr[15] & 255) * 256) + (bArr[16] & 255);
                if ((bArr[17] & EventUtils.CMD_FREQ_SEL) > 0) {
                    i = ((((bArr[17] & 255) * 256) + (bArr[18] & 255)) - SupportMenu.USER_MASK) - 1;
                } else {
                    i = ((bArr[17] & EventUtils.CMD_UPGRADE_ACK) * 256) + (bArr[18] & 255);
                }
                byte b3 = bArr[19] & 8;
                boolean z2 = recordInteger == 1;
                byte b4 = bArr[19] & 4;
                if (recordInteger2 == 1) {
                    z = true;
                }
                if (i > 775) {
                    i = 775;
                } else if (i < -400) {
                    i = -400;
                }
                if (z2) {
                    str = i2 + "mile";
                } else {
                    str = i2 + "km";
                }
                double d = z ? (((double) i) * 0.1d * 1.8d) + 32.0d : ((double) i) * 0.1d;
                DecimalFormat decimalFormat = new DecimalFormat("0.0");
                String format = decimalFormat.format(d);
                if (z) {
                    str2 = format + "℉";
                } else {
                    str2 = format + "℃";
                }
                Intent intent = new Intent(EventUtils.ZXW_SENDBROADCAST8902MOD);
                intent.putExtra(EventUtils.ZXW_SENDBROADCAST8902MOD_EXTRA, 25);
                intent.putExtra(EventUtils.ZXW_SENDBROADCAST8902MOD_xushilicheng, str);
                intent.putExtra(EventUtils.ZXW_SENDBROADCAST8902MOD_ShunShiSuDu, this.itvShunShiSuDu);
                intent.putExtra(EventUtils.ZXW_SENDBROADCAST8902MOD_SpeedUnit, z2);
                intent.putExtra(EventUtils.ZXW_SENDBROADCAST8902MOD_fadongjizhuansu, i5);
                intent.putExtra(EventUtils.ZXW_SENDBROADCAST8902MOD_youLiang, i6 + BuildConfig.FLAVOR);
                intent.putExtra(EventUtils.ZXW_SENDBROADCAST8902MOD_huanjinwendu, str2);
                intent.putExtra(EventUtils.ZXW_SENDBROADCAST8902MOD_youhao, decimalFormat.format(((double) i3) * 0.1d) + "m/L");
                sendBroadcast(intent);
                sendSpeedMessageToLD();
                sendSpeedMessageToXYQ();
                BackcarEventHw backcarEventHw = this.mBackcarEvtHw;
                if (backcarEventHw != null) {
                    backcarEventHw.setSpeedData(this.itvShunShiSuDu);
                    this.mBackcarEvtHw.setTempData(str2);
                }
            }

            /* access modifiers changed from: private */
            public void ksw_0x00_0xA1_0x12_refreshData(byte[] bArr) {
                if (bArr.length >= 6) {
                    int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SYS_DOOR_SET_VALUE_INDEX_KEY, this.iFatSetDoorSetSelectIndex);
                    this.iFatSetDoorSetSelectIndex = recordInteger;
                    if (recordInteger == 1) {
                        if ((bArr[5] & 64) > 0) {
                            mbyDoorData = (byte) (EventUtils.BIT_ON(mbyDoorData, 5) & 255);
                        } else {
                            mbyDoorData = (byte) (EventUtils.BIT_OFF(mbyDoorData, 5) & 255);
                        }
                        if ((bArr[5] & EventUtils.CMD_FREQ_SEL) > 0) {
                            mbyDoorData = (byte) (EventUtils.BIT_ON(mbyDoorData, 4) & 255);
                        } else {
                            mbyDoorData = (byte) (EventUtils.BIT_OFF(mbyDoorData, 4) & 255);
                        }
                        if ((bArr[5] & 16) > 0) {
                            mbyDoorData = (byte) (EventUtils.BIT_ON(mbyDoorData, 7) & 255);
                        } else {
                            mbyDoorData = (byte) (EventUtils.BIT_OFF(mbyDoorData, 7) & 255);
                        }
                        if ((bArr[5] & 32) > 0) {
                            mbyDoorData = (byte) (EventUtils.BIT_ON(mbyDoorData, 6) & 255);
                        } else {
                            mbyDoorData = (byte) (EventUtils.BIT_OFF(mbyDoorData, 6) & 255);
                        }
                        if ((bArr[5] & 8) > 0) {
                            mbyDoorData = (byte) (EventUtils.BIT_ON(mbyDoorData, 2) & 255);
                        } else {
                            mbyDoorData = (byte) (EventUtils.BIT_OFF(mbyDoorData, 2) & 255);
                        }
                        if ((bArr[5] & 4) > 0) {
                            mbyDoorData = (byte) (EventUtils.BIT_ON(mbyDoorData, 3) & 255);
                        } else {
                            mbyDoorData = (byte) (EventUtils.BIT_OFF(mbyDoorData, 3) & 255);
                        }
                    } else {
                        if ((bArr[5] & 64) > 0) {
                            mbyDoorData = (byte) (EventUtils.BIT_ON(mbyDoorData, 4) & 255);
                        } else {
                            mbyDoorData = (byte) (EventUtils.BIT_OFF(mbyDoorData, 4) & 255);
                        }
                        if ((bArr[5] & EventUtils.CMD_FREQ_SEL) > 0) {
                            mbyDoorData = (byte) (EventUtils.BIT_ON(mbyDoorData, 5) & 255);
                        } else {
                            mbyDoorData = (byte) (EventUtils.BIT_OFF(mbyDoorData, 5) & 255);
                        }
                        if ((bArr[5] & 16) > 0) {
                            mbyDoorData = (byte) (EventUtils.BIT_ON(mbyDoorData, 6) & 255);
                        } else {
                            mbyDoorData = (byte) (EventUtils.BIT_OFF(mbyDoorData, 6) & 255);
                        }
                        if ((bArr[5] & 32) > 0) {
                            mbyDoorData = (byte) (EventUtils.BIT_ON(mbyDoorData, 7) & 255);
                        } else {
                            mbyDoorData = (byte) (EventUtils.BIT_OFF(mbyDoorData, 7) & 255);
                        }
                        if ((bArr[5] & 8) > 0) {
                            mbyDoorData = (byte) (EventUtils.BIT_ON(mbyDoorData, 2) & 255);
                        } else {
                            mbyDoorData = (byte) (EventUtils.BIT_OFF(mbyDoorData, 2) & 255);
                        }
                        if ((bArr[5] & 4) > 0) {
                            mbyDoorData = (byte) (EventUtils.BIT_ON(mbyDoorData, 3) & 255);
                        } else {
                            mbyDoorData = (byte) (EventUtils.BIT_OFF(mbyDoorData, 3) & 255);
                        }
                    }
                    String str = null;
                    SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                    if (sysProviderOpt != null) {
                        bDashboardIsResume = sysProviderOpt.getRecordBoolean("ZXW_DASHBOARD_IS_RESUME", bDashboardIsResume);
                        str = this.mSysProviderOpt.getRecordValue(SysProviderOpt.KSW_FACTORY_SET_CLIENT, (String) null);
                        if (str != null && "CHWY".equalsIgnoreCase(str)) {
                            bDashboardIsResume = false;
                            this.mSysProviderOpt.updateRecord("ZXW_DASHBOARD_IS_RESUME", "0");
                        }
                        Log.i(TAG, "ksw_0x00_0xA1_0x12_refreshData: bDashboardIsResume = " + bDashboardIsResume);
                        Log.i(TAG, "ksw_0x00_0xA1_0x12_refreshData: xml_client = " + str);
                    }
                    if (bDashboardIsResume) {
                        this.mEventHandler.sendEmptyMessage(WHAT_HIDE_DOOR_WND);
                    } else if (str == null || (!"CHWY".equalsIgnoreCase(str) && !"XinCheng".equalsIgnoreCase(str))) {
                        this.mEventHandler.sendEmptyMessage(WHAT_HIDE_DOOR_WND);
                    } else {
                        this.mEventHandler.sendEmptyMessage(WHAT_CAN_DOOR_EVT);
                    }
                }
            }

            public void createDoorWnd() {
                Context context;
                if (mDoorWndView == null) {
                    if (this.m_iUITypeVer != 41 || !"XinCheng".equalsIgnoreCase(this.xml_client) || !mScreen1920x720) {
                        mDoorWndView = new DoorWndFrame(this, R.layout.cardoor_layout);
                    } else {
                        mDoorWndView = new DoorWndFrame(this, R.layout.cardoor_layout2);
                    }
                }
                if (mDoorWndView != null && (context = mAppContext) != null) {
                    if (wm == null) {
                        wm = (WindowManager) context.getSystemService("window");
                    }
                    wmDoorWndParams.type = 2003;
                    wmDoorWndParams.format = 1;
                    wmDoorWndParams.flags = 312;
                    wmDoorWndParams.gravity = 51;
                    if (mScreen1280x480) {
                        wmDoorWndParams.x = 0;
                        wmDoorWndParams.y = 0;
                        wmDoorWndParams.width = 1280;
                        wmDoorWndParams.height = 480;
                    } else if (mScreen1920x720) {
                        wmDoorWndParams.x = 0;
                        wmDoorWndParams.y = 0;
                        wmDoorWndParams.width = 1920;
                        wmDoorWndParams.height = 720;
                    }
                    RelativeLayout relativeLayout = (RelativeLayout) mDoorWndView.findViewById(R.id.rlCarDoor);
                    this.rlCarDoor = relativeLayout;
                    if (relativeLayout != null) {
                        relativeLayout.setOnTouchListener(new View.OnTouchListener() {
                            public boolean onTouch(View view, MotionEvent motionEvent) {
                                EventService.this.mEventHandler.removeMessages(EventService.WHAT_HIDE_DOOR_WND);
                                EventService.this.mEventHandler.sendEmptyMessageDelayed(EventService.WHAT_HIDE_DOOR_WND, 10);
                                return true;
                            }
                        });
                    }
                    this.rlCarDoor1 = (RelativeLayout) mDoorWndView.findViewById(R.id.rlCarDoor1);
                }
            }

            public static void removeDoorWnd() {
                synchronized (mObject) {
                    if (mIsAddDoorView) {
                        if (mDoorWndView != null) {
                            if (wm == null) {
                                wm = (WindowManager) mAppContext.getSystemService("window");
                            }
                            WindowManager windowManager = wm;
                            if (windowManager != null) {
                                windowManager.removeView(mDoorWndView);
                            }
                        }
                        mIsAddDoorView = false;
                    }
                }
            }

            public static void addDoorWnd() {
                DoorWndFrame doorWndFrame;
                synchronized (mObject) {
                    if (!mIsAddDoorView) {
                        WindowManager windowManager = wm;
                        if (!(windowManager == null || (doorWndFrame = mDoorWndView) == null)) {
                            windowManager.addView(doorWndFrame, wmDoorWndParams);
                        }
                        mIsAddDoorView = true;
                    }
                }
            }

            public void showDoorWnd(boolean z) {
                this.mEventHandler.removeMessages(WHAT_HIDE_DOOR_WND);
                addDoorWnd();
            }

            public void showDoorWnd() {
                showDoorWnd(true);
            }

            private void createCarAirWnd() {
                Log.d(TAG, "createCarAirWnd");
                String recordValue = this.mSysProviderOpt.getRecordValue(SysProviderOpt.KSW_UI_RESOLUTION, "1920x720");
                if (wm == null) {
                    wm = (WindowManager) getSystemService("window");
                }
                wmAirWndParams.type = 2002;
                wmAirWndParams.format = 1;
                wmAirWndParams.flags = 296;
                wmAirWndParams.gravity = 51;
                wmAirWndParams.windowAnimations = R.style.PopupAnimation2;
                wmAirWndParams.x = 0;
                wmAirWndParams.y = 0;
                wmAirWndParams.width = this.screenWidth;
                wmAirWndParams.height = this.screenHeight;
                if (Customer.getUIIndex(this) == 4 && this.m_iModeSet != 29) {
                    this.hideAirTime = 3000;
                    if ("1560x700".equalsIgnoreCase(recordValue)) {
                        this.mAirWndView = View.inflate(this, R.layout.layout_audi_car_air2_1560x700, (ViewGroup) null);
                    } else if (Customer.isSmallResolution(getApplicationContext())) {
                        this.mAirWndView = View.inflate(this, R.layout.layout_audi_car_air2_1024x600, (ViewGroup) null);
                        wmAirWndParams.x = (this.screenWidth - 1024) / 2;
                        wmAirWndParams.y = (this.screenHeight - 600) / 2;
                        wmAirWndParams.width = 1024;
                        wmAirWndParams.height = 600;
                    } else {
                        this.mAirWndView = View.inflate(this, R.layout.layout_audi_car_air2, (ViewGroup) null);
                    }
                } else if (Customer.getUIIndex(this) == 7) {
                    this.lexusAirViewComponent.get().initRootView();
                } else {
                    if (Customer.isSmallResolution(getApplicationContext())) {
                        this.mAirWndView = View.inflate(this, R.layout.small_layout_benz_car_air, (ViewGroup) null);
                        wmAirWndParams.height = (int) getResources().getDimension(R.dimen.benz_air_height_1024);
                    } else {
                        this.mAirWndView = View.inflate(this, R.layout.layout_benz_car_air, (ViewGroup) null);
                        wmAirWndParams.height = (int) getResources().getDimension(R.dimen.benz_air_height);
                    }
                    WindowManager.LayoutParams layoutParams = wmAirWndParams;
                    layoutParams.y = this.screenHeight - layoutParams.height;
                }
                initCarAirView();
            }

            private void initCarAirView() {
                View view2 = this.mAirWndView;
                if (view2 != null) {
                    this.viewAirOn = view2.findViewById(R.id.viewAirOn);
                    this.tvAirOff = (TextView) this.mAirWndView.findViewById(R.id.tvAirOff);
                    this.rlFrontWinMaxOffShow = (RelativeLayout) this.mAirWndView.findViewById(R.id.rlFrontWinMaxOffShow);
                    this.cbAirLeftWindUp = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirLeftWindUp);
                    this.cbAirLeftWindParallel = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirLeftWindParallel);
                    this.cbAirLeftWindDown = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirLeftWindDown);
                    this.cbAirLeftWindAuto = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirLeftWindAuto);
                    this.cbAirRightWindUp = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirRightWindUp);
                    this.cbAirRightWindParallel = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirRightWindParallel);
                    this.cbAirRightWindDown = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirRightWindDown);
                    this.cbAirRightWindAuto = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirRightWindAuto);
                    this.cbAirAc = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirAc);
                    this.cbAircirCulat = (CheckBox) this.mAirWndView.findViewById(R.id.cbAircirCulat);
                    this.cbAirFrontWin = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirFrontWin);
                    this.cbAirRearWin = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirRearWin);
                    this.cbAirWindSpeedAuto = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirWindSpeedAuto);
                    this.tvAirLeftTemp = (TextView) this.mAirWndView.findViewById(R.id.tvAirLeftTemp);
                    this.tvAirRightTemp = (TextView) this.mAirWndView.findViewById(R.id.tvAirRightTemp);
                    this.tvAirWindSpeed = (TextView) this.mAirWndView.findViewById(R.id.tvAirWindSpeed);
                    this.tvEco = (TextView) this.mAirWndView.findViewById(R.id.tvECO);
                    this.tvSync = (TextView) this.mAirWndView.findViewById(R.id.tvSync);
                    this.layoutAirWind = (ViewGroup) this.mAirWndView.findViewById(R.id.layoutAirWind);
                    this.layoutAirTemp = (ViewGroup) this.mAirWndView.findViewById(R.id.layoutAirTemp);
                    this.imgLevelWindSpeedLeft = (ImageView) this.mAirWndView.findViewById(R.id.imgLevelWindSpeedLeft);
                    this.imgLevelWindSpeedRight = (ImageView) this.mAirWndView.findViewById(R.id.imgLevelWindSpeedRight);
                    this.imgFlashWindSpeedLeft = (ImageView) this.mAirWndView.findViewById(R.id.imgFlashWindSpeedLeft);
                    this.imgFlashWindSpeedRight = (ImageView) this.mAirWndView.findViewById(R.id.imgFlashWindSpeedRight);
                    this.imgLevelTempLeft = (ImageView) this.mAirWndView.findViewById(R.id.imgLevelTempLeft);
                    this.imgLevelTempRight = (ImageView) this.mAirWndView.findViewById(R.id.imgLevelTempRight);
                    this.imgLevelWindDirection = (ImageView) this.mAirWndView.findViewById(R.id.imgLevelWindDirection);
                    this.tvAirWindSpeedLeft = (TextView) this.mAirWndView.findViewById(R.id.tvAirWindSpeedLeft);
                    this.tvAirWindSpeedRight = (TextView) this.mAirWndView.findViewById(R.id.tvAirWindSpeedRight);
                    this.tvAirLeftTempUnit = (TextView) this.mAirWndView.findViewById(R.id.tvAirLeftTempUnit);
                    this.tvAirRightTempUnit = (TextView) this.mAirWndView.findViewById(R.id.tvAirRightTempUnit);
                    this.cbAirWindSpeedAutoLeft = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirWindSpeedAutoLeft);
                    this.cbAirWindSpeedAutoRight = (CheckBox) this.mAirWndView.findViewById(R.id.cbAirWindSpeedAutoRight);
                    this.btnAirReturn = (Button) this.mAirWndView.findViewById(R.id.btnAirReturn);
                    this.lexusAirViewComponent.get().init();
                    Button button = this.btnAirReturn;
                    if (button != null) {
                        button.setOnClickListener(new View.OnClickListener() {
                            public final void onClick(View view) {
                                EventService.this.lambda$initCarAirView$4$EventService(view);
                            }
                        });
                    }
                }
            }

            public /* synthetic */ void lambda$initCarAirView$4$EventService(View view2) {
                this.mEventHandler.removeMessages(WHAT_HIDE_AIR_WND);
                this.mEventHandler.sendEmptyMessage(WHAT_HIDE_AIR_WND);
            }

            public void showLexusAirWnd() {
                synchronized (mObject) {
                    removeAirtWnd();
                    if (!this.lexusAirViewAdded) {
                        if (!(wm == null || this.lexusAirViewComponent.get().getRootView() == null)) {
                            wm.addView(this.lexusAirViewComponent.get().getRootView(), this.lexusAirViewComponent.get().getLayoutParams());
                        }
                        this.lexusAirViewAdded = true;
                    }
                }
            }

            public void hideLexusAirWnd() {
                Context context;
                synchronized (mObject) {
                    if (this.lexusAirViewAdded) {
                        if (!(this.lexusAirViewComponent.get().getRootView() == null || (context = mAppContext) == null)) {
                            if (wm == null) {
                                wm = (WindowManager) context.getSystemService("window");
                            }
                            WindowManager windowManager = wm;
                            if (windowManager != null) {
                                windowManager.removeView(this.lexusAirViewComponent.get().getRootView());
                            }
                        }
                        this.lexusAirViewAdded = false;
                    }
                }
            }

            public void removeAirtWnd() {
                Context context;
                AnimationDrawable animationDrawable;
                AnimationDrawable animationDrawable2;
                synchronized (mObject) {
                    if (mIsAddAirView) {
                        if (!(this.mAirWndView == null || (context = mAppContext) == null)) {
                            if (wm == null) {
                                wm = (WindowManager) context.getSystemService("window");
                            }
                            if (wm != null) {
                                this.flashWind = false;
                                ImageView imageView = this.imgFlashWindSpeedLeft;
                                if (!(imageView == null || (animationDrawable2 = (AnimationDrawable) imageView.getBackground()) == null)) {
                                    animationDrawable2.stop();
                                }
                                ImageView imageView2 = this.imgFlashWindSpeedRight;
                                if (!(imageView2 == null || (animationDrawable = (AnimationDrawable) imageView2.getBackground()) == null)) {
                                    animationDrawable.stop();
                                }
                                wm.removeView(this.mAirWndView);
                            }
                        }
                        mIsAddAirView = false;
                    }
                }
            }

            public void addAirWnd() {
                View view2;
                synchronized (mObject) {
                    hideLexusAirWnd();
                    if (!mIsAddAirView) {
                        WindowManager windowManager = wm;
                        if (!(windowManager == null || (view2 = this.mAirWndView) == null)) {
                            windowManager.addView(view2, wmAirWndParams);
                            ImageView imageView = this.imgFlashWindSpeedLeft;
                            if (imageView != null) {
                                AnimationDrawable animationDrawable = (AnimationDrawable) imageView.getBackground();
                                this.flashWind = true;
                                if (this.mCarAirStruct.iAirFunSpeed > 0) {
                                    animationDrawable.start();
                                }
                            }
                            ImageView imageView2 = this.imgFlashWindSpeedRight;
                            if (imageView2 != null) {
                                AnimationDrawable animationDrawable2 = (AnimationDrawable) imageView2.getBackground();
                                if (this.mCarAirStruct.iAirFunSpeed > 0) {
                                    animationDrawable2.start();
                                }
                            }
                        }
                        mIsAddAirView = true;
                    }
                }
            }

            public void showAirWnd(boolean z) {
                this.mEventHandler.removeMessages(WHAT_HIDE_AIR_WND);
                addAirWnd();
            }

            public void showAirWnd() {
                showAirWnd(true);
            }

            private void createNaviKingCover() {
                if (wm == null) {
                    wm = (WindowManager) getSystemService("window");
                }
                this.mParamNaviKingCover.type = 2002;
                this.mParamNaviKingCover.format = 1;
                this.mParamNaviKingCover.flags = 296;
                this.mParamNaviKingCover.gravity = 8388659;
                this.mParamNaviKingCover.windowAnimations = R.style.PopupAnimation2;
                this.mParamNaviKingCover.x = 0;
                this.mParamNaviKingCover.y = 0;
                this.mParamNaviKingCover.width = 2;
                this.mParamNaviKingCover.height = 2;
                View inflate = View.inflate(this, R.layout.layout_navi_king_cover, (ViewGroup) null);
                this.mViewNaviKingCover = inflate;
                Button button = (Button) inflate.findViewById(R.id.btnNaviKingCover);
                if (button != null) {
                    button.setOnTouchListener($$Lambda$EventService$L3F5amBZTUUGylANgzndWKjS6Vk.INSTANCE);
                    button.setOnClickListener($$Lambda$EventService$LNqYM_NkCLMELJXYkNzYXBubxS8.INSTANCE);
                }
            }

            /* access modifiers changed from: private */
            public void showNaviKingCover(boolean z) {
                Log.d(TAG, "showNaviKingCover show = " + z);
                if (this.mShowNaviKingCover != z) {
                    this.mShowNaviKingCover = z;
                }
                if (this.mShowNaviKingCover) {
                    wm.addView(this.mViewNaviKingCover, this.mParamNaviKingCover);
                } else {
                    wm.removeView(this.mViewNaviKingCover);
                }
            }

            /* JADX WARNING: Removed duplicated region for block: B:281:0x04bc  */
            /* JADX WARNING: Removed duplicated region for block: B:330:0x0543  */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void OnRefreshCanAirInfo() {
                /*
                    r22 = this;
                    r0 = r22
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    if (r1 != 0) goto L_0x0007
                    return
                L_0x0007:
                    android.view.View r2 = r0.viewAirOn
                    r3 = 8
                    r4 = 0
                    if (r2 == 0) goto L_0x0019
                    boolean r1 = r1.bAirOn
                    if (r1 == 0) goto L_0x0014
                    r1 = 0
                    goto L_0x0016
                L_0x0014:
                    r1 = 8
                L_0x0016:
                    r2.setVisibility(r1)
                L_0x0019:
                    android.widget.TextView r1 = r0.tvAirOff
                    if (r1 == 0) goto L_0x002a
                    com.szchoiceway.eventcenter.CarAirStruct r2 = r0.mCarAirStruct
                    boolean r2 = r2.bAirOn
                    if (r2 == 0) goto L_0x0026
                    r2 = 8
                    goto L_0x0027
                L_0x0026:
                    r2 = 0
                L_0x0027:
                    r1.setVisibility(r2)
                L_0x002a:
                    android.widget.CheckBox r1 = r0.cbAirAc
                    if (r1 == 0) goto L_0x0035
                    com.szchoiceway.eventcenter.CarAirStruct r2 = r0.mCarAirStruct
                    boolean r2 = r2.bAirAcOn
                    r1.setChecked(r2)
                L_0x0035:
                    com.szchoiceway.eventcenter.JavaLazy<com.szchoiceway.eventcenter.lexus.LexusAirViewComponent> r1 = r0.lexusAirViewComponent
                    java.lang.Object r1 = r1.get()
                    com.szchoiceway.eventcenter.lexus.LexusAirViewComponent r1 = (com.szchoiceway.eventcenter.lexus.LexusAirViewComponent) r1
                    com.szchoiceway.eventcenter.CarAirStruct r2 = r0.mCarAirStruct
                    boolean r2 = r2.bAirAcOn
                    r1.setAcState(r2)
                    android.widget.CheckBox r1 = r0.cbAircirCulat
                    if (r1 == 0) goto L_0x004f
                    com.szchoiceway.eventcenter.CarAirStruct r2 = r0.mCarAirStruct
                    boolean r2 = r2.bAirCulatOn
                    r1.setChecked(r2)
                L_0x004f:
                    com.szchoiceway.eventcenter.JavaLazy<com.szchoiceway.eventcenter.lexus.LexusAirViewComponent> r1 = r0.lexusAirViewComponent
                    java.lang.Object r1 = r1.get()
                    com.szchoiceway.eventcenter.lexus.LexusAirViewComponent r1 = (com.szchoiceway.eventcenter.lexus.LexusAirViewComponent) r1
                    com.szchoiceway.eventcenter.CarAirStruct r2 = r0.mCarAirStruct
                    boolean r2 = r2.bAirCulatOn
                    r1.setCycleModeState(r2)
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirLeftFunAtuo
                    r2 = 1
                    if (r1 == 0) goto L_0x0082
                    android.widget.CheckBox r1 = r0.cbAirLeftWindUp
                    if (r1 == 0) goto L_0x006c
                    r1.setChecked(r4)
                L_0x006c:
                    android.widget.CheckBox r1 = r0.cbAirLeftWindParallel
                    if (r1 == 0) goto L_0x0073
                    r1.setChecked(r4)
                L_0x0073:
                    android.widget.CheckBox r1 = r0.cbAirLeftWindDown
                    if (r1 == 0) goto L_0x007a
                    r1.setChecked(r4)
                L_0x007a:
                    android.widget.CheckBox r1 = r0.cbAirLeftWindAuto
                    if (r1 == 0) goto L_0x00aa
                    r1.setChecked(r2)
                    goto L_0x00aa
                L_0x0082:
                    android.widget.CheckBox r1 = r0.cbAirLeftWindUp
                    if (r1 == 0) goto L_0x008d
                    com.szchoiceway.eventcenter.CarAirStruct r5 = r0.mCarAirStruct
                    boolean r5 = r5.bAirLeftFunUp
                    r1.setChecked(r5)
                L_0x008d:
                    android.widget.CheckBox r1 = r0.cbAirLeftWindParallel
                    if (r1 == 0) goto L_0x0098
                    com.szchoiceway.eventcenter.CarAirStruct r5 = r0.mCarAirStruct
                    boolean r5 = r5.bAirLeftFunParalle
                    r1.setChecked(r5)
                L_0x0098:
                    android.widget.CheckBox r1 = r0.cbAirLeftWindDown
                    if (r1 == 0) goto L_0x00a3
                    com.szchoiceway.eventcenter.CarAirStruct r5 = r0.mCarAirStruct
                    boolean r5 = r5.bAirLeftFunDown
                    r1.setChecked(r5)
                L_0x00a3:
                    android.widget.CheckBox r1 = r0.cbAirLeftWindAuto
                    if (r1 == 0) goto L_0x00aa
                    r1.setChecked(r4)
                L_0x00aa:
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunAtuo
                    if (r1 == 0) goto L_0x00cd
                    android.widget.CheckBox r1 = r0.cbAirRightWindUp
                    if (r1 == 0) goto L_0x00b7
                    r1.setChecked(r4)
                L_0x00b7:
                    android.widget.CheckBox r1 = r0.cbAirRightWindParallel
                    if (r1 == 0) goto L_0x00be
                    r1.setChecked(r4)
                L_0x00be:
                    android.widget.CheckBox r1 = r0.cbAirRightWindDown
                    if (r1 == 0) goto L_0x00c5
                    r1.setChecked(r4)
                L_0x00c5:
                    android.widget.CheckBox r1 = r0.cbAirRightWindAuto
                    if (r1 == 0) goto L_0x00f5
                    r1.setChecked(r2)
                    goto L_0x00f5
                L_0x00cd:
                    android.widget.CheckBox r1 = r0.cbAirRightWindUp
                    if (r1 == 0) goto L_0x00d8
                    com.szchoiceway.eventcenter.CarAirStruct r5 = r0.mCarAirStruct
                    boolean r5 = r5.bAirRightFunUp
                    r1.setChecked(r5)
                L_0x00d8:
                    android.widget.CheckBox r1 = r0.cbAirRightWindParallel
                    if (r1 == 0) goto L_0x00e3
                    com.szchoiceway.eventcenter.CarAirStruct r5 = r0.mCarAirStruct
                    boolean r5 = r5.bAirRightFunParalle
                    r1.setChecked(r5)
                L_0x00e3:
                    android.widget.CheckBox r1 = r0.cbAirRightWindDown
                    if (r1 == 0) goto L_0x00ee
                    com.szchoiceway.eventcenter.CarAirStruct r5 = r0.mCarAirStruct
                    boolean r5 = r5.bAirRightFunDown
                    r1.setChecked(r5)
                L_0x00ee:
                    android.widget.CheckBox r1 = r0.cbAirRightWindAuto
                    if (r1 == 0) goto L_0x00f5
                    r1.setChecked(r4)
                L_0x00f5:
                    android.widget.RelativeLayout r1 = r0.rlFrontWinMaxOffShow
                    if (r1 == 0) goto L_0x010a
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirFrontWin
                    if (r1 == 0) goto L_0x0105
                    android.widget.RelativeLayout r1 = r0.rlFrontWinMaxOffShow
                    r1.setVisibility(r3)
                    goto L_0x010a
                L_0x0105:
                    android.widget.RelativeLayout r1 = r0.rlFrontWinMaxOffShow
                    r1.setVisibility(r4)
                L_0x010a:
                    android.widget.CheckBox r1 = r0.cbAirFrontWin
                    if (r1 == 0) goto L_0x0115
                    com.szchoiceway.eventcenter.CarAirStruct r5 = r0.mCarAirStruct
                    boolean r5 = r5.bAirFrontWin
                    r1.setChecked(r5)
                L_0x0115:
                    com.szchoiceway.eventcenter.JavaLazy<com.szchoiceway.eventcenter.lexus.LexusAirViewComponent> r1 = r0.lexusAirViewComponent
                    java.lang.Object r1 = r1.get()
                    com.szchoiceway.eventcenter.lexus.LexusAirViewComponent r1 = (com.szchoiceway.eventcenter.lexus.LexusAirViewComponent) r1
                    com.szchoiceway.eventcenter.CarAirStruct r5 = r0.mCarAirStruct
                    boolean r5 = r5.bAirFrontWin
                    r1.setFrontWinState(r5)
                    android.widget.CheckBox r1 = r0.cbAirRearWin
                    if (r1 == 0) goto L_0x012f
                    com.szchoiceway.eventcenter.CarAirStruct r5 = r0.mCarAirStruct
                    boolean r5 = r5.bAirRearWin
                    r1.setChecked(r5)
                L_0x012f:
                    com.szchoiceway.eventcenter.JavaLazy<com.szchoiceway.eventcenter.lexus.LexusAirViewComponent> r1 = r0.lexusAirViewComponent
                    java.lang.Object r1 = r1.get()
                    com.szchoiceway.eventcenter.lexus.LexusAirViewComponent r1 = (com.szchoiceway.eventcenter.lexus.LexusAirViewComponent) r1
                    com.szchoiceway.eventcenter.CarAirStruct r5 = r0.mCarAirStruct
                    boolean r5 = r5.bAirRearWin
                    r1.setRearWinState(r5)
                    android.widget.CheckBox r1 = r0.cbAirWindSpeedAuto
                    if (r1 == 0) goto L_0x0149
                    com.szchoiceway.eventcenter.CarAirStruct r5 = r0.mCarAirStruct
                    boolean r5 = r5.bAirFunSpeedAuto
                    r1.setChecked(r5)
                L_0x0149:
                    android.widget.TextView r1 = r0.tvAirWindSpeed
                    java.lang.String r5 = ""
                    r6 = 4611686018427387904(0x4000000000000000, double:2.0)
                    if (r1 == 0) goto L_0x01a6
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirFunSpeedAuto
                    if (r1 == 0) goto L_0x015d
                    android.widget.TextView r1 = r0.tvAirWindSpeed
                    r1.setVisibility(r3)
                    goto L_0x0162
                L_0x015d:
                    android.widget.TextView r1 = r0.tvAirWindSpeed
                    r1.setVisibility(r4)
                L_0x0162:
                    java.math.BigDecimal r1 = new java.math.BigDecimal
                    java.lang.StringBuilder r8 = new java.lang.StringBuilder
                    r8.<init>()
                    com.szchoiceway.eventcenter.CarAirStruct r9 = r0.mCarAirStruct
                    int r9 = r9.iAirFunSpeed
                    double r9 = (double) r9
                    com.szchoiceway.eventcenter.CarAirStruct r11 = r0.mCarAirStruct
                    boolean r11 = r11.bAirFunSpeedHalf
                    if (r11 == 0) goto L_0x0176
                    r11 = r6
                    goto L_0x0178
                L_0x0176:
                    r11 = 4607182418800017408(0x3ff0000000000000, double:1.0)
                L_0x0178:
                    double r9 = r9 / r11
                    r8.append(r9)
                    r8.append(r5)
                    java.lang.String r8 = r8.toString()
                    r1.<init>(r8)
                    android.widget.TextView r8 = r0.tvAirWindSpeed
                    java.math.BigDecimal r9 = r1.stripTrailingZeros()
                    java.lang.String r9 = r9.toPlainString()
                    r8.setText(r9)
                    com.szchoiceway.eventcenter.JavaLazy<com.szchoiceway.eventcenter.lexus.LexusAirViewComponent> r8 = r0.lexusAirViewComponent
                    java.lang.Object r8 = r8.get()
                    com.szchoiceway.eventcenter.lexus.LexusAirViewComponent r8 = (com.szchoiceway.eventcenter.lexus.LexusAirViewComponent) r8
                    java.math.BigDecimal r1 = r1.stripTrailingZeros()
                    int r1 = r1.intValue()
                    r8.setWinLevel(r1)
                L_0x01a6:
                    android.widget.TextView r1 = r0.tvEco
                    if (r1 == 0) goto L_0x01b7
                    com.szchoiceway.eventcenter.CarAirStruct r8 = r0.mCarAirStruct
                    boolean r8 = r8.bAirEco
                    if (r8 == 0) goto L_0x01b2
                    r8 = 0
                    goto L_0x01b4
                L_0x01b2:
                    r8 = 8
                L_0x01b4:
                    r1.setVisibility(r8)
                L_0x01b7:
                    android.widget.TextView r1 = r0.tvSync
                    if (r1 == 0) goto L_0x01c8
                    com.szchoiceway.eventcenter.CarAirStruct r8 = r0.mCarAirStruct
                    boolean r8 = r8.bAirSync
                    if (r8 == 0) goto L_0x01c3
                    r8 = 0
                    goto L_0x01c5
                L_0x01c3:
                    r8 = 8
                L_0x01c5:
                    r1.setVisibility(r8)
                L_0x01c8:
                    com.szchoiceway.eventcenter.JavaLazy<com.szchoiceway.eventcenter.lexus.LexusAirViewComponent> r1 = r0.lexusAirViewComponent
                    java.lang.Object r1 = r1.get()
                    com.szchoiceway.eventcenter.lexus.LexusAirViewComponent r1 = (com.szchoiceway.eventcenter.lexus.LexusAirViewComponent) r1
                    com.szchoiceway.eventcenter.CarAirStruct r8 = r0.mCarAirStruct
                    boolean r8 = r8.bAirSync
                    r1.setDualState(r8)
                    com.szchoiceway.eventcenter.SysProviderOpt r1 = r0.mSysProviderOpt
                    java.lang.String r8 = "KSW_TEMP_UNIT"
                    boolean r1 = r1.getRecordBoolean(r8, r4)
                    int r8 = com.szchoiceway.eventcenter.Customer.getUIIndex(r22)
                    r9 = 29
                    r10 = 4
                    if (r8 != r10) goto L_0x01ed
                    int r8 = r0.m_iModeSet
                    if (r8 == r9) goto L_0x01ed
                    r1 = 0
                L_0x01ed:
                    com.szchoiceway.eventcenter.CarAirStruct r8 = r0.mCarAirStruct
                    int r8 = r8.iAirLeftTemp
                    java.lang.String r11 = "℃"
                    java.lang.String r12 = "F"
                    java.lang.String r13 = "0.0"
                    r16 = 4610785298501913805(0x3ffccccccccccccd, double:1.8)
                    r3 = 31
                    java.lang.String r18 = "HI"
                    java.lang.String r19 = "LO"
                    r14 = 255(0xff, float:3.57E-43)
                    r20 = 4624915342332788736(0x402f000000000000, double:15.5)
                    if (r8 == 0) goto L_0x02a2
                    if (r8 == r14) goto L_0x0295
                    android.widget.TextView r8 = r0.tvAirLeftTempUnit
                    if (r8 == 0) goto L_0x0211
                    r8.setVisibility(r4)
                L_0x0211:
                    com.szchoiceway.eventcenter.CarAirStruct r8 = r0.mCarAirStruct
                    int r8 = r8.iAirLeftTemp
                    if (r8 < r2) goto L_0x0292
                    com.szchoiceway.eventcenter.CarAirStruct r8 = r0.mCarAirStruct
                    int r8 = r8.iAirLeftTemp
                    if (r8 > r3) goto L_0x0292
                    if (r1 != 0) goto L_0x025c
                    int r8 = com.szchoiceway.eventcenter.Customer.getUIIndex(r22)
                    if (r8 != r10) goto L_0x0243
                    int r8 = r0.m_iModeSet
                    if (r8 == r9) goto L_0x0243
                    java.lang.StringBuilder r8 = new java.lang.StringBuilder
                    r8.<init>()
                    com.szchoiceway.eventcenter.CarAirStruct r15 = r0.mCarAirStruct
                    int r15 = r15.iAirLeftTemp
                    double r2 = (double) r15
                    double r2 = r2 / r6
                    double r2 = r2 + r20
                    r8.append(r2)
                    r8.append(r5)
                    java.lang.String r2 = r8.toString()
                    r15 = r5
                    goto L_0x02ae
                L_0x0243:
                    java.lang.StringBuilder r2 = new java.lang.StringBuilder
                    r2.<init>()
                    com.szchoiceway.eventcenter.CarAirStruct r3 = r0.mCarAirStruct
                    int r3 = r3.iAirLeftTemp
                    r15 = r5
                    double r4 = (double) r3
                    double r4 = r4 / r6
                    double r4 = r4 + r20
                    r2.append(r4)
                    r2.append(r11)
                    java.lang.String r2 = r2.toString()
                    goto L_0x02ae
                L_0x025c:
                    r15 = r5
                    com.szchoiceway.eventcenter.CarAirStruct r2 = r0.mCarAirStruct
                    int r2 = r2.iAirLeftTemp
                    double r2 = (double) r2
                    double r2 = r2 / r6
                    double r2 = r2 + r20
                    double r2 = r2 * r16
                    r4 = 4629700416936869888(0x4040000000000000, double:32.0)
                    double r2 = r2 + r4
                    java.text.DecimalFormat r4 = new java.text.DecimalFormat
                    r4.<init>(r13)
                    int r5 = com.szchoiceway.eventcenter.Customer.getUIIndex(r22)
                    if (r5 != r10) goto L_0x027e
                    int r5 = r0.m_iModeSet
                    if (r5 == r9) goto L_0x027e
                    java.lang.String r2 = r4.format(r2)
                    goto L_0x02ae
                L_0x027e:
                    java.lang.StringBuilder r5 = new java.lang.StringBuilder
                    r5.<init>()
                    java.lang.String r2 = r4.format(r2)
                    r5.append(r2)
                    r5.append(r12)
                    java.lang.String r2 = r5.toString()
                    goto L_0x02ae
                L_0x0292:
                    r15 = r5
                    r2 = r15
                    goto L_0x02ae
                L_0x0295:
                    r15 = r5
                    android.widget.TextView r2 = r0.tvAirLeftTempUnit
                    r3 = 8
                    if (r2 == 0) goto L_0x029f
                    r2.setVisibility(r3)
                L_0x029f:
                    r2 = r18
                    goto L_0x02ae
                L_0x02a2:
                    r15 = r5
                    r3 = 8
                    android.widget.TextView r2 = r0.tvAirLeftTempUnit
                    if (r2 == 0) goto L_0x02ac
                    r2.setVisibility(r3)
                L_0x02ac:
                    r2 = r19
                L_0x02ae:
                    com.szchoiceway.eventcenter.CarAirStruct r3 = r0.mCarAirStruct
                    int r3 = r3.iAirRightTemp
                    if (r3 == 0) goto L_0x0351
                    if (r3 == r14) goto L_0x0344
                    android.widget.TextView r3 = r0.tvAirRightTempUnit
                    if (r3 == 0) goto L_0x02be
                    r4 = 0
                    r3.setVisibility(r4)
                L_0x02be:
                    com.szchoiceway.eventcenter.CarAirStruct r3 = r0.mCarAirStruct
                    int r3 = r3.iAirRightTemp
                    r4 = 1
                    if (r3 < r4) goto L_0x0341
                    com.szchoiceway.eventcenter.CarAirStruct r3 = r0.mCarAirStruct
                    int r3 = r3.iAirRightTemp
                    r4 = 31
                    if (r3 > r4) goto L_0x0341
                    if (r1 != 0) goto L_0x030b
                    int r1 = com.szchoiceway.eventcenter.Customer.getUIIndex(r22)
                    if (r1 != r10) goto L_0x02f2
                    int r1 = r0.m_iModeSet
                    if (r1 == r9) goto L_0x02f2
                    java.lang.StringBuilder r1 = new java.lang.StringBuilder
                    r1.<init>()
                    com.szchoiceway.eventcenter.CarAirStruct r3 = r0.mCarAirStruct
                    int r3 = r3.iAirRightTemp
                    double r3 = (double) r3
                    double r3 = r3 / r6
                    double r3 = r3 + r20
                    r1.append(r3)
                    r3 = r15
                    r1.append(r3)
                    java.lang.String r18 = r1.toString()
                    goto L_0x034e
                L_0x02f2:
                    r3 = r15
                    java.lang.StringBuilder r1 = new java.lang.StringBuilder
                    r1.<init>()
                    com.szchoiceway.eventcenter.CarAirStruct r4 = r0.mCarAirStruct
                    int r4 = r4.iAirRightTemp
                    double r4 = (double) r4
                    double r4 = r4 / r6
                    double r4 = r4 + r20
                    r1.append(r4)
                    r1.append(r11)
                    java.lang.String r18 = r1.toString()
                    goto L_0x034e
                L_0x030b:
                    r3 = r15
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    int r1 = r1.iAirRightTemp
                    double r4 = (double) r1
                    double r4 = r4 / r6
                    double r4 = r4 + r20
                    double r4 = r4 * r16
                    r14 = 4629700416936869888(0x4040000000000000, double:32.0)
                    double r4 = r4 + r14
                    java.text.DecimalFormat r1 = new java.text.DecimalFormat
                    r1.<init>(r13)
                    int r11 = com.szchoiceway.eventcenter.Customer.getUIIndex(r22)
                    if (r11 != r10) goto L_0x032d
                    int r11 = r0.m_iModeSet
                    if (r11 == r9) goto L_0x032d
                    java.lang.String r18 = r1.format(r4)
                    goto L_0x034e
                L_0x032d:
                    java.lang.StringBuilder r9 = new java.lang.StringBuilder
                    r9.<init>()
                    java.lang.String r1 = r1.format(r4)
                    r9.append(r1)
                    r9.append(r12)
                    java.lang.String r18 = r9.toString()
                    goto L_0x034e
                L_0x0341:
                    r3 = r15
                    r1 = r3
                    goto L_0x035d
                L_0x0344:
                    r3 = r15
                    android.widget.TextView r1 = r0.tvAirRightTempUnit
                    r4 = 8
                    if (r1 == 0) goto L_0x034e
                    r1.setVisibility(r4)
                L_0x034e:
                    r1 = r18
                    goto L_0x035d
                L_0x0351:
                    r3 = r15
                    r4 = 8
                    android.widget.TextView r1 = r0.tvAirRightTempUnit
                    if (r1 == 0) goto L_0x035b
                    r1.setVisibility(r4)
                L_0x035b:
                    r1 = r19
                L_0x035d:
                    android.widget.TextView r4 = r0.tvAirLeftTemp
                    if (r4 == 0) goto L_0x0364
                    r4.setText(r2)
                L_0x0364:
                    android.widget.TextView r4 = r0.tvAirRightTemp
                    if (r4 == 0) goto L_0x036b
                    r4.setText(r1)
                L_0x036b:
                    com.szchoiceway.eventcenter.JavaLazy<com.szchoiceway.eventcenter.lexus.LexusAirViewComponent> r4 = r0.lexusAirViewComponent
                    java.lang.Object r4 = r4.get()
                    com.szchoiceway.eventcenter.lexus.LexusAirViewComponent r4 = (com.szchoiceway.eventcenter.lexus.LexusAirViewComponent) r4
                    r4.setLefAirTemp(r2)
                    com.szchoiceway.eventcenter.JavaLazy<com.szchoiceway.eventcenter.lexus.LexusAirViewComponent> r2 = r0.lexusAirViewComponent
                    java.lang.Object r2 = r2.get()
                    com.szchoiceway.eventcenter.lexus.LexusAirViewComponent r2 = (com.szchoiceway.eventcenter.lexus.LexusAirViewComponent) r2
                    r2.setRightAirTemp(r1)
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    int r1 = r1.iAirFunSpeed
                    com.szchoiceway.eventcenter.CarAirStruct r2 = r0.mCarAirStruct
                    int r2 = r2.iAirFunSpeed
                    r4 = 12
                    if (r2 <= r4) goto L_0x038f
                    r1 = 12
                L_0x038f:
                    if (r1 != 0) goto L_0x03bc
                    com.szchoiceway.eventcenter.CarAirStruct r2 = r0.mCarAirStruct
                    boolean r2 = r2.bAirFunSpeedAuto
                    if (r2 != 0) goto L_0x03bc
                    boolean r2 = r0.flashWind
                    if (r2 == 0) goto L_0x03bc
                    r2 = 0
                    r0.flashWind = r2
                    android.widget.ImageView r2 = r0.imgFlashWindSpeedLeft
                    if (r2 == 0) goto L_0x03ad
                    android.graphics.drawable.Drawable r2 = r2.getBackground()
                    android.graphics.drawable.AnimationDrawable r2 = (android.graphics.drawable.AnimationDrawable) r2
                    if (r2 == 0) goto L_0x03ad
                    r2.stop()
                L_0x03ad:
                    android.widget.ImageView r2 = r0.imgFlashWindSpeedRight
                    if (r2 == 0) goto L_0x03bc
                    android.graphics.drawable.Drawable r2 = r2.getBackground()
                    android.graphics.drawable.AnimationDrawable r2 = (android.graphics.drawable.AnimationDrawable) r2
                    if (r2 == 0) goto L_0x03bc
                    r2.stop()
                L_0x03bc:
                    if (r1 != 0) goto L_0x03c4
                    com.szchoiceway.eventcenter.CarAirStruct r2 = r0.mCarAirStruct
                    boolean r2 = r2.bAirFunSpeedAuto
                    if (r2 == 0) goto L_0x03ea
                L_0x03c4:
                    boolean r2 = r0.flashWind
                    if (r2 != 0) goto L_0x03ea
                    r4 = 1
                    r0.flashWind = r4
                    android.widget.ImageView r2 = r0.imgFlashWindSpeedLeft
                    if (r2 == 0) goto L_0x03da
                    android.graphics.drawable.Drawable r2 = r2.getBackground()
                    android.graphics.drawable.AnimationDrawable r2 = (android.graphics.drawable.AnimationDrawable) r2
                    if (r2 == 0) goto L_0x03da
                    r2.start()
                L_0x03da:
                    android.widget.ImageView r2 = r0.imgFlashWindSpeedRight
                    if (r2 == 0) goto L_0x03eb
                    android.graphics.drawable.Drawable r2 = r2.getBackground()
                    android.graphics.drawable.AnimationDrawable r2 = (android.graphics.drawable.AnimationDrawable) r2
                    if (r2 == 0) goto L_0x03eb
                    r2.start()
                    goto L_0x03eb
                L_0x03ea:
                    r4 = 1
                L_0x03eb:
                    android.widget.ImageView r2 = r0.imgLevelWindSpeedLeft
                    if (r2 == 0) goto L_0x03f2
                    r2.setImageLevel(r1)
                L_0x03f2:
                    android.widget.ImageView r2 = r0.imgLevelWindSpeedRight
                    if (r2 == 0) goto L_0x03f9
                    r2.setImageLevel(r1)
                L_0x03f9:
                    android.widget.TextView r2 = r0.tvAirWindSpeedLeft
                    if (r2 == 0) goto L_0x041e
                    java.lang.StringBuilder r5 = new java.lang.StringBuilder
                    r5.<init>()
                    r5.append(r1)
                    r5.append(r3)
                    java.lang.String r5 = r5.toString()
                    r2.setText(r5)
                    android.widget.TextView r2 = r0.tvAirWindSpeedLeft
                    com.szchoiceway.eventcenter.CarAirStruct r5 = r0.mCarAirStruct
                    boolean r5 = r5.bAirFunSpeedAuto
                    if (r5 == 0) goto L_0x041a
                    r5 = 8
                    goto L_0x041b
                L_0x041a:
                    r5 = 0
                L_0x041b:
                    r2.setVisibility(r5)
                L_0x041e:
                    android.widget.TextView r2 = r0.tvAirWindSpeedRight
                    if (r2 == 0) goto L_0x0443
                    java.lang.StringBuilder r5 = new java.lang.StringBuilder
                    r5.<init>()
                    r5.append(r1)
                    r5.append(r3)
                    java.lang.String r1 = r5.toString()
                    r2.setText(r1)
                    android.widget.TextView r1 = r0.tvAirWindSpeedRight
                    com.szchoiceway.eventcenter.CarAirStruct r2 = r0.mCarAirStruct
                    boolean r2 = r2.bAirFunSpeedAuto
                    if (r2 == 0) goto L_0x043f
                    r2 = 8
                    goto L_0x0440
                L_0x043f:
                    r2 = 0
                L_0x0440:
                    r1.setVisibility(r2)
                L_0x0443:
                    android.widget.CheckBox r1 = r0.cbAirWindSpeedAutoLeft
                    if (r1 == 0) goto L_0x044e
                    com.szchoiceway.eventcenter.CarAirStruct r2 = r0.mCarAirStruct
                    boolean r2 = r2.bAirFunSpeedAuto
                    r1.setChecked(r2)
                L_0x044e:
                    android.widget.CheckBox r1 = r0.cbAirWindSpeedAutoRight
                    if (r1 == 0) goto L_0x0459
                    com.szchoiceway.eventcenter.CarAirStruct r2 = r0.mCarAirStruct
                    boolean r2 = r2.bAirFunSpeedAuto
                    r1.setChecked(r2)
                L_0x0459:
                    android.widget.ImageView r1 = r0.imgLevelTempLeft
                    r2 = 25
                    if (r1 == 0) goto L_0x046c
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    int r1 = r1.iAirLeftTemp
                    if (r1 <= r2) goto L_0x0467
                    r1 = 25
                L_0x0467:
                    android.widget.ImageView r3 = r0.imgLevelTempLeft
                    r3.setImageLevel(r1)
                L_0x046c:
                    android.widget.ImageView r1 = r0.imgLevelTempRight
                    if (r1 == 0) goto L_0x047d
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    int r1 = r1.iAirRightTemp
                    if (r1 <= r2) goto L_0x0477
                    goto L_0x0478
                L_0x0477:
                    r2 = r1
                L_0x0478:
                    android.widget.ImageView r1 = r0.imgLevelTempRight
                    r1.setImageLevel(r2)
                L_0x047d:
                    android.view.ViewGroup r1 = r0.layoutAirWind
                    if (r1 == 0) goto L_0x04af
                    android.view.ViewGroup r2 = r0.layoutAirTemp
                    if (r2 == 0) goto L_0x04af
                    boolean r2 = r0.airWindChange
                    if (r2 == 0) goto L_0x0499
                    boolean r2 = r0.airTempChange
                    if (r2 != 0) goto L_0x0499
                    r2 = 0
                    r1.setVisibility(r2)
                    android.view.ViewGroup r1 = r0.layoutAirTemp
                    r2 = 8
                    r1.setVisibility(r2)
                    goto L_0x049b
                L_0x0499:
                    r2 = 8
                L_0x049b:
                    boolean r1 = r0.airWindChange
                    if (r1 != 0) goto L_0x04af
                    boolean r1 = r0.airTempChange
                    if (r1 == 0) goto L_0x04af
                    android.view.ViewGroup r1 = r0.layoutAirWind
                    r1.setVisibility(r2)
                    android.view.ViewGroup r1 = r0.layoutAirTemp
                    r2 = 0
                    r1.setVisibility(r2)
                    goto L_0x04b0
                L_0x04af:
                    r2 = 0
                L_0x04b0:
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunAtuo
                    r3 = 2
                    r5 = 3
                    r8 = 7
                    if (r1 == 0) goto L_0x04bc
                L_0x04b9:
                    r4 = 0
                    goto L_0x053f
                L_0x04bc:
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunUp
                    if (r1 == 0) goto L_0x04d0
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunParalle
                    if (r1 == 0) goto L_0x04d0
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunDown
                    if (r1 == 0) goto L_0x04d0
                    r1 = 7
                    goto L_0x0513
                L_0x04d0:
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunParalle
                    if (r1 == 0) goto L_0x04de
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunDown
                    if (r1 == 0) goto L_0x04de
                    r1 = 6
                    goto L_0x0513
                L_0x04de:
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunUp
                    if (r1 == 0) goto L_0x04ec
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunDown
                    if (r1 == 0) goto L_0x04ec
                    r1 = 5
                    goto L_0x0513
                L_0x04ec:
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunUp
                    if (r1 == 0) goto L_0x04fa
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunParalle
                    if (r1 == 0) goto L_0x04fa
                    r1 = 4
                    goto L_0x0513
                L_0x04fa:
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunDown
                    if (r1 == 0) goto L_0x0502
                    r1 = 3
                    goto L_0x0513
                L_0x0502:
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunParalle
                    if (r1 == 0) goto L_0x050a
                    r1 = 2
                    goto L_0x0513
                L_0x050a:
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    boolean r1 = r1.bAirRightFunUp
                    if (r1 == 0) goto L_0x0512
                    r1 = 1
                    goto L_0x0513
                L_0x0512:
                    r1 = 0
                L_0x0513:
                    com.szchoiceway.eventcenter.CarAirStruct r8 = r0.mCarAirStruct
                    boolean r8 = r8.bAirRightFunUp
                    if (r8 == 0) goto L_0x0522
                    com.szchoiceway.eventcenter.CarAirStruct r8 = r0.mCarAirStruct
                    boolean r8 = r8.bAirRightFunDown
                    if (r8 == 0) goto L_0x0522
                    r8 = r1
                    r4 = 4
                    goto L_0x053f
                L_0x0522:
                    com.szchoiceway.eventcenter.CarAirStruct r8 = r0.mCarAirStruct
                    boolean r8 = r8.bAirRightFunUp
                    if (r8 == 0) goto L_0x052a
                    r8 = r1
                    goto L_0x053f
                L_0x052a:
                    com.szchoiceway.eventcenter.CarAirStruct r4 = r0.mCarAirStruct
                    boolean r4 = r4.bAirRightFunDown
                    if (r4 == 0) goto L_0x0533
                    r8 = r1
                    r4 = 2
                    goto L_0x053f
                L_0x0533:
                    com.szchoiceway.eventcenter.CarAirStruct r3 = r0.mCarAirStruct
                    boolean r3 = r3.bAirRightFunParalle
                    if (r3 == 0) goto L_0x053c
                    r8 = r1
                    r4 = 3
                    goto L_0x053f
                L_0x053c:
                    r8 = r1
                    goto L_0x04b9
                L_0x053f:
                    android.widget.ImageView r1 = r0.imgLevelWindDirection
                    if (r1 == 0) goto L_0x0567
                    com.szchoiceway.eventcenter.CarAirStruct r1 = r0.mCarAirStruct
                    int r1 = r1.iAirRightTemp
                    double r1 = (double) r1
                    double r1 = r1 / r6
                    double r1 = r1 + r20
                    r5 = 4627448617123184640(0x4038000000000000, double:24.0)
                    int r3 = (r1 > r5 ? 1 : (r1 == r5 ? 0 : -1))
                    if (r3 >= 0) goto L_0x055a
                    android.widget.ImageView r1 = r0.imgLevelWindDirection
                    r2 = 2131166074(0x7f07037a, float:1.7946383E38)
                    r1.setImageResource(r2)
                    goto L_0x0562
                L_0x055a:
                    android.widget.ImageView r1 = r0.imgLevelWindDirection
                    r2 = 2131166075(0x7f07037b, float:1.7946385E38)
                    r1.setImageResource(r2)
                L_0x0562:
                    android.widget.ImageView r1 = r0.imgLevelWindDirection
                    r1.setImageLevel(r8)
                L_0x0567:
                    com.szchoiceway.eventcenter.JavaLazy<com.szchoiceway.eventcenter.lexus.LexusAirViewComponent> r1 = r0.lexusAirViewComponent
                    java.lang.Object r1 = r1.get()
                    com.szchoiceway.eventcenter.lexus.LexusAirViewComponent r1 = (com.szchoiceway.eventcenter.lexus.LexusAirViewComponent) r1
                    r1.setWinMode(r4)
                    return
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.OnRefreshCanAirInfo():void");
            }

            public void createLRCBottomView() {
                if (wm == null) {
                    wm = (WindowManager) getSystemService("window");
                }
                this.mLRCBottomView = new LandRoverCopilotBottomView(this);
                wmBottomWndParams.type = 2002;
                wmBottomWndParams.format = 1;
                wmBottomWndParams.flags = 296;
                wmBottomWndParams.gravity = 8388691;
                wmBottomWndParams.width = (int) getResources().getDimension(R.dimen.backcar_width);
                wmBottomWndParams.height = (int) getResources().getDimension(R.dimen.landrover_bottom_height);
                wmBottomWndParams.windowAnimations = R.style.PopupAnimation2;
            }

            public void showLRBottomView(boolean z) {
                WindowManager.LayoutParams layoutParams;
                WindowManager windowManager = wm;
                if (windowManager != null && (layoutParams = wmBottomWndParams) != null) {
                    LandRoverCopilotBottomView landRoverCopilotBottomView = this.mLRCBottomView;
                    if (landRoverCopilotBottomView != null) {
                        if (z && !this.mShowLRBottomView) {
                            windowManager.addView(landRoverCopilotBottomView, layoutParams);
                        }
                        if (!z && this.mShowLRBottomView) {
                            wm.removeView(this.mLRCBottomView);
                        }
                    }
                    LandRoverBottomView landRoverBottomView = this.mLRBottomView;
                    if (landRoverBottomView != null) {
                        if (z && !this.mShowLRBottomView) {
                            wm.addView(landRoverBottomView, wmBottomWndParams);
                        }
                        if (!z && this.mShowLRBottomView) {
                            wm.removeView(this.mLRBottomView);
                        }
                    }
                    this.mShowLRBottomView = z;
                }
            }

            public void createLRBottomView() {
                if (wm == null) {
                    wm = (WindowManager) getSystemService("window");
                }
                this.mLRBottomView = new LandRoverBottomView(this);
                wmBottomWndParams.type = 2002;
                wmBottomWndParams.format = 1;
                wmBottomWndParams.flags = 296;
                wmBottomWndParams.gravity = 8388691;
                wmBottomWndParams.width = (int) getResources().getDimension(R.dimen.backcar_width);
                wmBottomWndParams.height = (int) getResources().getDimension(R.dimen.landrover_bottom_height);
                wmBottomWndParams.windowAnimations = R.style.PopupAnimation2;
            }

            private void createLRCVolumeView() {
                if (wm == null) {
                    wm = (WindowManager) getSystemService("window");
                }
                View inflate = LayoutInflater.from(this).inflate(R.layout.layout_landrover_copilot_volume, (ViewGroup) null);
                this.mLRVolumeView = inflate;
                this.tvCurrentVolume = (TextView) inflate.findViewById(R.id.textCurrentVolume);
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_LANDROVER_THEME_BACKGROUND_INDEX, 0);
                TextView textView = this.tvCurrentVolume;
                if (textView != null) {
                    textView.setTextColor(recordInteger == 0 ? -1 : ViewCompat.MEASURED_STATE_MASK);
                    TextView textView2 = this.tvCurrentVolume;
                    textView2.setText(getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, 30) + BuildConfig.FLAVOR);
                }
                wmLRVolumeParams.type = 2002;
                wmLRVolumeParams.format = 1;
                wmLRVolumeParams.flags = 296;
                wmLRVolumeParams.gravity = 8388659;
                wmLRVolumeParams.width = (int) getResources().getDimension(R.dimen.backcar_width);
                wmLRVolumeParams.height = -2;
                wmLRVolumeParams.y = (int) getResources().getDimension(R.dimen.landrover_volume_y);
                wmLRVolumeParams.windowAnimations = R.style.PopupAnimation2;
            }

            /* access modifiers changed from: private */
            public void showLandRoverCopilotVolumeView(boolean z) {
                View view2;
                WindowManager.LayoutParams layoutParams;
                WindowManager windowManager = wm;
                if (windowManager != null && (view2 = this.mLRVolumeView) != null && (layoutParams = wmLRVolumeParams) != null) {
                    if (z && !this.mShowLandRoverVolume) {
                        windowManager.addView(view2, layoutParams);
                    }
                    if (!z && this.mShowLandRoverVolume) {
                        wm.removeView(this.mLRVolumeView);
                    }
                    this.mShowLandRoverVolume = z;
                }
            }

            private void createMouseWnd() {
                if (wm == null) {
                    wm = (WindowManager) getSystemService("window");
                }
                ImageView imageView = new ImageView(getBaseContext());
                this.mMouseWndView = imageView;
                imageView.setImageResource(R.drawable.shubiao);
                if (wmMouseWndParams == null) {
                    wmMouseWndParams = new WindowManager.LayoutParams();
                }
                wmMouseWndParams.height = -2;
                wmMouseWndParams.width = -2;
                wmMouseWndParams.flags = 408;
                wmMouseWndParams.format = -3;
                wmMouseWndParams.type = 2010;
                wmMouseWndParams.x = this.iMouseMoveX;
                wmMouseWndParams.y = this.iMouseMoveY;
                wmMouseWndParams.gravity = 51;
            }

            public void removeMouseWnd() {
                Context context;
                synchronized (mObject) {
                    if (mIsAddMouseView) {
                        if (!(this.mMouseWndView == null || (context = mAppContext) == null)) {
                            if (wm == null) {
                                wm = (WindowManager) context.getSystemService("window");
                            }
                            WindowManager windowManager = wm;
                            if (windowManager != null) {
                                windowManager.removeView(this.mMouseWndView);
                            }
                        }
                        mIsAddMouseView = false;
                    }
                }
            }

            public void addMouseWnd() {
                ImageView imageView;
                synchronized (mObject) {
                    if (!mIsAddMouseView) {
                        WindowManager windowManager = wm;
                        if (!(windowManager == null || (imageView = this.mMouseWndView) == null)) {
                            windowManager.addView(imageView, wmMouseWndParams);
                        }
                        mIsAddMouseView = true;
                    }
                }
            }

            public void showMouseWnd(boolean z) {
                this.mEventHandler.removeMessages(WHAT_HIDE_MOUSE_WND);
                addMouseWnd();
            }

            public void showMouseWnd() {
                showMouseWnd(true);
            }

            public void OnRefreshMouseWnd(int i) {
                int i2;
                int i3;
                int i4;
                int i5;
                if (this.iMouseMoveDirection != -1) {
                    Log.i(TAG, "OnRefreshMouseWnd: iMouseMoveY = " + this.iMouseMoveY);
                    if (i == 1) {
                        if (this.iMouseMoveY == this.screenHeight && ((i3 = this.iMouseMoveDirection) == 1 || i3 == 2)) {
                            new Thread() {
                                public void run() {
                                    super.run();
                                    EventService.this.inst.sendPointerSync(MotionEvent.obtain(SystemClock.uptimeMillis(), SystemClock.uptimeMillis(), 0, (float) EventService.this.iMouseMoveX, (float) EventService.this.iMouseMoveY, 0));
                                    EventService.this.inst.sendPointerSync(MotionEvent.obtain(SystemClock.uptimeMillis(), SystemClock.uptimeMillis(), 2, (float) EventService.this.iMouseMoveX, 0.0f, 0));
                                }
                            }.start();
                        }
                        int i6 = this.iMouseMoveDirection;
                        if (i6 == 3 || i6 == 4) {
                            this.iMouseMoveX -= 20;
                        } else if (i6 == 1 || i6 == 2) {
                            this.iMouseMoveY -= 20;
                        }
                        if (this.iMouseMoveX < 0) {
                            this.iMouseMoveX = 0;
                        }
                        if (this.iMouseMoveY < 0) {
                            this.iMouseMoveY = 0;
                        }
                        if (this.iMouseMoveY < this.screenHeight / 2 && !bLauncherIsResume() && ((i2 = this.iMouseMoveDirection) == 1 || i2 == 2)) {
                            new Thread() {
                                public void run() {
                                    super.run();
                                    EventService.this.inst.sendPointerSync(MotionEvent.obtain(SystemClock.uptimeMillis(), SystemClock.uptimeMillis(), 0, (float) EventService.this.iMouseMoveX, (float) (EventService.this.screenHeight / 2), 0));
                                    EventService.this.inst.sendPointerSync(MotionEvent.obtain(SystemClock.uptimeMillis(), SystemClock.uptimeMillis(), 2, (float) EventService.this.iMouseMoveX, (float) ((EventService.this.screenHeight / 2) + (EventService.this.screenHeight / 5)), 0));
                                }
                            }.start();
                        }
                        this.mEventHandler.sendEmptyMessage(WHAT_SHOW_MOUSE_EVT);
                    } else if (i == 2) {
                        if (this.iMouseMoveY == 0 && ((i5 = this.iMouseMoveDirection) == 1 || i5 == 2)) {
                            new Thread() {
                                public void run() {
                                    super.run();
                                    EventService.this.inst.sendPointerSync(MotionEvent.obtain(SystemClock.uptimeMillis(), SystemClock.uptimeMillis(), 0, (float) EventService.this.iMouseMoveX, (float) EventService.this.iMouseMoveY, 0));
                                    EventService.this.inst.sendPointerSync(MotionEvent.obtain(SystemClock.uptimeMillis(), SystemClock.uptimeMillis(), 2, (float) EventService.this.iMouseMoveX, (float) EventService.this.screenHeight, 0));
                                }
                            }.start();
                        }
                        int i7 = this.iMouseMoveDirection;
                        if (i7 == 3 || i7 == 4) {
                            this.iMouseMoveX += 20;
                        } else if (i7 == 1 || i7 == 2) {
                            this.iMouseMoveY += 20;
                        }
                        int i8 = this.iMouseMoveX;
                        int i9 = this.screenWidth;
                        if (i8 > i9) {
                            this.iMouseMoveX = i9;
                        }
                        int i10 = this.iMouseMoveY;
                        int i11 = this.screenHeight;
                        if (i10 > i11) {
                            this.iMouseMoveY = i11;
                        }
                        if (this.iMouseMoveY > i11 / 2 && !bLauncherIsResume() && ((i4 = this.iMouseMoveDirection) == 1 || i4 == 2)) {
                            new Thread() {
                                public void run() {
                                    super.run();
                                    EventService.this.inst.sendPointerSync(MotionEvent.obtain(SystemClock.uptimeMillis(), SystemClock.uptimeMillis(), 0, (float) EventService.this.iMouseMoveX, (float) (EventService.this.screenHeight / 2), 0));
                                    EventService.this.inst.sendPointerSync(MotionEvent.obtain(SystemClock.uptimeMillis(), SystemClock.uptimeMillis(), 2, (float) EventService.this.iMouseMoveX, (float) ((EventService.this.screenHeight / 2) - (EventService.this.screenHeight / 5)), 0));
                                }
                            }.start();
                        }
                        this.mEventHandler.sendEmptyMessage(WHAT_SHOW_MOUSE_EVT);
                    } else if (i == 3) {
                        this.iMouseMoveDirection = 1;
                    } else if (i == 4) {
                        this.iMouseMoveDirection = 4;
                    } else if (i == 5 && mIsAddMouseView) {
                        this.mEventHandler.removeMessages(WHAT_HIDE_MOUSE_WND);
                        this.mEventHandler.sendEmptyMessageDelayed(WHAT_HIDE_MOUSE_WND, 0);
                        this.iMouseMoveX = wmMouseWndParams.x;
                        this.iMouseMoveY = wmMouseWndParams.y;
                        new Thread() {
                            public void run() {
                                super.run();
                                Log.i(EventService.TAG, "run: iMouseMoveX = " + EventService.this.iMouseMoveX + ",iMouseMoveY = " + EventService.this.iMouseMoveY);
                                EventService.this.inst.sendPointerSync(MotionEvent.obtain(SystemClock.uptimeMillis(), SystemClock.uptimeMillis(), 0, (float) EventService.this.iMouseMoveX, (float) EventService.this.iMouseMoveY, 0));
                                SystemClock.sleep(100);
                                EventService.this.inst.sendPointerSync(MotionEvent.obtain(SystemClock.uptimeMillis(), SystemClock.uptimeMillis(), 1, (float) EventService.this.iMouseMoveX, (float) EventService.this.iMouseMoveY, 0));
                            }
                        }.start();
                        this.mEventHandler.removeMessages(WHAT_SHOW_MOUSE_EVT);
                        this.mEventHandler.sendEmptyMessageDelayed(WHAT_SHOW_MOUSE_EVT, 100);
                    }
                }
            }

            /* access modifiers changed from: private */
            public void updateMouseViewLayout() {
                wmMouseWndParams.x = this.iMouseMoveX;
                wmMouseWndParams.y = this.iMouseMoveY;
                wm.updateViewLayout(this.mMouseWndView, wmMouseWndParams);
            }

            public void refreshCarAutoStatus(boolean z) {
                refreshCarAutoStatus(!this.mIsCarPlay, z);
            }

            public void refreshCarAutoStatus(boolean z, boolean z2) {
                CheckBox checkBox = this.mCkbCarAutoStatus;
                if (checkBox != null) {
                    int i = this.mImitateOriginalCarUiIndex;
                    checkBox.setBackgroundResource(i == 1 ? z ? R.drawable.imitate_1024x480_auto_auto_select : R.drawable.imitate_1024x480_auto_carplay_select : i == 2 ? z ? R.drawable.imitate_800x480_auto_auto_select : R.drawable.imitate_800x480_auto_carplay_select : i == 3 ? z ? R.drawable.imitate_1280x720_auto_auto_select : R.drawable.imitate_1280x720_auto_carplay_select : z ? R.drawable.imitate_1280x480_auto_auto_select : R.drawable.imitate_1280x480_auto_carplay_select);
                    this.mCkbCarAutoStatus.setChecked(z2);
                }
            }

            public void setLayout4g(boolean z) {
                View view2 = this.mLayout4g;
                if (view2 != null) {
                    view2.setVisibility(z ? 0 : 8);
                }
            }

            public void zxwOriginalMcuKeyLeft() {
                int i = this.m_iCurrFocus - 1;
                this.m_iCurrFocus = i;
                if (i < 0) {
                    this.m_iCurrFocus = 0;
                }
            }

            public void zxwOriginalMcuKeyRight() {
                int i = this.m_iCurrFocus + 1;
                this.m_iCurrFocus = i;
                View[] viewArr = this.imageViewFocusList;
                if (viewArr != null && viewArr.length > 0 && i >= viewArr.length) {
                    this.m_iCurrFocus = viewArr.length - 1;
                    Log.i(TAG, "zxwOriginalMcuKeyRight: mShowFuncInThirdView = " + this.mShowFuncInThirdView);
                    if (!this.mShowFuncInThirdView) {
                        processAutoKey(22);
                    }
                }
            }

            public void refreshFocusView() {
                View[] viewArr = this.imageViewFocusList;
                if (viewArr != null && viewArr.length > 0) {
                    int i = 0;
                    while (true) {
                        View[] viewArr2 = this.imageViewFocusList;
                        if (i < viewArr2.length) {
                            if (viewArr2[i] != null) {
                                if (!this.bInLeftFocus || i != this.m_iCurrFocus) {
                                    viewArr2[i].setVisibility(8);
                                } else {
                                    viewArr2[i].setVisibility(0);
                                }
                            }
                            i++;
                        } else {
                            return;
                        }
                    }
                }
            }

            public void zxwOriginalMcuKeyEnter() {
                int i = this.m_iCurrFocus;
                if (i != 0) {
                    if (i == 1) {
                        boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_WIFI_PASSWORD_SWITCH, false);
                        Log.i(TAG, "bWifiPasswordSwitch: " + recordBoolean);
                        if (recordBoolean) {
                            EventUtils.startActivityIfNotRuning(this, EventUtils.SET_MODE_PACKAGE_NAME, "com.szchoiceway.settings.wifi.WifiMainActivity");
                            return;
                        }
                        Intent intent = new Intent("android.settings.WIFI_SETTINGS");
                        intent.setFlags(270532608);
                        startActivity(intent);
                    } else if (i == 2) {
                        sendKeyDownUpSync(3);
                    } else if (i == 3) {
                        sendKeyDownUpSync(4);
                    }
                } else if (!this.mCurTopClassName.equals("com.szchoiceway.auxplayer.MainActivity_HDMI")) {
                    EventUtils.startVoice(this);
                }
            }

            public void ksw_enter_dvr() {
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_RECORD_DVR, 0);
                Log.d(TAG, "dvr index = " + recordInteger);
                if (recordInteger == 1) {
                    EventUtils.startActivityIfNotRuning(getApplicationContext(), "com.szchoiceway.ksw_dvr", "com.szchoiceway.ksw_dvr.MainActivity");
                } else if (recordInteger == 2) {
                    String recordValue = this.mSysProviderOpt.getRecordValue(SysProviderOpt.KSW_DVR_APK_PACKAGENAME, BuildConfig.FLAVOR);
                    if (BuildConfig.FLAVOR.equals(recordValue) || "com.anwensoft.cardvr".equals(recordValue)) {
                        EventUtils.startActivityIfNotRuning(getApplicationContext(), "com.anwensoft.cardvr", "com.anwensoft.cardvr.ui.GuideActivity");
                    } else if (BuildConfig.FLAVOR.equals(recordValue) || "com.ankai.cardvr".equals(recordValue)) {
                        EventUtils.startActivityIfNotRuning(getApplicationContext(), "com.ankai.cardvr", "com.ankai.cardvr.ui.GuideActivity");
                    } else {
                        startActivity(getPackageManager().getLaunchIntentForPackage(recordValue));
                    }
                } else {
                    try {
                        Toast.makeText(this, getString(R.string.lb_no_device), 1).show();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

            private void ksw_close_dvr() {
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_RECORD_DVR, 0);
                if (recordInteger == 1) {
                    sendBroadcastCanKeyExtra(EventUtils.ZXW_CAN_KEY_EVT, 85);
                } else if (recordInteger == 2) {
                    EventUtils.killProcess(this.mSysProviderOpt.getRecordValue(SysProviderOpt.KSW_DVR_APK_PACKAGENAME, BuildConfig.FLAVOR));
                }
            }

            private void createGestureWnd() {
                if (wm == null) {
                    wm = (WindowManager) getSystemService("window");
                }
                View inflate = LayoutInflater.from(getBaseContext()).inflate(R.layout.gesture_layout, (ViewGroup) null);
                mGestureWndView = inflate;
                this.tvVolType = (TextView) inflate.findViewById(R.id.tvVolType);
                this.mProgressBar = (ProgressBar) mGestureWndView.findViewById(R.id.mProgressBar);
                this.mProgressBar2 = (ProgressBar) mGestureWndView.findViewById(R.id.mProgressBar2);
                if (wmGestureWndParams == null) {
                    wmGestureWndParams = new WindowManager.LayoutParams();
                }
                wmGestureWndParams.height = -2;
                wmGestureWndParams.width = -2;
                wmGestureWndParams.flags = 408;
                wmGestureWndParams.format = -3;
                wmGestureWndParams.type = 2010;
            }

            public static void removeGestureWnd() {
                synchronized (mObject) {
                    if (mIsAddGestureView) {
                        if (mGestureWndView != null) {
                            if (wm == null) {
                                wm = (WindowManager) mAppContext.getSystemService("window");
                            }
                            WindowManager windowManager = wm;
                            if (windowManager != null) {
                                windowManager.removeView(mGestureWndView);
                            }
                        }
                        mIsAddGestureView = false;
                    }
                }
            }

            public static void addGestureWnd() {
                synchronized (mObject) {
                    if (!mIsAddGestureView) {
                        if (!(wm == null || mGestureWndView == null)) {
                            Log.i(TAG, "addGestureWnd: ");
                            wm.addView(mGestureWndView, wmGestureWndParams);
                        }
                        mIsAddGestureView = true;
                    }
                }
            }

            public void showGestureWnd(boolean z) {
                this.mEventHandler.removeMessages(WHAT_HIDE_GESTURE_WND);
                addGestureWnd();
            }

            public void showGestureWnd() {
                showGestureWnd(true);
            }

            private void createRadarWnd() {
                if (wm == null) {
                    wm = (WindowManager) getSystemService("window");
                }
                mRadarWndView = new RadarWndFrame(mAppContext, R.layout.carradar_layout);
                if (wmRadarWndParams == null) {
                    wmRadarWndParams = new WindowManager.LayoutParams();
                }
                wmRadarWndParams.type = 2010;
                wmRadarWndParams.flags = 264;
                wmRadarWndParams.gravity = 51;
                wmRadarWndParams.x = 0;
                wmRadarWndParams.y = 0;
                wmRadarWndParams.width = -1;
                wmRadarWndParams.height = -1;
                wmRadarWndParams.format = 1;
                RelativeLayout relativeLayout = (RelativeLayout) mRadarWndView.findViewById(R.id.CanRadarBK);
                if (relativeLayout != null) {
                    relativeLayout.setOnTouchListener(new View.OnTouchListener() {
                        public boolean onTouch(View view, MotionEvent motionEvent) {
                            EventService.this.sendBenchiCarKey(83, (byte) 1);
                            SystemClock.sleep(30);
                            EventService.this.sendBenchiCarKey(83, (byte) 0);
                            return true;
                        }
                    });
                }
            }

            /* access modifiers changed from: package-private */
            public void sendBenchiCarKey(int i, byte b) {
                Log.d(TAG, "sendBenchiCarKey: ");
                byte[] bArr = new byte[6];
                bArr[0] = 46;
                bArr[1] = -108;
                bArr[2] = 2;
                bArr[3] = (byte) (i & 255);
                bArr[4] = b;
                bArr[5] = (byte) ((((bArr[1] + bArr[2]) + bArr[3]) + bArr[4]) ^ 255);
                sendCanbusData(bArr);
            }

            public static void removeRadarWnd() {
                synchronized (mObject) {
                    if (mIsAddRadarView) {
                        if (mRadarWndView != null) {
                            if (wm == null) {
                                wm = (WindowManager) mAppContext.getSystemService("window");
                            }
                            if (wm != null) {
                                Log.i(TAG, "removeRadarWnd: mRadarWndView");
                            }
                            wm.removeView(mRadarWndView);
                        }
                        mIsAddRadarView = false;
                    }
                }
            }

            public static void addRadarWnd() {
                synchronized (mObject) {
                    if (!mIsAddRadarView) {
                        if (!(wm == null || mRadarWndView == null)) {
                            Log.i(TAG, "addRadarWnd: mRadarWndView");
                            wm.addView(mRadarWndView, wmRadarWndParams);
                        }
                        mIsAddRadarView = true;
                    }
                }
            }

            public void showRadarWnd(boolean z) {
                this.mEventHandler.removeMessages(WHAT_HIDE_FLOATING_BUTTON_WND);
                addRadarWnd();
            }

            public void showRadarWnd() {
                showRadarWnd(true);
            }

            private void createFloatingWnd() {
                if (wm == null) {
                    wm = (WindowManager) getSystemService("window");
                }
                mFloatingButtonWndView = LayoutInflater.from(this).inflate(R.layout.floatingbutton_layout, (ViewGroup) null);
                mFloatingMenuWndView = LayoutInflater.from(this).inflate(R.layout.floatingmenu_layout, (ViewGroup) null);
                if (wmFloatingButtonWndParams == null) {
                    wmFloatingButtonWndParams = new WindowManager.LayoutParams();
                }
                wmFloatingButtonWndParams.type = 2003;
                wmFloatingButtonWndParams.flags = 264;
                wmFloatingButtonWndParams.gravity = 51;
                wmFloatingButtonWndParams.x = 100;
                wmFloatingButtonWndParams.y = 500;
                wmFloatingButtonWndParams.width = -2;
                wmFloatingButtonWndParams.height = -2;
                wmFloatingButtonWndParams.format = 1;
                initFloatingView();
            }

            private void initFloatingView() {
                View view2 = mFloatingButtonWndView;
                if (view2 != null) {
                    Button button = (Button) view2.findViewById(R.id.floatButton);
                    this.floatButton = button;
                    if (button != null) {
                        button.setOnTouchListener(new View.OnTouchListener() {
                            public boolean onTouch(View view, MotionEvent motionEvent) {
                                float unused = EventService.this.x = motionEvent.getRawX();
                                float unused2 = EventService.this.y = motionEvent.getRawY();
                                int action = motionEvent.getAction();
                                if (action == 0) {
                                    boolean unused3 = EventService.ismoving = false;
                                    float unused4 = EventService.this.mTouchStartX = (float) ((int) motionEvent.getX());
                                    float unused5 = EventService.this.mTouchStartY = (float) ((int) motionEvent.getY());
                                } else if (action == 1) {
                                    EventService eventService = EventService.this;
                                    float unused6 = eventService.mTouchStartX = eventService.mTouchStartY = 0.0f;
                                } else if (action == 2) {
                                    boolean unused7 = EventService.ismoving = true;
                                    EventService.this.updateViewPosition();
                                }
                                return EventService.ismoving;
                            }
                        });
                        this.floatButton.setOnClickListener(this);
                    }
                }
                View view3 = mFloatingMenuWndView;
                if (view3 != null) {
                    RelativeLayout relativeLayout = (RelativeLayout) view3.findViewById(R.id.rlFloatingMenu);
                    RelativeLayout relativeLayout2 = (RelativeLayout) mFloatingMenuWndView.findViewById(R.id.rlFloatingMain);
                    ImageButton imageButton = (ImageButton) mFloatingMenuWndView.findViewById(R.id.btnFloatHome);
                    ImageButton imageButton2 = (ImageButton) mFloatingMenuWndView.findViewById(R.id.btnFloatReturn);
                    ImageButton imageButton3 = (ImageButton) mFloatingMenuWndView.findViewById(R.id.btnFloatHalfScreen);
                    ImageButton imageButton4 = (ImageButton) mFloatingMenuWndView.findViewById(R.id.btnFloatFullScreen);
                    if (relativeLayout != null) {
                        relativeLayout.setOnTouchListener(new View.OnTouchListener() {
                            public boolean onTouch(View view, MotionEvent motionEvent) {
                                if (EventService.mIsAddFloatingMenuView) {
                                    EventService.wm.removeView(EventService.mFloatingMenuWndView);
                                    boolean unused = EventService.mIsAddFloatingMenuView = false;
                                }
                                return false;
                            }
                        });
                    }
                    if (imageButton != null) {
                        imageButton.setOnClickListener(this);
                    }
                    if (imageButton2 != null) {
                        imageButton2.setOnClickListener(this);
                    }
                    if (imageButton3 != null) {
                        imageButton3.setOnClickListener(this);
                    }
                    if (imageButton4 != null) {
                        imageButton4.setOnClickListener(this);
                    }
                }
            }

            public static void removeFloatingButtonWnd() {
                synchronized (mObject) {
                    if (mIsAddFloatingButtonView) {
                        if (mFloatingButtonWndView != null) {
                            if (wm == null) {
                                wm = (WindowManager) mAppContext.getSystemService("window");
                            }
                            if (wm != null) {
                                Log.i(TAG, "removeFloatingButtonWnd: mFloatingButtonWndView");
                            }
                            wm.removeView(mFloatingButtonWndView);
                        }
                        mIsAddFloatingButtonView = false;
                    }
                }
            }

            public static void addFloatingButtonWnd() {
                synchronized (mObject) {
                    if (!mIsAddFloatingButtonView) {
                        if (!(wm == null || mFloatingButtonWndView == null)) {
                            Log.i(TAG, "addFloatingButtonWnd: mFloatingButtonWndView");
                            wm.addView(mFloatingButtonWndView, wmFloatingButtonWndParams);
                        }
                        mIsAddFloatingButtonView = true;
                    }
                }
            }

            public void showFloatingButtonWnd(boolean z) {
                this.mEventHandler.removeMessages(WHAT_HIDE_FLOATING_BUTTON_WND);
                addFloatingButtonWnd();
            }

            public void showFloatingButtonWnd() {
                showFloatingButtonWnd(true);
            }

            /* access modifiers changed from: private */
            public void updateViewPosition() {
                wmFloatingButtonWndParams.x = (int) (this.x - this.mTouchStartX);
                wmFloatingButtonWndParams.y = (int) (this.y - this.mTouchStartY);
                wm.updateViewLayout(mFloatingButtonWndView, wmFloatingButtonWndParams);
            }

            public void createSplitScreenWnd() {
                if (wm == null) {
                    wm = (WindowManager) getSystemService("window");
                }
                if (mScreen1920x720) {
                    mSplitScreenWndView = LayoutInflater.from(getBaseContext()).inflate(R.layout.splitscreen_layout, (ViewGroup) null);
                }
                if (this.m_iUITypeVer == 41 && this.m_iModeSet == 11) {
                    mSplitScreenWndView = LayoutInflater.from(getBaseContext()).inflate(R.layout.kesaiwei_1280x480_jlr_splitscreen_layout, (ViewGroup) null);
                }
                if (wmSplitScreenWndParams == null) {
                    wmSplitScreenWndParams = new WindowManager.LayoutParams();
                }
                wmSplitScreenWndParams.flags = 392;
                wmSplitScreenWndParams.format = -3;
                wmSplitScreenWndParams.type = 2002;
                if (mScreen1920x720) {
                    wmSplitScreenWndParams.windowAnimations = R.style.PopupAnimation;
                    wmSplitScreenWndParams.width = 622;
                    wmSplitScreenWndParams.height = 720;
                    wmSplitScreenWndParams.x = 1299;
                    wmSplitScreenWndParams.y = 0;
                }
                if (this.m_iUITypeVer == 41 && this.m_iModeSet == 11) {
                    wmSplitScreenWndParams.gravity = 51;
                    wmSplitScreenWndParams.windowAnimations = R.style.PopupAnimation2;
                    wmSplitScreenWndParams.width = 374;
                    wmSplitScreenWndParams.height = 400;
                    wmSplitScreenWndParams.x = 906;
                    wmSplitScreenWndParams.y = 0;
                }
                initSplitScreenView();
            }

            private void initSplitScreenView() {
                View view2;
                View view3;
                View view4;
                View view5;
                View view6 = mSplitScreenWndView;
                if (view6 != null) {
                    this.mVerticalViewPager = (VerticalViewPager) view6.findViewById(R.id.mVerticalViewPager);
                    if (mScreen1920x720) {
                        view5 = LayoutInflater.from(mAppContext).inflate(R.layout.splitscreen_item_viewpager_what1, (ViewGroup) null);
                        view4 = LayoutInflater.from(mAppContext).inflate(R.layout.splitscreen_item_viewpager_what2, (ViewGroup) null);
                        view3 = LayoutInflater.from(mAppContext).inflate(R.layout.splitscreen_item_viewpager_what3, (ViewGroup) null);
                        view2 = LayoutInflater.from(mAppContext).inflate(R.layout.splitscreen_item_viewpager_what4, (ViewGroup) null);
                    } else {
                        view5 = null;
                        view4 = null;
                        view3 = null;
                        view2 = null;
                    }
                    if (this.m_iUITypeVer == 41 && this.m_iModeSet == 11) {
                        view4 = LayoutInflater.from(mAppContext).inflate(R.layout.kesaiwei_1280x480_jlr_splitscreen_item_viewpager_what2, (ViewGroup) null);
                        view3 = LayoutInflater.from(mAppContext).inflate(R.layout.kesaiwei_1280x480_jlr_splitscreen_item_viewpager_what3, (ViewGroup) null);
                        view2 = LayoutInflater.from(mAppContext).inflate(R.layout.kesaiwei_1280x480_jlr_splitscreen_item_viewpager_what4, (ViewGroup) null);
                    }
                    this.rlSplitScreenPagerView = (RelativeLayout) mSplitScreenWndView.findViewById(R.id.rlSplitScreenPagerView);
                    this.rlSplitScreenMusicView = (RelativeLayout) mSplitScreenWndView.findViewById(R.id.rlSplitScreenMusicView);
                    this.imageRightBkIdLst = new int[]{R.drawable.music_normal_1920x720_you_bk0, R.drawable.music_normal_1920x720_you_bk1, R.drawable.music_normal_1920x720_you_bk2, R.drawable.music_normal_1920x720_you_bk3, R.drawable.music_normal_1920x720_you_bk4, R.drawable.music_normal_1920x720_you_bk5};
                    this.imageConverIdLst = new int[]{R.drawable.media_normal_1920x720_xianshi1, R.drawable.media_normal_1920x720_xianshi2, R.drawable.media_normal_1920x720_xianshi3, R.drawable.media_normal_1920x720_xianshi4, R.drawable.media_normal_1920x720_xianshi5, R.drawable.media_normal_1920x720_xianshi6};
                    this.ivMusicRightBk = (ImageView) mSplitScreenWndView.findViewById(R.id.ivMusicRightBk);
                    this.mMusicCoverNor = (ImageView) mSplitScreenWndView.findViewById(R.id.MusicCoverNor);
                    this.mMusicCover = (ImageView) mSplitScreenWndView.findViewById(R.id.MusicCover);
                    this.tvTrackInfor = (TextView) mSplitScreenWndView.findViewById(R.id.tvTrackInfor);
                    ImageButton imageButton = (ImageButton) mSplitScreenWndView.findViewById(R.id.BtnPrev);
                    this.mBtnPrev = imageButton;
                    if (imageButton != null) {
                        imageButton.setOnClickListener(this);
                    }
                    ImageButton imageButton2 = (ImageButton) mSplitScreenWndView.findViewById(R.id.BtnPlayPause);
                    this.mBtnPlayPause = imageButton2;
                    if (imageButton2 != null) {
                        imageButton2.setOnClickListener(this);
                    }
                    ImageButton imageButton3 = (ImageButton) mSplitScreenWndView.findViewById(R.id.BtnNext);
                    this.mBtnNext = imageButton3;
                    if (imageButton3 != null) {
                        imageButton3.setOnClickListener(this);
                    }
                    this.ivPage0 = (ImageView) mSplitScreenWndView.findViewById(R.id.ivPage0);
                    this.ivPage1 = (ImageView) mSplitScreenWndView.findViewById(R.id.ivPage1);
                    this.ivPage2 = (ImageView) mSplitScreenWndView.findViewById(R.id.ivPage2);
                    this.tvCurTime = (TextView) mSplitScreenWndView.findViewById(R.id.tvCurTime);
                    this.cbWifiStatus = (CheckBox) mSplitScreenWndView.findViewById(R.id.cbWifiStatus);
                    this.cbUsbStatus = (CheckBox) mSplitScreenWndView.findViewById(R.id.cbUsbStatus);
                    this.cbBtStatus = (CheckBox) mSplitScreenWndView.findViewById(R.id.cbBtStatus);
                    if (view5 != null) {
                        this.tvLongitude = (TextView) view5.findViewById(R.id.tvLongitude);
                        this.tvLatitude = (TextView) view5.findViewById(R.id.tvLatitude);
                        this.imagePointerChassis = (ImageView) view5.findViewById(R.id.imagePointerChassis);
                        this.reX = this.mSysProviderOpt.getRecordDouble(SysProviderOpt.SYS_3D_DATA_RE_X, 0.0d);
                        this.reY = this.mSysProviderOpt.getRecordDouble(SysProviderOpt.SYS_3D_DATA_RE_Y, 0.0d);
                        this.reZ = this.mSysProviderOpt.getRecordDouble(SysProviderOpt.SYS_3D_DATA_RE_Z, 0.0d);
                        this.mImgGyroView1 = (ImageView) view5.findViewById(R.id.ImgGyroView1);
                        this.mImgGyroView2 = (ImageView) view5.findViewById(R.id.ImgGyroView2);
                        ImageButton imageButton4 = (ImageButton) view5.findViewById(R.id.ImgBtnGyroView1);
                        this.ImgBtnGyroView1 = imageButton4;
                        if (imageButton4 != null) {
                            imageButton4.setOnLongClickListener(this);
                        }
                    }
                    if (mScreen1920x720) {
                        this.mWeatherIConLst = new int[]{R.drawable.normal_1920x720_weather_d00, R.drawable.normal_1920x720_weather_d01, R.drawable.normal_1920x720_weather_d02, R.drawable.normal_1920x720_weather_d03, R.drawable.normal_1920x720_weather_d04, R.drawable.normal_1920x720_weather_d05, R.drawable.normal_1920x720_weather_d06, R.drawable.normal_1920x720_weather_d07, R.drawable.normal_1920x720_weather_d08, R.drawable.normal_1920x720_weather_d09, R.drawable.normal_1920x720_weather_d10, R.drawable.normal_1920x720_weather_d11, R.drawable.normal_1920x720_weather_d12, R.drawable.normal_1920x720_weather_d13, R.drawable.normal_1920x720_weather_d14, R.drawable.normal_1920x720_weather_d15, R.drawable.normal_1920x720_weather_d16, R.drawable.normal_1920x720_weather_d17, R.drawable.normal_1920x720_weather_d18, R.drawable.normal_1920x720_weather_d19, R.drawable.normal_1920x720_weather_d20, R.drawable.normal_1920x720_weather_d21, R.drawable.normal_1920x720_weather_d22, R.drawable.normal_1920x720_weather_d23, R.drawable.normal_1920x720_weather_d24, R.drawable.normal_1920x720_weather_d25, R.drawable.normal_1920x720_weather_d26, R.drawable.normal_1920x720_weather_d27, R.drawable.normal_1920x720_weather_d28, R.drawable.normal_1920x720_weather_d28, R.drawable.normal_1920x720_weather_d30, R.drawable.normal_1920x720_weather_d31, R.drawable.normal_1920x720_weather_d53};
                    }
                    if (this.m_iUITypeVer == 41 && this.m_iModeSet == 11) {
                        this.mWeatherIConLst = new int[]{R.drawable.cheku_1280x480_weather_icon_d0, R.drawable.cheku_1280x480_weather_icon_d1, R.drawable.cheku_1280x480_weather_icon_d2, R.drawable.cheku_1280x480_weather_icon_d3, R.drawable.cheku_1280x480_weather_icon_d4, R.drawable.cheku_1280x480_weather_icon_d5, R.drawable.cheku_1280x480_weather_icon_d6, R.drawable.cheku_1280x480_weather_icon_d7, R.drawable.cheku_1280x480_weather_icon_d8, R.drawable.cheku_1280x480_weather_icon_d9, R.drawable.cheku_1280x480_weather_icon_d10, R.drawable.cheku_1280x480_weather_icon_d11, R.drawable.cheku_1280x480_weather_icon_d12, R.drawable.cheku_1280x480_weather_icon_d13, R.drawable.cheku_1280x480_weather_icon_d14, R.drawable.cheku_1280x480_weather_icon_d15, R.drawable.cheku_1280x480_weather_icon_d16, R.drawable.cheku_1280x480_weather_icon_d17, R.drawable.cheku_1280x480_weather_icon_d18, R.drawable.cheku_1280x480_weather_icon_d19, R.drawable.cheku_1280x480_weather_icon_d20, R.drawable.cheku_1280x480_weather_icon_d21, R.drawable.cheku_1280x480_weather_icon_d22, R.drawable.cheku_1280x480_weather_icon_d23, R.drawable.cheku_1280x480_weather_icon_d24, R.drawable.cheku_1280x480_weather_icon_d25, R.drawable.cheku_1280x480_weather_icon_d26, R.drawable.cheku_1280x480_weather_icon_d27, R.drawable.cheku_1280x480_weather_icon_d28, R.drawable.cheku_1280x480_weather_icon_d29, R.drawable.cheku_1280x480_weather_icon_d30, R.drawable.cheku_1280x480_weather_icon_d31, R.drawable.cheku_1280x480_weather_icon_d53};
                    }
                    if (view4 != null) {
                        this.mTvWeatherTitle = (TextView) view4.findViewById(R.id.TvWeatherTitle);
                        this.mIvWeatherIcon = (ImageView) view4.findViewById(R.id.IvWeatherIcon);
                        this.TvWeatherCurTemp = (TextView) view4.findViewById(R.id.TvWeatherCurTemp);
                        this.mTvCityName = (TextView) view4.findViewById(R.id.TvCityName);
                        ImageButton imageButton5 = (ImageButton) view4.findViewById(R.id.BtnSetCityCode);
                        this.btnSetCityCode = imageButton5;
                        if (imageButton5 != null) {
                            imageButton5.setOnLongClickListener(this);
                        }
                    }
                    if (mScreen1920x720) {
                        this.mAmapautoIConLst = new int[]{R.drawable.normal_1920x720_amapauto_yuanche, R.drawable.normal_1920x720_amapauto_zuozhuan, R.drawable.normal_1920x720_amapauto_youzhuan, R.drawable.normal_1920x720_amapauto_zuoqian, R.drawable.normal_1920x720_amapauto_youqian, R.drawable.normal_1920x720_amapauto_zuohou, R.drawable.normal_1920x720_amapauto_youhou, R.drawable.normal_1920x720_amapauto_zuodiaotou, R.drawable.normal_1920x720_amapauto_zhixing, R.drawable.normal_1920x720_amapauto_tujingdi, R.drawable.normal_1920x720_amapauto_jinruhuanlu, R.drawable.normal_1920x720_amapauto_likaihuanlu, R.drawable.normal_1920x720_amapauto_fuwuqu, R.drawable.normal_1920x720_amapauto_shoufeizhan, R.drawable.normal_1920x720_amapauto_mudidi, R.drawable.normal_1920x720_amapauto_jinrusuidao, R.drawable.normal_1920x720_amapauto_zuojinruhuanlu, R.drawable.normal_1920x720_amapauto_zuoshichuhuandao, R.drawable.normal_1920x720_amapauto_youdiaotou, R.drawable.normal_1920x720_amapauto_shunxing};
                    }
                    if (this.m_iUITypeVer == 41 && this.m_iModeSet == 11) {
                        this.mAmapautoIConLst = new int[]{R.drawable.amapauto_yuanche, R.drawable.amapauto_zuozhuan, R.drawable.amapauto_youzhuan, R.drawable.amapauto_zuoqian, R.drawable.amapauto_youqian, R.drawable.amapauto_zuohou, R.drawable.amapauto_youhou, R.drawable.amapauto_zuodiaotou, R.drawable.amapauto_zhixing, R.drawable.amapauto_tujingdi, R.drawable.amapauto_jinruhuanlu, R.drawable.amapauto_likaihuanlu, R.drawable.amapauto_fuwuqu, R.drawable.amapauto_shoufeizhan, R.drawable.amapauto_destination, R.drawable.amapauto_jinrusuidao, R.drawable.amapauto_zuojinruhuanlu, R.drawable.amapauto_zuoshichuhuandao, R.drawable.amapauto_youdiaotou, R.drawable.amapauto_shunxing};
                    }
                    if (view3 != null) {
                        this.rlNaviView = (RelativeLayout) view3.findViewById(R.id.rlNaviView);
                        this.tvNaviNoData = (TextView) view3.findViewById(R.id.tvNaviNoData);
                        this.mTvSegRemainDisInfor = (TextView) view3.findViewById(R.id.TvSegRemainDisInfor);
                        this.mAmapauto_icon = (ImageView) view3.findViewById(R.id.Amapauto_Icon);
                        this.ivCameraType = (ImageView) view3.findViewById(R.id.ivCameraType);
                        this.tvCameraSpeed = (TextView) view3.findViewById(R.id.tvCameraSpeed);
                        this.tvNextRouadName = (TextView) view3.findViewById(R.id.TvNextRouadName);
                        this.tvRouteRemainDis = (TextView) view3.findViewById(R.id.TvRouteRemainDis);
                        this.tvRouteRemainTime = (TextView) view3.findViewById(R.id.TvRouteRemainTime);
                    }
                    if (view2 != null) {
                        MyClockView myClockView = (MyClockView) view2.findViewById(R.id.mClockView);
                        this.twCurDataTimeYMD = (TextView) view2.findViewById(R.id.TwCurDataTimeYMD);
                        this.twCurDataTimeWeek = (TextView) view2.findViewById(R.id.TwCurDataTimeWeek);
                        if (myClockView != null) {
                            if (mScreen1920x720) {
                                myClockView.setClockXY(EventUtils.WHAT_AUTO_RUNNING_USB_DVR_CRASH_SERVICE, 615);
                            }
                            if (this.m_iUITypeVer == 41 && this.m_iModeSet == 11) {
                                myClockView.setClockXY(190, 354);
                            }
                        }
                    }
                    final ArrayList arrayList = new ArrayList();
                    if (mScreen1920x720) {
                        arrayList.add(view5);
                        arrayList.add(view2);
                        arrayList.add(view3);
                    }
                    if (this.m_iUITypeVer == 41 && this.m_iModeSet == 11) {
                        arrayList.add(view4);
                        arrayList.add(view3);
                    }
                    this.mVerticalViewPager.setAdapter(new PagerAdapter() {
                        public boolean isViewFromObject(View view, Object obj) {
                            return view == obj;
                        }

                        public int getCount() {
                            return arrayList.size();
                        }

                        public Object instantiateItem(ViewGroup viewGroup, int i) {
                            ((VerticalViewPager) viewGroup).addView((View) arrayList.get(i));
                            return arrayList.get(i);
                        }

                        public void destroyItem(ViewGroup viewGroup, int i, Object obj) {
                            ((VerticalViewPager) viewGroup).removeView((View) arrayList.get(i));
                        }
                    });
                    if (mScreen1920x720) {
                        updateTimerInfor();
                        this.mGPSMonitor = new GPSMonitor(this);
                        Handler handler = this.mEventHandler;
                        if (handler != null) {
                            handler.sendEmptyMessageDelayed(1006, 2000);
                        }
                    }
                    this.mVerticalViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
                        public void onPageScrollStateChanged(int i) {
                        }

                        public void onPageScrolled(int i, float f, int i2) {
                        }

                        public void onPageSelected(int i) {
                            if (i == 0) {
                                if (EventService.this.ivPage0 != null) {
                                    EventService.this.ivPage0.setBackgroundResource(R.drawable.normal_1920x720_page_dian_d);
                                }
                                if (EventService.this.ivPage1 != null) {
                                    EventService.this.ivPage1.setBackgroundResource(R.drawable.normal_1920x720_page_dian_n);
                                }
                                if (EventService.this.ivPage2 != null) {
                                    EventService.this.ivPage2.setBackgroundResource(R.drawable.normal_1920x720_page_dian_n);
                                }
                            } else if (i == 1) {
                                if (EventService.this.ivPage0 != null) {
                                    EventService.this.ivPage0.setBackgroundResource(R.drawable.normal_1920x720_page_dian_n);
                                }
                                if (EventService.this.ivPage1 != null) {
                                    EventService.this.ivPage1.setBackgroundResource(R.drawable.normal_1920x720_page_dian_d);
                                }
                                if (EventService.this.ivPage2 != null) {
                                    EventService.this.ivPage2.setBackgroundResource(R.drawable.normal_1920x720_page_dian_n);
                                }
                            } else if (i == 2) {
                                if (EventService.this.ivPage0 != null) {
                                    EventService.this.ivPage0.setBackgroundResource(R.drawable.normal_1920x720_page_dian_n);
                                }
                                if (EventService.this.ivPage1 != null) {
                                    EventService.this.ivPage1.setBackgroundResource(R.drawable.normal_1920x720_page_dian_n);
                                }
                                if (EventService.this.ivPage2 != null) {
                                    EventService.this.ivPage2.setBackgroundResource(R.drawable.normal_1920x720_page_dian_d);
                                }
                            }
                        }
                    });
                }
            }

            public static void removeSplitScreenWnd() {
                synchronized (mObject) {
                    if (mIsAddSplitScreenView) {
                        if (mSplitScreenWndView != null) {
                            if (wm == null) {
                                wm = (WindowManager) mAppContext.getSystemService("window");
                            }
                            WindowManager windowManager = wm;
                            if (windowManager != null) {
                                windowManager.removeView(mSplitScreenWndView);
                            }
                        }
                        mIsAddSplitScreenView = false;
                    }
                }
            }

            public static void addSplitScreenWnd() {
                synchronized (mObject) {
                    if (!mIsAddSplitScreenView) {
                        if (!(wm == null || mSplitScreenWndView == null)) {
                            Log.i(TAG, "addSplitScreenWnd: ");
                            wm.addView(mSplitScreenWndView, wmSplitScreenWndParams);
                        }
                        mIsAddSplitScreenView = true;
                    }
                }
            }

            public void showSplitScreenWnd(boolean z) {
                this.mEventHandler.removeMessages(WHAT_HIDE_SPLIT_SCREEN_WND);
                addSplitScreenWnd();
            }

            public void showSplitScreenWnd() {
                showSplitScreenWnd(true);
            }

            public void controlSplitScreen(int i) {
                Log.i(TAG, "controlSplitScreen: iExtra = " + i);
            }

            public void updateTimerInfor() {
                Calendar instance2 = Calendar.getInstance();
                int i = instance2.get(1);
                int i2 = instance2.get(2) + 1;
                int i3 = instance2.get(5);
                int i4 = instance2.get(7);
                int i5 = instance2.get(11);
                int i6 = instance2.get(12);
                String string = Settings.System.getString(getContentResolver(), "time_12_24");
                if (string == null || !string.equals("24")) {
                    if (i5 > 12) {
                        i5 -= 12;
                    } else if (i5 == 0) {
                        i5 = 12;
                    }
                }
                String format = String.format("%02d:%02d", new Object[]{Integer.valueOf(i5), Integer.valueOf(i6)});
                TextView textView = this.tvCurTime;
                if (textView != null) {
                    textView.setText(format);
                }
                String format2 = String.format("%d-%02d-%02d", new Object[]{Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i3)});
                TextView textView2 = this.twCurDataTimeYMD;
                if (textView2 != null) {
                    textView2.setText(format2);
                }
                int[] iArr = {0, R.string.lbl_sun, R.string.lbl_mon, R.string.lbl_tue, R.string.lbl_wed, R.string.lbl_thu, R.string.lbl_fri, R.string.lbl_sat};
                TextView textView3 = this.twCurDataTimeWeek;
                if (textView3 != null) {
                    textView3.setText(getString(iArr[i4]));
                }
                PowerOffEvt powerOffEvt = this.mPowerOffEvt;
                if (powerOffEvt != null) {
                    powerOffEvt.updateTimerInfor(i, i2, i3);
                }
            }

            public void refreshWifiStatus(boolean z) {
                CheckBox checkBox = this.cbWifiStatus;
                if (checkBox != null) {
                    checkBox.setChecked(z);
                }
            }

            public void refreshWifiStatus(int i) {
                try {
                    View view2 = this.mIvWifiSignalLevel;
                    if (view2 != null) {
                        int i2 = this.mImitateOriginalCarUiIndex;
                        if (i2 == 2) {
                            switch (i) {
                                case -1:
                                    view2.setBackgroundResource(R.drawable.imitate_800x480_auto_btn_wifi_bt);
                                    return;
                                case 0:
                                    view2.setBackgroundResource(R.drawable.imitate_800x480_auto_btn_wifi_off);
                                    return;
                                case 1:
                                    view2.setBackgroundResource(R.drawable.imitate_800x480_auto_btn_wifi_0);
                                    return;
                                case 2:
                                    view2.setBackgroundResource(R.drawable.imitate_800x480_auto_btn_wifi_1);
                                    return;
                                case 3:
                                    view2.setBackgroundResource(R.drawable.imitate_800x480_auto_btn_wifi_2);
                                    return;
                                case 4:
                                    view2.setBackgroundResource(R.drawable.imitate_800x480_auto_btn_wifi_3);
                                    return;
                                case 5:
                                    view2.setBackgroundResource(R.drawable.imitate_800x480_auto_btn_wifi_4);
                                    return;
                                default:
                                    return;
                            }
                        } else if (i2 == 1) {
                            switch (i) {
                                case -1:
                                    view2.setBackgroundResource(R.drawable.imitate_1024x480_auto_btn_wifi_bt);
                                    return;
                                case 0:
                                    view2.setBackgroundResource(R.drawable.imitate_1024x480_auto_btn_wifi_off);
                                    return;
                                case 1:
                                    view2.setBackgroundResource(R.drawable.imitate_1024x480_auto_btn_wifi_0);
                                    return;
                                case 2:
                                    view2.setBackgroundResource(R.drawable.imitate_1024x480_auto_btn_wifi_1);
                                    return;
                                case 3:
                                    view2.setBackgroundResource(R.drawable.imitate_1024x480_auto_btn_wifi_2);
                                    return;
                                case 4:
                                    view2.setBackgroundResource(R.drawable.imitate_1024x480_auto_btn_wifi_3);
                                    return;
                                case 5:
                                    view2.setBackgroundResource(R.drawable.imitate_1024x480_auto_btn_wifi_4);
                                    return;
                                default:
                                    return;
                            }
                        } else if (i2 == 3) {
                            switch (i) {
                                case -1:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x720_auto_btn_wifi_bt);
                                    return;
                                case 0:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x720_auto_btn_wifi_off);
                                    return;
                                case 1:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x720_auto_btn_wifi_0);
                                    return;
                                case 2:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x720_auto_btn_wifi_1);
                                    return;
                                case 3:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x720_auto_btn_wifi_2);
                                    return;
                                case 4:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x720_auto_btn_wifi_3);
                                    return;
                                case 5:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x720_auto_btn_wifi_4);
                                    return;
                                default:
                                    return;
                            }
                        } else if (i2 == 4) {
                            switch (i) {
                                case -1:
                                    view2.setBackgroundResource(R.drawable.imitate_1920x720_auto_btn_wifi_bt);
                                    return;
                                case 0:
                                    view2.setBackgroundResource(R.drawable.imitate_1920x720_auto_btn_wifi_off);
                                    return;
                                case 1:
                                    view2.setBackgroundResource(R.drawable.imitate_1920x720_auto_btn_wifi_0);
                                    return;
                                case 2:
                                    view2.setBackgroundResource(R.drawable.imitate_1920x720_auto_btn_wifi_1);
                                    return;
                                case 3:
                                    view2.setBackgroundResource(R.drawable.imitate_1920x720_auto_btn_wifi_2);
                                    return;
                                case 4:
                                    view2.setBackgroundResource(R.drawable.imitate_1920x720_auto_btn_wifi_3);
                                    return;
                                case 5:
                                    view2.setBackgroundResource(R.drawable.imitate_1920x720_auto_btn_wifi_4);
                                    return;
                                default:
                                    return;
                            }
                        } else if (i2 == 5) {
                            switch (i) {
                                case -1:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x480_auto_btn_wifi_bt);
                                    return;
                                case 0:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x480_auto_btn_wifi_off);
                                    return;
                                case 1:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x480_auto_btn_wifi_0);
                                    return;
                                case 2:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x480_auto_btn_wifi_1);
                                    return;
                                case 3:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x480_auto_btn_wifi_2);
                                    return;
                                case 4:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x480_auto_btn_wifi_3);
                                    return;
                                case 5:
                                    view2.setBackgroundResource(R.drawable.imitate_1280x480_auto_btn_wifi_4);
                                    return;
                                default:
                                    return;
                            }
                        }
                    }
                } catch (Exception e) {
                    Log.i(TAG, "refreshWifiStatus: e = " + e.toString());
                }
            }

            public void refreshUsbStatus(boolean z) {
                CheckBox checkBox = this.cbUsbStatus;
                if (checkBox != null) {
                    checkBox.setChecked(z);
                }
                View view2 = this.mIvUsbStatus;
                if (view2 != null) {
                    int i = this.mImitateOriginalCarUiIndex;
                    if (i == 1) {
                        view2.setBackgroundResource(z ? R.drawable.imitate_1024x480_auto_usb_d : R.drawable.imitate_1024x480_auto_usb_n);
                    } else if (i == 2) {
                        view2.setBackgroundResource(z ? R.drawable.imitate_800x480_auto_usb_d : R.drawable.imitate_800x480_auto_usb_n);
                    } else if (i == 3) {
                        view2.setBackgroundResource(z ? R.drawable.imitate_1280x720_auto_usb_d : R.drawable.imitate_1280x720_auto_usb_n);
                    } else if (i == 4) {
                        view2.setBackgroundResource(z ? R.drawable.imitate_1920x720_auto_usb_d : R.drawable.imitate_1920x720_auto_usb_n);
                    } else if (i == 5) {
                        view2.setBackgroundResource(z ? R.drawable.imitate_1280x480_auto_usb_d : R.drawable.imitate_1280x480_auto_usb_n);
                    }
                }
            }

            private void refreshBtStatus(boolean z) {
                try {
                    CheckBox checkBox = this.cbBtStatus;
                    if (checkBox != null) {
                        checkBox.setChecked(z);
                    }
                    View view2 = this.mIvBtStatus;
                    if (view2 != null) {
                        int i = this.mImitateOriginalCarUiIndex;
                        if (i == 1) {
                            view2.setBackgroundResource(z ? R.drawable.imitate_1024x480_auto_lanya2_d : R.drawable.imitate_1024x480_auto_lanya2_n);
                        } else if (i == 2) {
                            view2.setBackgroundResource(z ? R.drawable.imitate_800x480_auto_lanya2_d : R.drawable.imitate_800x480_auto_lanya2_n);
                        } else if (i == 3) {
                            view2.setBackgroundResource(z ? R.drawable.imitate_1280x720_auto_lanya2_d : R.drawable.imitate_1280x720_auto_lanya2_n);
                        } else if (i == 4) {
                            view2.setBackgroundResource(z ? R.drawable.imitate_1920x720_auto_lanya2_d : R.drawable.imitate_1920x720_auto_lanya2_n);
                        } else if (i == 5) {
                            view2.setBackgroundResource(z ? R.drawable.imitate_1280x480_auto_lanya2_d : R.drawable.imitate_1280x480_auto_lanya2_n);
                        }
                    }
                } catch (Exception e) {
                    Log.i(TAG, "refreshBtStatus: e = " + e.toString());
                }
            }

            /* access modifiers changed from: private */
            public void updateGPSInfo() {
                if (this.mGPSMonitor != null) {
                    DecimalFormat decimalFormat = new DecimalFormat("0.00");
                    float f = this.mGPSMonitor.getmAltitude();
                    float f2 = this.mGPSMonitor.getmLongitude();
                    float f3 = this.mGPSMonitor.getmLatitude();
                    float f4 = this.mGPSMonitor.getmBear();
                    String time = this.mGPSMonitor.getTime();
                    this.mGpsState = 0;
                    if (!this.mGpsTime.equals(time) && !(Math.abs((int) f2) == 0 && Math.abs((int) f3) == 0)) {
                        this.mGpsTime = time;
                        this.mGpsState = 1;
                    }
                    String.format("%5.1f", new Object[]{Float.valueOf(f)});
                    String format = decimalFormat.format((double) f2);
                    String format2 = decimalFormat.format((double) f3);
                    TextView textView = this.tvLongitude;
                    if (textView != null) {
                        textView.setText(getString(R.string.lbl_longitude) + "：" + format);
                    }
                    TextView textView2 = this.tvLatitude;
                    if (textView2 != null) {
                        textView2.setText(getString(R.string.lbl_latitude) + "：" + format2);
                    }
                    ImageView imageView = this.imagePointerChassis;
                    if (imageView != null) {
                        imageView.setRotation(f4);
                    }
                    View view2 = this.mIvGpsStatus;
                    if (view2 != null) {
                        int i = this.mImitateOriginalCarUiIndex;
                        int i2 = R.drawable.imitate_800x480_auto_gps_d;
                        int i3 = R.drawable.imitate_800x480_auto_gps_;
                        if (i == 1) {
                            i3 = R.drawable.imitate_1024x480_auto_gps_;
                            i2 = R.drawable.imitate_1024x480_auto_gps_d;
                        } else if (i != 2) {
                            if (i == 3) {
                                i3 = R.drawable.imitate_1280x720_auto_gps_;
                                i2 = R.drawable.imitate_1280x720_auto_gps_d;
                            } else if (i == 4) {
                                i3 = R.drawable.imitate_1920x720_auto_gps_;
                                i2 = R.drawable.imitate_1920x720_auto_gps_d;
                            } else if (i == 5) {
                                i3 = R.drawable.imitate_1280x480_auto_gps_;
                                i2 = R.drawable.imitate_1280x480_auto_gps_d;
                            }
                        }
                        if (this.mGpsState != 1) {
                            i2 = i3;
                        }
                        view2.setBackgroundResource(i2);
                    }
                }
            }

            public void refreshSupportGpsStatus() {
                View view2 = this.mIvSupportGpsStatus;
                if (view2 != null) {
                    int i = this.mImitateOriginalCarUiIndex;
                    int i2 = R.drawable.imitate_800x480_auto_che_d;
                    if (i == 1) {
                        i2 = R.drawable.imitate_1024x480_auto_che_d;
                    } else if (i != 2) {
                        if (i == 3) {
                            i2 = R.drawable.imitate_1280x720_auto_che_d;
                        } else if (i == 4) {
                            i2 = R.drawable.imitate_1920x720_auto_che_d;
                        } else if (i == 5) {
                            i2 = R.drawable.imitate_1280x480_auto_che_d;
                        }
                    }
                    view2.setBackgroundResource(i2);
                }
            }

            private void reset3DGyro() {
                this.reX = this.xx;
                this.reY = this.yy;
                this.reZ = this.zz;
                Log.i(TAG, "reset3DGyro: jelly-xx = " + this.xx);
                Log.i(TAG, "reset3DGyro: jelly-yy = " + this.yy);
                Log.i(TAG, "reset3DGyro: jelly-zz = " + this.zz);
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                if (sysProviderOpt != null) {
                    sysProviderOpt.updateRecord(SysProviderOpt.SYS_3D_DATA_RE_X, String.valueOf(this.reX));
                    this.mSysProviderOpt.updateRecord(SysProviderOpt.SYS_3D_DATA_RE_Y, String.valueOf(this.reY));
                    this.mSysProviderOpt.updateRecord(SysProviderOpt.SYS_3D_DATA_RE_Z, String.valueOf(this.reZ));
                    sendBroadcast(new Intent("com.szchoiceway.eventcenter.RESET_3D_DATA"));
                }
            }

            public void refreshNaviInfo(int i, int i2, Bundle bundle) {
                VerticalViewPager verticalViewPager;
                VerticalViewPager verticalViewPager2;
                int i3;
                int i4 = i;
                int i5 = i2;
                Bundle bundle2 = bundle;
                if (i4 == 10001) {
                    if (bundle2 != null) {
                        int i6 = bundle2.getInt(GuideInfoExtraKey.TYPE);
                        if (i6 == 1 || i6 == 0) {
                            String string = bundle2.getString(GuideInfoExtraKey.NEXT_ROAD_NAME);
                            int i7 = bundle2.getInt(GuideInfoExtraKey.ICON);
                            int i8 = bundle2.getInt(GuideInfoExtraKey.ROUTE_REMAIN_DIS);
                            int i9 = bundle2.getInt(GuideInfoExtraKey.ROUTE_REMAIN_TIME);
                            int i10 = bundle2.getInt(GuideInfoExtraKey.SEG_REMAIN_DIS);
                            int i11 = bundle2.getInt(GuideInfoExtraKey.CAMERA_SPEED);
                            int i12 = bundle2.getInt(GuideInfoExtraKey.CAMERA_TYPE);
                            this.bIsNavigating = true;
                            RelativeLayout relativeLayout = this.rlNaviView;
                            if (relativeLayout != null) {
                                relativeLayout.setVisibility(0);
                            }
                            TextView textView = this.tvNaviNoData;
                            if (textView != null) {
                                textView.setVisibility(8);
                            }
                            if (this.mTvSegRemainDisInfor == null || i10 < 0) {
                                i3 = i12;
                            } else {
                                DecimalFormat decimalFormat = new DecimalFormat("0.0");
                                if (i10 >= 1000) {
                                    TextView textView2 = this.mTvSegRemainDisInfor;
                                    StringBuilder sb = new StringBuilder();
                                    i3 = i12;
                                    sb.append(decimalFormat.format(((double) i10) / 1000.0d));
                                    sb.append("KM后");
                                    textView2.setText(sb.toString());
                                } else {
                                    i3 = i12;
                                    TextView textView3 = this.mTvSegRemainDisInfor;
                                    textView3.setText(i10 + "M后");
                                }
                            }
                            ImageView imageView = this.mAmapauto_icon;
                            if (imageView != null && i7 > 0 && i7 <= 20) {
                                imageView.setBackgroundResource(this.mAmapautoIConLst[i7 - 1]);
                            }
                            ImageView imageView2 = this.ivCameraType;
                            if (imageView2 != null) {
                                int i13 = i3;
                                if (i13 != -1) {
                                    imageView2.setVisibility(0);
                                    if (i13 == 0) {
                                        this.ivCameraType.setBackgroundResource(R.drawable.auto_ic_edog_camera);
                                    } else if (i13 == 1) {
                                        this.ivCameraType.setBackgroundResource(R.drawable.auto_ic_edog_camera);
                                    } else if (i13 == 2) {
                                        this.ivCameraType.setBackgroundResource(R.drawable.auto_ic_edog__traffic);
                                    } else if (i13 == 3) {
                                        this.ivCameraType.setBackgroundResource(R.drawable.auto_ic_edog_camera);
                                    } else if (i13 == 4) {
                                        this.ivCameraType.setBackgroundResource(R.drawable.auto_ic_edog_bus);
                                    } else if (i13 == 5) {
                                        this.ivCameraType.setBackgroundResource(R.drawable.auto_ic_edog_emergency_line);
                                    }
                                } else {
                                    imageView2.setVisibility(8);
                                }
                            }
                            TextView textView4 = this.tvCameraSpeed;
                            if (textView4 != null) {
                                if (i11 != -1) {
                                    textView4.setVisibility(0);
                                    if (i11 == 0) {
                                        this.tvCameraSpeed.setBackgroundResource(R.drawable.auto_ic_edog_camera);
                                        this.tvCameraSpeed.setText(BuildConfig.FLAVOR);
                                    } else {
                                        this.tvCameraSpeed.setBackgroundResource(R.drawable.auto_ic_edog_limit_speed);
                                        TextView textView5 = this.tvCameraSpeed;
                                        textView5.setText(i11 + BuildConfig.FLAVOR);
                                    }
                                } else {
                                    textView4.setVisibility(8);
                                }
                            }
                            TextView textView6 = this.tvNextRouadName;
                            if (textView6 != null) {
                                textView6.setText(string);
                            }
                            if (this.tvRouteRemainDis != null && i8 >= 0) {
                                DecimalFormat decimalFormat2 = new DecimalFormat("0.0");
                                if (i8 >= 1000) {
                                    TextView textView7 = this.tvRouteRemainDis;
                                    textView7.setText("剩余  " + decimalFormat2.format(((double) i8) / 1000.0d) + "KM");
                                } else {
                                    TextView textView8 = this.tvRouteRemainDis;
                                    textView8.setText("剩余  " + i8 + "M");
                                }
                            }
                            TextView textView9 = this.tvRouteRemainTime;
                            if (textView9 != null) {
                                textView9.setText(Math.round(((float) i9) / 60.0f) + "分钟");
                            }
                            if (this.m_iUITypeVer == 101) {
                                VerticalViewPager verticalViewPager3 = this.mVerticalViewPager;
                            }
                        }
                    }
                } else if (i4 == 10019) {
                    if (i5 == 2 || i5 == 9 || i5 == 12) {
                        this.bIsNavigating = false;
                        RelativeLayout relativeLayout2 = this.rlNaviView;
                        if (relativeLayout2 != null) {
                            relativeLayout2.setVisibility(8);
                        }
                        TextView textView10 = this.tvNaviNoData;
                        if (textView10 != null) {
                            textView10.setVisibility(0);
                        }
                        if (this.m_iUITypeVer == 101 && (verticalViewPager2 = this.mVerticalViewPager) != null) {
                            verticalViewPager2.setCurrentItem(0);
                        }
                    }
                } else if (i4 == 10016 && this.m_iUITypeVer == 101 && (verticalViewPager = this.mVerticalViewPager) != null && verticalViewPager.getCurrentItem() == 2) {
                    this.mVerticalViewPager.setCurrentItem(0);
                }
            }

            public void updateWeatherInfor(String... strArr) {
                TextView textView = this.mTvWeatherTitle;
                if (textView != null) {
                    textView.setText(strArr[2]);
                }
                TextView textView2 = this.TvWeatherCurTemp;
                if (textView2 != null) {
                    textView2.setText(strArr[1]);
                }
                TextView textView3 = this.mTvCityName;
                if (textView3 != null) {
                    textView3.setText(strArr[3]);
                }
                int parseInt = Integer.parseInt(strArr[4]);
                ImageView imageView = this.mIvWeatherIcon;
                if (imageView == null) {
                    return;
                }
                if ((parseInt < 0 || parseInt > 31) && parseInt != 53) {
                    imageView.setBackgroundResource(R.drawable.normal_1920x720_weather_d99);
                } else if (parseInt == 53) {
                    int[] iArr = this.mWeatherIConLst;
                    imageView.setBackgroundResource(iArr[iArr.length - 1]);
                } else {
                    imageView.setBackgroundResource(this.mWeatherIConLst[parseInt]);
                }
            }

            public void setbSysKeyboardIsShow(boolean z) {
                this.bSysKeyboardIsShow = z;
            }

            private boolean getbSysKeyboardIsShow() {
                return this.bSysKeyboardIsShow;
            }

            public void refreshPlayState() {
                if (this.mCurrSendMode.getIntValue() != EventUtils.eSrcMode.SRC_MUSIC.getIntValue() && this.mCurrSendMode.getIntValue() != EventUtils.eSrcMode.SRC_MOVIE.getIntValue() && this.mCurrSendMode.getIntValue() != EventUtils.eSrcMode.SRC_GPS.getIntValue()) {
                    onShowMusicInfo(false);
                } else if (this.bMusicIsResume) {
                    onShowMusicInfo(false);
                } else {
                    onShowMusicInfo(true);
                }
            }

            public void onShowMusicInfo(boolean z) {
                if (!this.mBackcarConnected) {
                    if (z) {
                        String validModeTitleInfor = getValidModeTitleInfor();
                        if (this.tvTrackInfor != null) {
                            RelativeLayout relativeLayout = this.rlSplitScreenMusicView;
                            if (!(relativeLayout == null || relativeLayout.getVisibility() == 0)) {
                                this.rlSplitScreenMusicView.setVisibility(0);
                            }
                            if (BuildConfig.FLAVOR.equals(this.tvTrackInfor.getText().toString()) || !validModeTitleInfor.equals(this.tvTrackInfor.getText().toString())) {
                                this.tvTrackInfor.setText(validModeTitleInfor);
                                this.tvTrackInfor.setFocusable(true);
                                int nextInt = new Random().nextInt(this.imageConverIdLst.length);
                                Log.i(TAG, "refreshProgress: 随机数：i = " + nextInt);
                                Bitmap decodeResource = BitmapFactory.decodeResource(getResources(), this.imageConverIdLst[nextInt]);
                                ImageView imageView = this.mMusicCoverNor;
                                if (imageView != null) {
                                    imageView.setImageBitmap(decodeResource);
                                }
                                Bitmap decodeResource2 = BitmapFactory.decodeResource(getResources(), this.imageRightBkIdLst[nextInt]);
                                ImageView imageView2 = this.ivMusicRightBk;
                                if (imageView2 != null) {
                                    imageView2.setImageBitmap(decodeResource2);
                                    return;
                                }
                                return;
                            }
                            return;
                        }
                        return;
                    }
                    RelativeLayout relativeLayout2 = this.rlSplitScreenMusicView;
                    if (relativeLayout2 != null && relativeLayout2.getVisibility() == 0) {
                        this.rlSplitScreenMusicView.setVisibility(8);
                    }
                }
            }

            public void setRadarData(byte[] bArr) {
                this.mEventHandler.sendMessage(this.mEventHandler.obtainMessage(HANDLER_RADAR_DATA, bArr));
            }

            public void notifyModeKeyEvt(int i) {
                if (isEffectiveMode(this.mValidMode.getIntValue())) {
                    notifyValidModeEvt(4098, 0, i, (byte[]) null, (String) null);
                }
            }

            public void delaySendPausePlayKey() {
                Message obtainMessage = this.mEventHandler.obtainMessage();
                obtainMessage.what = EventUtils.HANDLER_CAN_KEY_EVENT;
                obtainMessage.arg1 = 6;
                this.mEventHandler.sendMessageDelayed(obtainMessage, 100);
            }

            public void startVoiceCtrl(Intent intent) {
                String str;
                int i;
                int i2;
                int i3;
                Intent intent2 = intent;
                if (!this.isLetterConnect || !((i3 = this.mTelephoneState) == 1 || i3 == 2)) {
                    String stringExtra = intent2.getStringExtra("VoiceKeyWord");
                    float floatExtra = intent2.getFloatExtra("VoiceParam", 0.0f);
                    if (stringExtra != null && stringExtra.length() != 0) {
                        Log.i(TAG, "record startVoiceCtrl: " + stringExtra);
                        if (stringExtra.startsWith("打开")) {
                            this.mRecordOpen = true;
                        }
                        String str2 = "vol";
                        if (stringExtra.equals("返回") || stringExtra.equals("退出") || stringExtra.equals("关闭") || stringExtra.equals("关闭行车记录仪")) {
                            str = str2;
                            ProcessCanKey(85);
                        } else if (stringExtra.startsWith("停止音乐") || stringExtra.startsWith("音乐停止") || stringExtra.startsWith("停止") || stringExtra.startsWith("关闭音乐") || stringExtra.startsWith("关闭蓝牙") || stringExtra.startsWith("关闭视频") || stringExtra.startsWith("退出视频") || stringExtra.startsWith("退出音乐")) {
                            str = str2;
                            if (this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_MUSIC.getIntValue() || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_MOVIE.getIntValue() || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_BT.getIntValue() || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_BTMUSIC.getIntValue()) {
                                Message obtainMessage = this.mEventHandler.obtainMessage();
                                obtainMessage.what = EventUtils.HANDLER_CAN_KEY_EVENT;
                                obtainMessage.arg1 = 511;
                                this.mEventHandler.sendMessageDelayed(obtainMessage, 500);
                            } else {
                                Message obtainMessage2 = this.mEventHandler.obtainMessage();
                                obtainMessage2.what = EventUtils.HANDLER_CAN_KEY_EVENT;
                                obtainMessage2.arg1 = 85;
                                this.mEventHandler.sendMessageDelayed(obtainMessage2, 500);
                            }
                        } else if (stringExtra.startsWith("音乐暂停") || stringExtra.startsWith("暂停音乐") || stringExtra.startsWith("暂停") || stringExtra.startsWith("暂停视频")) {
                            str = str2;
                            if (this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_MUSIC.getIntValue() || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_MOVIE.getIntValue() || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_BT.getIntValue() || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_BTMUSIC.getIntValue()) {
                                Message obtainMessage3 = this.mEventHandler.obtainMessage();
                                obtainMessage3.what = EventUtils.HANDLER_CAN_KEY_EVENT;
                                obtainMessage3.arg1 = 5;
                                this.mEventHandler.sendMessageDelayed(obtainMessage3, 500);
                            }
                        } else if (stringExtra.startsWith("播放音乐") || stringExtra.startsWith("音乐播放") || stringExtra.startsWith("播放") || stringExtra.startsWith("播放视频")) {
                            str = str2;
                            if (this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_MUSIC.getIntValue() || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_MOVIE.getIntValue() || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_BT.getIntValue() || this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_BTMUSIC.getIntValue()) {
                                Message obtainMessage4 = this.mEventHandler.obtainMessage();
                                obtainMessage4.what = EventUtils.HANDLER_CAN_KEY_EVENT;
                                obtainMessage4.arg1 = 4;
                                this.mEventHandler.sendMessageDelayed(obtainMessage4, 500);
                            }
                        } else {
                            if (stringExtra.startsWith("上一曲")) {
                                Log.d(TAG, "上一曲 mValidMode = " + this.mValidMode.getIntValue());
                                Log.d(TAG, "send MCU_KEY_PREV");
                                Message obtainMessage5 = this.mEventHandler.obtainMessage();
                                obtainMessage5.what = EventUtils.HANDLER_CAN_KEY_EVENT;
                                obtainMessage5.arg1 = 3;
                                this.mEventHandler.sendMessageDelayed(obtainMessage5, 500);
                            } else if (stringExtra.startsWith("下一曲")) {
                                Message obtainMessage6 = this.mEventHandler.obtainMessage();
                                obtainMessage6.what = EventUtils.HANDLER_CAN_KEY_EVENT;
                                obtainMessage6.arg1 = 2;
                                this.mEventHandler.sendMessageDelayed(obtainMessage6, 500);
                            } else if (stringExtra.startsWith("接听电话")) {
                                EventUtils.sendBTBroadcast(getApplicationContext(), EventUtils.MCU_KEY_INFOR_ACTION, 23);
                            } else if (stringExtra.startsWith("挂断电话")) {
                                EventUtils.sendBTBroadcast(getApplicationContext(), EventUtils.MCU_KEY_INFOR_ACTION, 22);
                            } else if (stringExtra.startsWith("搜索收音") || stringExtra.startsWith("搜索") || stringExtra.startsWith("收音搜索") || stringExtra.startsWith("搜索电台")) {
                                str = str2;
                                if (this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_RADIO.getIntValue()) {
                                    notifyModeKeyEvt(12);
                                }
                            } else if (stringExtra.startsWith("浏览收音") || stringExtra.startsWith("浏览") || stringExtra.startsWith("收音浏览")) {
                                str = str2;
                                if (this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_RADIO.getIntValue()) {
                                    notifyModeKeyEvt(13);
                                }
                            } else if (stringExtra.startsWith("向上搜索")) {
                                if (this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_RADIO.getIntValue()) {
                                    notifyModeKeyEvt(7);
                                }
                            } else if (stringExtra.startsWith("向下搜索")) {
                                if (this.mValidMode.getIntValue() == EventUtils.eSrcMode.SRC_RADIO.getIntValue()) {
                                    notifyModeKeyEvt(8);
                                }
                            } else if (stringExtra.equals("单曲循环")) {
                                ProcessCanKey(29);
                            } else if (stringExtra.equals("随机播放")) {
                                ProcessCanKey(30);
                            } else if (stringExtra.equals("全部循环")) {
                                ProcessCanKey(31);
                            } else if (stringExtra.equals("打开原车")) {
                                Log.i(TAG, "--->>> 打开原车");
                                sendSwitchOriginaCar();
                            } else if (stringExtra.equals("关闭原车")) {
                                Log.i(TAG, "--->>> 关闭原车");
                                setArmView_KeSaiwei();
                            } else if (stringExtra.startsWith("音效") || stringExtra.startsWith("打开音效") || stringExtra.startsWith("打开EQ")) {
                                str = str2;
                                startEqMode();
                            } else if (stringExtra.startsWith("任务列表") || stringExtra.startsWith("打开任务列表")) {
                                str = str2;
                                sendBroadcastAsUser(new Intent(EventUtils.ACTION_SHOW_TASK_LIST), UserHandle.ALL);
                            } else if (stringExtra.startsWith("常用设置") || stringExtra.startsWith("打开常用设置") || stringExtra.startsWith("打开设置")) {
                                str = str2;
                                postRunModeActivity(EventUtils.eSrcMode.SRC_SETUP.getIntValue());
                            } else if (stringExtra.startsWith("关闭常用设置") || stringExtra.startsWith("关闭设置") || stringExtra.startsWith("关闭系统设置")) {
                                str = str2;
                                sendBroadcast(new Intent("com.szchoiceway.settings.action.finish"));
                                EventUtils.killProcess(EventUtils.SET_MODE_PACKAGE_NAME);
                            } else if (stringExtra.startsWith("更多设置") || stringExtra.startsWith("打开更多设置")) {
                                str = str2;
                                try {
                                    Intent intent3 = new Intent("android.intent.action.MAIN");
                                    intent3.addCategory("android.intent.category.LAUNCHER");
                                    intent3.setComponent(new ComponentName("com.android.settings", "com.android.settings.Settings"));
                                    intent3.setFlags(270532608);
                                    startActivity(intent3);
                                } catch (Exception unused) {
                                }
                            } else if (stringExtra.startsWith("行车记录仪") || stringExtra.startsWith("打开行车记录仪") || stringExtra.startsWith("打开新车记录仪") || stringExtra.startsWith("新车记录仪")) {
                                str = str2;
                                postRunModeActivity(EventUtils.eSrcMode.SRC_DVR.getIntValue());
                            } else if (stringExtra.startsWith("静音") || stringExtra.startsWith("关闭声音") || stringExtra.startsWith("声音关闭")) {
                                str = str2;
                                EventUtils.sendSysBroadcast(mAppContext, EventUtils.ZXW_SYS_KEY_EVT, 17);
                                boolean muteStatus = getMuteStatus();
                                Log.i(TAG, "onReceive: mute = " + muteStatus);
                                if (!muteStatus) {
                                    SendVol_KSW(true, 1, 1, getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, 0));
                                    sendMuteState(true);
                                    Intent intent4 = new Intent();
                                    intent4.setAction("com.szchoiceway.settings.vol");
                                    intent4.putExtra(str, getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, 0));
                                    sendBroadcast(intent4);
                                    sendToOSData();
                                }
                            } else if (stringExtra.startsWith("打开声音") || stringExtra.startsWith("声音打开") || stringExtra.startsWith("解除静音")) {
                                EventUtils.sendSysBroadcast(mAppContext, EventUtils.ZXW_SYS_KEY_EVT, 17);
                                boolean muteStatus2 = getMuteStatus();
                                Log.d(TAG, "mute = " + muteStatus2);
                                if (muteStatus2) {
                                    SendVol_KSW(false, 1, 1, getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, 0));
                                    sendMuteState(false);
                                    Intent intent5 = new Intent();
                                    intent5.setAction("com.szchoiceway.settings.vol");
                                    str = str2;
                                    intent5.putExtra(str, getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, 0));
                                    sendBroadcast(intent5);
                                    sendToOSData();
                                }
                            } else if (stringExtra.startsWith("音量加到") || stringExtra.startsWith("音量调到") || stringExtra.startsWith("音量减到")) {
                                int i4 = (int) floatExtra;
                                if (i4 < 0) {
                                    i4 = 0;
                                } else if (i4 > 40) {
                                    i4 = 40;
                                }
                                if (this.mSysProviderOpt != null) {
                                    SendVol_KSW(false, 1, 1, i4);
                                }
                                putSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, i4);
                                appySetting();
                                commitSetting();
                                sendToOSData();
                            } else if (stringExtra.startsWith("返回主页") || stringExtra.startsWith("返回主界面")) {
                                ProcessCanKey(9);
                            } else if (stringExtra.startsWith("播放蓝牙音乐")) {
                                postRunModeActivity(EventUtils.eSrcMode.SRC_BTMUSIC.getIntValue());
                            } else if (stringExtra.startsWith("打开中控")) {
                                postRunModeActivity(EventUtils.eSrcMode.SRC_ATSL_AIRCONSOLE.getIntValue());
                            } else if (stringExtra.startsWith("浏览器") || stringExtra.startsWith("打开浏览器")) {
                                postRunModeActivity(EventUtils.eSrcMode.SRC_EXPLORER.getIntValue());
                            } else if (stringExtra.startsWith("关闭音效") || stringExtra.startsWith("退出EQ") || stringExtra.startsWith("关闭EQ")) {
                                sendBroadcast(new Intent(EventUtils.ZXW_ACTION_CLOSE_EQUALIZER));
                            } else if (stringExtra.equals("关闭AUX") || stringExtra.equals("关闭电视") || stringExtra.equals("关闭DVD") || stringExtra.equals("关闭TV")) {
                                sendBroadcastCanKeyExtra(EventUtils.ZXW_CAN_KEY_EVT, 85);
                            } else if (stringExtra.equals("关闭DVR")) {
                                ksw_close_dvr();
                            } else if (stringExtra.equals("关闭前视")) {
                                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_CAMERA_SELECTION, 0);
                                if (recordInteger == 0 || recordInteger == 1) {
                                    sendBroadcastCanKeyExtra(EventUtils.ZXW_CAN_KEY_EVT, 85);
                                } else {
                                    CameraUtil cameraUtil2 = this.cameraUtil;
                                    if (cameraUtil2 != null) {
                                        cameraUtil2.send360SpeechBroadcast("avmClose");
                                    }
                                }
                            } else if (stringExtra.startsWith("打开仪表盘")) {
                                EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.DASHBOARD_MODE_PACKAGE_NAME, EventUtils.DASHBOARD_MODE_CLASS_NAME);
                            } else if (stringExtra.startsWith("关闭仪表盘")) {
                                EventUtils.killProcess(EventUtils.DASHBOARD_MODE_PACKAGE_NAME);
                            }
                            str = str2;
                        }
                        if ("打开左前窗".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 打开左前窗");
                            sendCanbusDataEx(new byte[]{-103, 2, 2, 0});
                        } else if ("打开右前窗".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 打开右前窗");
                            sendCanbusDataEx(new byte[]{-103, 2, 4, 0});
                        } else if ("打开左后窗".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 打开左后窗");
                            sendCanbusDataEx(new byte[]{-103, 2, 6, 0});
                        } else if ("打开右后窗".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 打开右后窗");
                            sendCanbusDataEx(new byte[]{-103, 2, 8, 0});
                        } else if ("打开天窗".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 打开天窗");
                            sendCanbusDataEx(new byte[]{-103, 2, 10, 0});
                        } else if ("打开后备箱".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 打开后备箱");
                            sendCanbusDataEx(new byte[]{-103, 2, 13, 0});
                        } else if ("关闭左前窗".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 关闭左前窗");
                            sendCanbusDataEx(new byte[]{-103, 2, 1, 0});
                        } else if ("关闭右前窗".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 关闭右前窗");
                            sendCanbusDataEx(new byte[]{-103, 2, 3, 0});
                        } else if ("关闭左后窗".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 关闭左后窗");
                            sendCanbusDataEx(new byte[]{-103, 2, 5, 0});
                        } else if ("关闭右后窗".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 关闭右后窗");
                            sendCanbusDataEx(new byte[]{-103, 2, 7, 0});
                        } else if ("关闭天窗".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 关闭天窗");
                            sendCanbusDataEx(new byte[]{-103, 2, 9, 0});
                        } else if ("关闭后备箱".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 关闭后备箱");
                            sendCanbusDataEx(new byte[]{-103, 2, 14, 0});
                        } else if ("展开后视镜".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 展开后视镜");
                            sendCanbusDataEx(new byte[]{-103, 2, 12, 0});
                        } else if ("折叠后视镜".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 折叠后视镜");
                            sendCanbusDataEx(new byte[]{-103, 2, 11, 0});
                        } else if ("打开所有车窗".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 打开所有车窗");
                            sendCanbusDataEx(new byte[]{-103, 2, 16, 0});
                        } else if ("关闭所有车窗".equals(stringExtra)) {
                            Log.i(TAG, "onReceive: 关闭所有车窗");
                            sendCanbusDataEx(new byte[]{-103, 2, 15, 0});
                        }
                        if (stringExtra.startsWith("打开天窗")) {
                            Log.i(TAG, "startVoiceCtrl: 打开天窗");
                            if ("XinCheng".equalsIgnoreCase(this.xml_client)) {
                                sendKSW_0x00_0x78(3, 0);
                            }
                        } else if (stringExtra.startsWith("关闭天窗")) {
                            Log.i(TAG, "startVoiceCtrl: 关闭天窗");
                            if ("XinCheng".equalsIgnoreCase(this.xml_client)) {
                                sendKSW_0x00_0x78(4, 0);
                            }
                        } else if (stringExtra.startsWith("打开车窗")) {
                            Log.i(TAG, "startVoiceCtrl: 打开车窗");
                            if ("XinCheng".equalsIgnoreCase(this.xml_client)) {
                                sendKSW_0x00_0x78(1, 0);
                            }
                        } else if (stringExtra.startsWith("关闭车窗")) {
                            Log.i(TAG, "startVoiceCtrl: 关闭车窗");
                            if ("XinCheng".equalsIgnoreCase(this.xml_client)) {
                                sendKSW_0x00_0x78(2, 0);
                            }
                        } else if (stringExtra.startsWith("打开前窗")) {
                            Log.i(TAG, "startVoiceCtrl: 打开前窗");
                            if ("XinCheng".equalsIgnoreCase(this.xml_client)) {
                                sendKSW_0x00_0x78(5, 0);
                            }
                        } else if (stringExtra.startsWith("打开后窗")) {
                            Log.i(TAG, "startVoiceCtrl: 打开后窗");
                            if ("XinCheng".equalsIgnoreCase(this.xml_client)) {
                                sendKSW_0x00_0x78(6, 0);
                            }
                        } else if (stringExtra.startsWith("关闭前窗")) {
                            Log.i(TAG, "startVoiceCtrl: 关闭前窗");
                            if ("XinCheng".equalsIgnoreCase(this.xml_client)) {
                                sendKSW_0x00_0x78(7, 0);
                            }
                        } else if (stringExtra.startsWith("关闭后窗")) {
                            Log.i(TAG, "startVoiceCtrl: 打开后窗");
                            if ("XinCheng".equalsIgnoreCase(this.xml_client)) {
                                sendKSW_0x00_0x78(8, 0);
                            }
                        } else if (stringExtra.startsWith("打开导航") || stringExtra.startsWith("打开地图")) {
                            Log.i(TAG, "startVoiceCtrl: 打开导航");
                            enterNavi();
                            if ("XinCheng".equalsIgnoreCase(this.xml_client)) {
                                sendKSW_0x00_0x78(10, 0);
                            }
                        } else if (stringExtra.startsWith("打开收音")) {
                            Log.i(TAG, "startVoiceCtrl: 打开收音");
                            if ("XinCheng".equalsIgnoreCase(this.xml_client)) {
                                sendKSW_0x00_0x78(9, 0);
                            }
                        } else if (stringExtra.startsWith("关闭收音")) {
                            Log.i(TAG, "startVoiceCtrl: 关闭收音");
                            notifyValidModeEvt(4097, 0, 0, (byte[]) null, (String) null);
                        } else if (stringExtra.startsWith("打开音乐")) {
                            postRunModeActivity(EventUtils.eSrcMode.SRC_MUSIC.getIntValue());
                        } else if (stringExtra.startsWith("打开视频")) {
                            postRunModeActivity(EventUtils.eSrcMode.SRC_MOVIE.getIntValue());
                        } else if (stringExtra.startsWith("打开相册") || stringExtra.startsWith("关闭相册")) {
                        } else {
                            if (stringExtra.startsWith("打开AUX")) {
                                postRunModeActivity(EventUtils.eSrcMode.SRC_AUX.getIntValue());
                            } else if (stringExtra.startsWith("打开DVR")) {
                                postRunModeActivity(EventUtils.eSrcMode.SRC_DVR.getIntValue());
                            } else if (stringExtra.startsWith("打开蓝牙")) {
                                if (stringExtra.startsWith("打开蓝牙音乐")) {
                                    postRunModeActivity(EventUtils.eSrcMode.SRC_BTMUSIC.getIntValue());
                                } else {
                                    postRunModeActivity(EventUtils.eSrcMode.SRC_BT.getIntValue());
                                }
                            } else if (stringExtra.startsWith("打开电视")) {
                                postRunModeActivity(EventUtils.eSrcMode.SRC_CMMB.getIntValue());
                            } else if (stringExtra.startsWith("打开设置") || stringExtra.startsWith("打开系统设置")) {
                                postRunModeActivity(EventUtils.eSrcMode.SRC_SETUP.getIntValue());
                            } else if (stringExtra.startsWith("打开CarPlay") || stringExtra.startsWith("打开Car Auto") || stringExtra.startsWith("打开Android Auto")) {
                                postRunModeActivity(EventUtils.eSrcMode.SRC_CARPLAY.getIntValue());
                            } else if (stringExtra.startsWith("打开天气")) {
                                postRunModeActivity(EventUtils.eSrcMode.SRC_TXZ_WEATHER.getIntValue());
                            } else if (stringExtra.startsWith("关闭天气")) {
                                if (EventUtils.WEATHER_MODE_PACKAGE_NAME.equals(EventUtils.getTopPackageName(mAppContext))) {
                                    Message obtainMessage7 = this.mEventHandler.obtainMessage();
                                    obtainMessage7.what = EventUtils.HANDLER_CAN_KEY_EVENT;
                                    obtainMessage7.arg1 = 85;
                                    this.mEventHandler.sendMessageDelayed(obtainMessage7, 500);
                                }
                            } else if (stringExtra.startsWith("关闭CarPlay") || stringExtra.startsWith("关闭Car Auto") || stringExtra.startsWith("关闭Android Auto")) {
                                if (EventUtils.getInstallStatus(mAppContext, EventUtils.LETTER_CARPLAY_MODE_PACKAGE_NAME)) {
                                    Intent intent6 = new Intent();
                                    if (stringExtra.startsWith("关闭CarPlay") || stringExtra.startsWith("关闭Car Auto")) {
                                        intent6.setAction("action_carletter_close_link");
                                        intent6.putExtra("linkMode", 2);
                                        Log.d(TAG, "sendBroadcast close carplay");
                                    } else if (stringExtra.startsWith("关闭Android Auto")) {
                                        intent6.setAction("action_carletter_close_link");
                                        intent6.putExtra("linkMode", 3);
                                        Log.d(TAG, "sendBroadcast close android auto");
                                    }
                                    sendBroadcast(intent6);
                                    return;
                                }
                                EvtModel.startCarPlayService(mAppContext, false);
                            } else if (stringExtra.startsWith("打开手机互联")) {
                                postRunModeActivity(EventUtils.eSrcMode.SRC_PHONELINK.getIntValue());
                            } else if (stringExtra.startsWith("关闭手机互联")) {
                                EventUtils.killProcess(EventUtils.PHONEAPP_MODE_PACKAGE_NAME);
                            } else if (stringExtra.startsWith("打开浏览器")) {
                                postRunModeActivity(EventUtils.eSrcMode.SRC_EXPLORER.getIntValue());
                            } else if (stringExtra.startsWith("关闭浏览器")) {
                                EventUtils.killProcess(EventUtils.EXPLORER_MODE_PACKAGE_NAME);
                            } else if (stringExtra.startsWith("打开应用")) {
                                postRunModeActivity(EventUtils.eSrcMode.SRC_APP_LIST.getIntValue());
                            } else if (stringExtra.startsWith("关闭应用")) {
                                ProcessCanKey(9);
                            } else if (stringExtra.startsWith("打开资源管理")) {
                                postRunModeActivity(EventUtils.eSrcMode.SRC_ES_FILE_EXPLORER.getIntValue());
                            } else if (stringExtra.startsWith("关闭资源管理")) {
                                if (EventUtils.getInstallStatus(getApplicationContext(), EventUtils.ESUPER_MODE_PACKAGE_NAME)) {
                                    EventUtils.killProcess(EventUtils.ESUPER_MODE_PACKAGE_NAME);
                                } else if (EventUtils.getInstallStatus(getApplicationContext(), EventUtils.ESTRONGS_MODE_PACKAGE_NAME)) {
                                    EventUtils.killProcess(EventUtils.ESTRONGS_MODE_PACKAGE_NAME);
                                }
                            } else if (stringExtra.startsWith("打开在线音乐")) {
                                EventUtils.startActivityIfNotRuning(mAppContext, "cn.kuwo.kwmusiccar", "cn.kuwo.kwmusiccar.WelcomeActivity");
                            } else if (stringExtra.startsWith("关闭在线音乐")) {
                                EventUtils.killProcess("cn.kuwo.kwmusiccar");
                            } else if (stringExtra.startsWith("关闭导航")) {
                                EventUtils.killProcess(getSettingString(SysProviderOpt.NAVI_PACKAGENAME, BuildConfig.FLAVOR));
                            } else if (stringExtra.startsWith("打开WIFI")) {
                                EventUtils.setWifiMode(mAppContext, true);
                                EventUtils.startActivityIfNotRuning(mAppContext, "com.android.settings", "com.android.settings.Settings$WifiSettingsActivity");
                            } else if (stringExtra.startsWith("关闭WIFI")) {
                                EventUtils.setWifiMode(mAppContext, false);
                            } else if (!stringExtra.startsWith("关闭行车记录仪")) {
                                if (stringExtra.startsWith("打开屏幕")) {
                                    if (this.m_iUITypeVer == 41) {
                                        backLightOn_KSW();
                                    } else {
                                        PowerOff(false);
                                    }
                                } else if (stringExtra.startsWith("关闭屏幕")) {
                                    if (this.m_iUITypeVer == 41) {
                                        backLightOff_KSW();
                                    } else {
                                        ProcessCanKey(1);
                                    }
                                } else if (stringExtra.startsWith("音量调大") || stringExtra.startsWith("增大音量")) {
                                    if (this.mSysProviderOpt != null) {
                                        int settingInt = getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, 0) + 5;
                                        i = settingInt > 40 ? 40 : settingInt;
                                        Log.i(TAG, "onReceive: 音量++" + i);
                                    } else {
                                        i = 0;
                                    }
                                    putSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, i);
                                    SendVol_KSW(false, 1, 1, (byte) i);
                                    Intent intent7 = new Intent();
                                    intent7.setAction("com.szchoiceway.settings.vol");
                                    intent7.putExtra(str, i);
                                    sendBroadcast(intent7);
                                    sendToOSData();
                                } else if (stringExtra.startsWith("音量调小") || stringExtra.startsWith("减小音量")) {
                                    if (this.mSysProviderOpt != null) {
                                        int settingInt2 = getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, 0);
                                        if (settingInt2 != 0) {
                                            i2 = settingInt2 - 5;
                                            if (i2 < 0) {
                                                sendMuteState(true);
                                                i2 = 0;
                                            }
                                            Log.i(TAG, "onReceive: 音量--" + i2);
                                        } else {
                                            return;
                                        }
                                    } else {
                                        i2 = 0;
                                    }
                                    putSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, i2);
                                    SendVol_KSW(false, 1, 1, (byte) i2);
                                    Intent intent8 = new Intent();
                                    intent8.setAction("com.szchoiceway.settings.vol");
                                    intent8.putExtra(str, i2);
                                    sendBroadcast(intent8);
                                    sendToOSData();
                                } else if (stringExtra.startsWith("打开360")) {
                                    switchCamera(241);
                                    sendSpeechToLD("avmOpen");
                                    sendSpeechToXYQ("avmOpen");
                                } else if (stringExtra.startsWith("关闭360")) {
                                    switchCamera(EventUtils.HANDLER_AUTO_RUN_GPS);
                                    sendSpeechToLD("avmClose");
                                    sendSpeechToXYQ("avmClose");
                                } else if (stringExtra.startsWith("打开前视")) {
                                    switchCamera(1);
                                    int recordInteger2 = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_CAMERA_SELECTION, 0);
                                    if (recordInteger2 == 0 || recordInteger2 == 1) {
                                        postRunModeActivity(EventUtils.eSrcMode.SRC_FRONT_CAMERA.getIntValue());
                                        return;
                                    }
                                    sendSpeechToLD("frontView");
                                    sendSpeechToXYQ("frontView");
                                } else if (stringExtra.startsWith("打开后视")) {
                                    switchCamera(2);
                                    sendSpeechToLD("rearView");
                                    sendSpeechToXYQ("rearView");
                                } else if (stringExtra.startsWith("打开左视")) {
                                    switchCamera(3);
                                    sendSpeechToLD("leftView");
                                    sendSpeechToXYQ("leftView");
                                } else if (stringExtra.startsWith("打开右视")) {
                                    switchCamera(4);
                                    sendSpeechToLD("rightView");
                                    sendSpeechToXYQ("rightView");
                                } else if (stringExtra.startsWith("打开窄道模式")) {
                                    sendSpeechToLD("narrowView");
                                    sendSpeechToXYQ("narrowView");
                                } else if (stringExtra.contains("旋转一周")) {
                                    sendSpeechToLD("avmAround");
                                    sendSpeechToXYQ("avmAround");
                                } else if (stringExtra.startsWith("打开全景")) {
                                    sendSpeechToLD("avmOpen");
                                    sendSpeechToXYQ("avmOpen");
                                } else if (stringExtra.startsWith("关闭全景")) {
                                    sendSpeechToLD("avmClose");
                                    sendSpeechToXYQ("avmClose");
                                } else if (stringExtra.startsWith("左右屏切换")) {
                                    sendBroadcast(new Intent(EventUtils.ACTION_SWITCH_SPLITSCREEN));
                                } else if (!stringExtra.startsWith("旋转屏幕")) {
                                    if (stringExtra.startsWith("打开分屏")) {
                                        sendBroadcast(new Intent(EventUtils.ACTION_SPLITSCREEN));
                                    } else if (stringExtra.startsWith("取消分屏")) {
                                        Intent intent9 = new Intent(EventUtils.ACTION_DISMISS_SPLITSCREEN);
                                        intent9.putExtra("mode", true);
                                        sendBroadcast(intent9);
                                    } else if (stringExtra.startsWith("增大亮度")) {
                                        int settingInt3 = getSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, 0) + 10;
                                        if (settingInt3 > 100) {
                                            settingInt3 = 100;
                                        }
                                        putSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, settingInt3);
                                        SendBLVal((byte) settingInt3, (byte) 0);
                                        Intent intent10 = new Intent(EventUtils.ZXW_ACTION_SYS_BRIGHTNESS_SETTINGS);
                                        intent10.putExtra(EventUtils.ZXW_ACTION_SYS_BRIGHTNESS_SETTINGS_EXTRA, settingInt3);
                                        sendBroadcast(intent10);
                                    } else if (stringExtra.startsWith("降低亮度")) {
                                        int settingInt4 = getSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, 0) - 10;
                                        if (settingInt4 < 0) {
                                            settingInt4 = 0;
                                        }
                                        putSettingInt(EventUtils.KEY_BRIGHTNESS_SETTINGS, settingInt4);
                                        SendBLVal((byte) settingInt4, (byte) 0);
                                        Intent intent11 = new Intent(EventUtils.ZXW_ACTION_SYS_BRIGHTNESS_SETTINGS);
                                        intent11.putExtra(EventUtils.ZXW_ACTION_SYS_BRIGHTNESS_SETTINGS_EXTRA, settingInt4);
                                        sendBroadcast(intent11);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            /* access modifiers changed from: protected */
            public void startEqMode() {
                Intent intent = new Intent();
                intent.setComponent(new ComponentName("com.szchoiceway.equalizer", "com.szchoiceway.equalizer.MainActivity"));
                intent.setFlags(270532608);
                try {
                    startActivity(intent);
                } catch (Exception unused) {
                }
            }

            public void setCurrentPage(int i) {
                this.currentPage = i;
            }

            public void endEqMode_KSW() {
                if (this.currentPage == 206) {
                    Message obtainMessage = this.mEventHandler.obtainMessage();
                    obtainMessage.what = EventUtils.HANDLER_CAN_KEY_EVENT;
                    obtainMessage.arg1 = 85;
                    this.mEventHandler.sendMessageDelayed(obtainMessage, 100);
                }
            }

            public boolean checkMediaThird() {
                return !isSystemMediaRunning() && !isLetterTop();
            }

            public boolean isSystemMediaRunning() {
                return EventUtils.getTopPackageName(this).startsWith("com.szchoiceway");
            }

            public boolean is3rdMusicRunning() {
                List<ActivityManager.RunningTaskInfo> runningTasks = ((ActivityManager) getSystemService("activity")).getRunningTasks(100);
                if (runningTasks != null && runningTasks.size() > 0) {
                    for (int i = 0; i < runningTasks.size(); i++) {
                        ComponentName componentName = runningTasks.get(i).topActivity;
                        for (String equals : this.musicPkgLst) {
                            if (componentName.getPackageName().equals(equals)) {
                                Log.i(TAG, "Music APK: " + componentName.getPackageName());
                                return true;
                            }
                        }
                    }
                }
                return false;
            }

            public boolean isLinkAppTop() {
                String topPackageName = EventUtils.getTopPackageName(this);
                for (String equals : this.carplayPkgLst) {
                    if (topPackageName.equals(equals)) {
                        return true;
                    }
                }
                return false;
            }

            private void setHDMIStatus() {
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.SYS_TV_OUT_ON_OFF_SET_VALUE_INDEX_KEY, 1);
                boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.TVOUT_OUTPUT_ALL, false);
                Log.i(TAG, "setHDMIStatus: iTvOutOnOff = " + recordInteger + ", bTvOutputAll = " + recordBoolean);
            }

            /* JADX WARNING: Removed duplicated region for block: B:27:0x0053 A[SYNTHETIC, Splitter:B:27:0x0053] */
            /* JADX WARNING: Removed duplicated region for block: B:34:0x005d A[SYNTHETIC, Splitter:B:34:0x005d] */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            private void setOutputFormat() {
                /*
                    r4 = this;
                    com.szchoiceway.eventcenter.SysProviderOpt r0 = r4.mSysProviderOpt
                    java.lang.String r1 = "OUTPUT_VIDEO_FORMAT"
                    r2 = 0
                    boolean r0 = r0.getRecordBoolean(r1, r2)
                    java.lang.String r1 = "EventService"
                    java.lang.StringBuilder r2 = new java.lang.StringBuilder
                    r2.<init>()
                    java.lang.String r3 = "setOutputFormat "
                    r2.append(r3)
                    r2.append(r0)
                    java.lang.String r2 = r2.toString()
                    android.util.Log.d(r1, r2)
                    monitor-enter(r4)
                    java.io.File r1 = new java.io.File     // Catch:{ all -> 0x0066 }
                    java.lang.String r2 = "/sys/class/display/TV/mode"
                    r1.<init>(r2)     // Catch:{ all -> 0x0066 }
                    r2 = 0
                    java.io.FileOutputStream r3 = new java.io.FileOutputStream     // Catch:{ Exception -> 0x004d }
                    r3.<init>(r1)     // Catch:{ Exception -> 0x004d }
                    if (r0 == 0) goto L_0x0036
                    java.lang.String r0 = "720x576i-50\n"
                L_0x0031:
                    byte[] r0 = r0.getBytes()     // Catch:{ Exception -> 0x0048, all -> 0x0045 }
                    goto L_0x0039
                L_0x0036:
                    java.lang.String r0 = "720x480i-60\n"
                    goto L_0x0031
                L_0x0039:
                    r3.write(r0)     // Catch:{ Exception -> 0x0048, all -> 0x0045 }
                    r3.close()     // Catch:{ IOException -> 0x0040 }
                    goto L_0x0059
                L_0x0040:
                    r0 = move-exception
                L_0x0041:
                    r0.printStackTrace()     // Catch:{ all -> 0x0066 }
                    goto L_0x0059
                L_0x0045:
                    r0 = move-exception
                    r2 = r3
                    goto L_0x005b
                L_0x0048:
                    r0 = move-exception
                    r2 = r3
                    goto L_0x004e
                L_0x004b:
                    r0 = move-exception
                    goto L_0x005b
                L_0x004d:
                    r0 = move-exception
                L_0x004e:
                    r0.printStackTrace()     // Catch:{ all -> 0x004b }
                    if (r2 == 0) goto L_0x0059
                    r2.close()     // Catch:{ IOException -> 0x0057 }
                    goto L_0x0059
                L_0x0057:
                    r0 = move-exception
                    goto L_0x0041
                L_0x0059:
                    monitor-exit(r4)     // Catch:{ all -> 0x0066 }
                    return
                L_0x005b:
                    if (r2 == 0) goto L_0x0065
                    r2.close()     // Catch:{ IOException -> 0x0061 }
                    goto L_0x0065
                L_0x0061:
                    r1 = move-exception
                    r1.printStackTrace()     // Catch:{ all -> 0x0066 }
                L_0x0065:
                    throw r0     // Catch:{ all -> 0x0066 }
                L_0x0066:
                    r0 = move-exception
                    monitor-exit(r4)     // Catch:{ all -> 0x0066 }
                    throw r0
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.setOutputFormat():void");
            }

            public void send360Data(byte[] bArr) {
                byte[] bArr2 = new byte[(bArr.length + 3)];
                bArr2[0] = 48;
                bArr2[1] = 46;
                byte b = 0;
                for (int i = 0; i < bArr.length; i++) {
                    bArr2[i + 2] = bArr[i];
                    b = (byte) (b + bArr[i]);
                }
                bArr2[bArr.length + 2] = (byte) (b ^ 255);
                SendThread sendThread = this.mSendThread;
                if (sendThread != null) {
                    sendThread.notifyToSend(bArr2);
                }
            }

            public void switchCamera(int i) {
                send360Data(new byte[]{25, 1, (byte) i});
            }

            public void checkLanguage() {
                String language = Locale.getDefault().getLanguage();
                String country = Locale.getDefault().getCountry();
                if ("3".equals(this.mIcChecked)) {
                    if ("zh".equals(language) && "CN".equals(country)) {
                        LocalePicker.updateLocale(Locale.US);
                    }
                } else if (!"zh".equals(language) || !"CN".equals(country)) {
                    LocalePicker.updateLocale(Locale.SIMPLIFIED_CHINESE);
                }
            }

            public boolean getAutoUpgradeMCU() {
                return this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.SYS_AUTO_UPGRADE_MCU, true);
            }

            public void setAutoUpgradeMCU(boolean z) {
                this.mSysProviderOpt.updateRecord(SysProviderOpt.SYS_AUTO_UPGRADE_MCU, z ? "1" : "0");
            }

            /* access modifiers changed from: private */
            public boolean isOtherTop() {
                String topPackageName = EventUtils.getTopPackageName(this);
                boolean z = topPackageName != null && !topPackageName.startsWith("com.szchoiceway") && !topPackageName.startsWith("com.choiceway") && !topPackageName.equals("com.android.launcher3") && !topPackageName.equals(EventUtils.LIDIAN_MODE_PACKAGE_NAME);
                boolean z2 = this.m_iBTStatus <= 3;
                if (!z || !z2) {
                    return false;
                }
                return true;
            }

            public boolean isLetterTop() {
                return EventUtils.LETTER_CARPLAY_MODE_PACKAGE_NAME.equals(EventUtils.getTopPackageName(mAppContext)) && this.mConnectState == 1;
            }

            private boolean is360Top() {
                return EventUtils.LIDIAN_MODE_PACKAGE_NAME.equals(EventUtils.getTopPackageName(mAppContext)) || this.show360Dialog;
            }

            public void sendLetterKeyCode(int i) {
                Log.d(TAG, "sendLetterKeyCode " + i);
                this.letterInstance.linkControl(mAppContext, i);
            }

            /* JADX WARNING: Removed duplicated region for block: B:25:0x0039 A[SYNTHETIC, Splitter:B:25:0x0039] */
            /* JADX WARNING: Removed duplicated region for block: B:30:0x0044 A[SYNTHETIC, Splitter:B:30:0x0044] */
            /* JADX WARNING: Removed duplicated region for block: B:36:? A[RETURN, SYNTHETIC] */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            private void closeAdb(boolean r4) {
                /*
                    r3 = this;
                    if (r4 == 0) goto L_0x0005
                    java.lang.String r4 = "host"
                    goto L_0x0007
                L_0x0005:
                    java.lang.String r4 = "peripheral"
                L_0x0007:
                    java.io.File r0 = new java.io.File
                    java.lang.String r1 = "/sys/devices/platform/soc/4e00000.ssusb/mode"
                    r0.<init>(r1)
                    boolean r1 = r0.exists()
                    if (r1 != 0) goto L_0x0015
                    return
                L_0x0015:
                    r1 = 0
                    java.io.FileOutputStream r2 = new java.io.FileOutputStream     // Catch:{ FileNotFoundException -> 0x0033 }
                    r2.<init>(r0)     // Catch:{ FileNotFoundException -> 0x0033 }
                    byte[] r4 = r4.getBytes()     // Catch:{ IOException -> 0x0029 }
                    r2.write(r4)     // Catch:{ IOException -> 0x0029 }
                    goto L_0x002d
                L_0x0023:
                    r4 = move-exception
                    r1 = r2
                    goto L_0x0042
                L_0x0026:
                    r4 = move-exception
                    r1 = r2
                    goto L_0x0034
                L_0x0029:
                    r4 = move-exception
                    r4.printStackTrace()     // Catch:{ FileNotFoundException -> 0x0026, all -> 0x0023 }
                L_0x002d:
                    r2.close()     // Catch:{ IOException -> 0x003d }
                    goto L_0x0041
                L_0x0031:
                    r4 = move-exception
                    goto L_0x0042
                L_0x0033:
                    r4 = move-exception
                L_0x0034:
                    r4.printStackTrace()     // Catch:{ all -> 0x0031 }
                    if (r1 == 0) goto L_0x0041
                    r1.close()     // Catch:{ IOException -> 0x003d }
                    goto L_0x0041
                L_0x003d:
                    r4 = move-exception
                    r4.printStackTrace()
                L_0x0041:
                    return
                L_0x0042:
                    if (r1 == 0) goto L_0x004c
                    r1.close()     // Catch:{ IOException -> 0x0048 }
                    goto L_0x004c
                L_0x0048:
                    r0 = move-exception
                    r0.printStackTrace()
                L_0x004c:
                    throw r4
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.closeAdb(boolean):void");
            }

            private boolean checkAdb() {
                String str;
                File file2 = new File("/sys/devices/platform/soc/4e00000.ssusb/mode");
                if (!file2.exists()) {
                    return true;
                }
                try {
                    BufferedReader bufferedReader = new BufferedReader(new FileReader(file2));
                    StringBuilder sb = new StringBuilder();
                    while (true) {
                        String readLine = bufferedReader.readLine();
                        if (readLine == null) {
                            break;
                        }
                        sb.append(readLine);
                    }
                    str = sb.toString();
                } catch (IOException e) {
                    e.printStackTrace();
                    str = BuildConfig.FLAVOR;
                }
                return !"peripheral".equals(str);
            }

            public void runCmd(String str) {
                SystemProperties.set("sys.apk_path", str);
                SystemProperties.set("ctl.start", "install_apk");
            }

            public boolean getCmdResult() {
                return SystemProperties.get("sys.apk_path").equals("true");
            }

            private boolean isAuxModeBT() {
                String topPackageName = EventUtils.getTopPackageName(this);
                Log.d(TAG, "isAuxMode topPackage = " + topPackageName);
                return "com.szchoiceway.ksw_aux".equals(topPackageName) || "com.szchoiceway.ksw_cmmb".equals(topPackageName) || EventUtils.DVD_KSW_MODE_PACKAGE_NAME.equals(topPackageName) || "com.szchoiceway.ksw_fc".equals(topPackageName) || "com.szchoiceway.ksw_dvr".equals(topPackageName);
            }

            /* access modifiers changed from: private */
            public boolean isAuxModeTxz() {
                return this.mTxzDialogShow && (this.mValidMode == EventUtils.eSrcMode.SRC_AUX || this.mValidMode == EventUtils.eSrcMode.SRC_CMMB || this.mValidMode == EventUtils.eSrcMode.SRC_FRONT_CAMERA || this.isDvrMode);
            }

            private boolean isAuxModeLetter() {
                return isLetterTop() && (this.mValidMode == EventUtils.eSrcMode.SRC_AUX || this.mValidMode == EventUtils.eSrcMode.SRC_CMMB || this.mValidMode == EventUtils.eSrcMode.SRC_FRONT_CAMERA || this.isDvrMode);
            }

            private boolean isAuxMode360() {
                return is360Top() && (this.mValidMode == EventUtils.eSrcMode.SRC_AUX || this.mValidMode == EventUtils.eSrcMode.SRC_CMMB || this.mValidMode == EventUtils.eSrcMode.SRC_FRONT_CAMERA || this.isDvrMode);
            }

            private boolean isAuxMode() {
                return this.mValidMode == EventUtils.eSrcMode.SRC_AUX || this.mValidMode == EventUtils.eSrcMode.SRC_CMMB || this.mValidMode == EventUtils.eSrcMode.SRC_FRONT_CAMERA || this.isDvrMode;
            }

            public GPSMonitor getGPSMonitor() {
                return this.mGPSMonitor;
            }

            public boolean checkNetworkAvailable() {
                NetworkInfo[] allNetworkInfo;
                ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService("connectivity");
                if (!(connectivityManager == null || (allNetworkInfo = connectivityManager.getAllNetworkInfo()) == null)) {
                    for (int i = 0; i < allNetworkInfo.length; i++) {
                        if (allNetworkInfo[i].getState() == NetworkInfo.State.CONNECTED) {
                            NetworkInfo networkInfo = allNetworkInfo[i];
                            if (networkInfo.getType() == 1 || networkInfo.getType() == 0) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            }

            private void enterMusic() {
                String recordValue = this.mSysProviderOpt.getRecordValue(SysProviderOpt.MUSIC_PACKAGENAME, EventUtils.MUSIC_MODE_PACKAGE_NAME);
                String recordValue2 = this.mSysProviderOpt.getRecordValue(SysProviderOpt.MUSIC_ACTIVITYNAME, EventUtils.MUSIC_MODE_CLASS_NAME);
                if (!EventUtils.MUSIC_MODE_PACKAGE_NAME.equals(recordValue)) {
                    sendMode(EventUtils.eSrcMode.SRC_MUSIC, false);
                }
                Log.d(TAG, "musicPackage = " + recordValue + ", musicMainClass = " + recordValue2);
                EventUtils.startActivityIfNotRuning(this, recordValue, recordValue2);
            }

            public void enterVideo() {
                String recordValue = this.mSysProviderOpt.getRecordValue(SysProviderOpt.VIDEO_PACKAGENAME, EventUtils.MOVIE_MODE_PACKAGE_NAME);
                String recordValue2 = this.mSysProviderOpt.getRecordValue(SysProviderOpt.VIDEO_ACTIVITYNAME, EventUtils.MOVIE_MODE_CLASS_NAME);
                if (!EventUtils.MOVIE_MODE_PACKAGE_NAME.equals(recordValue)) {
                    sendMode(EventUtils.eSrcMode.SRC_MOVIE, false);
                }
                Log.d(TAG, "videoPackage = " + recordValue + ", videoMainClass = " + recordValue2);
                EventUtils.startActivityIfNotRuning(this, recordValue, recordValue2);
            }

            public void showTipString(int i, int i2) {
                Toast toast = this.mTip;
                if (toast != null) {
                    toast.cancel();
                }
                Toast makeText = Toast.makeText(getApplicationContext(), i, 0);
                this.mTip = makeText;
                makeText.setDuration(i2);
                this.mTip.show();
            }

            public void showTipString(String str, int i) {
                Toast toast = this.mTip;
                if (toast != null) {
                    toast.cancel();
                }
                Toast makeText = Toast.makeText(getApplicationContext(), str, 0);
                this.mTip = makeText;
                makeText.setDuration(i);
                this.mTip.show();
            }

            public void startECar() {
                if (SysProviderOpt.getInstance(this).getRecordBoolean(SysProviderOpt.KSW_HAVE_ECAR, false)) {
                    enableApk2("com.ecar.assistantnew", true);
                    ComponentName componentName = new ComponentName("com.ecar.assistantnew", "com.ecar.assistantnew.service.BootService");
                    Intent intent = new Intent();
                    intent.setComponent(componentName);
                    startService(intent);
                    return;
                }
                enableApk2("com.ecar.assistantnew", false);
            }

            private void startJobService() {
                Log.d(TAG, "startJobService");
                ComponentName componentName = new ComponentName(BuildConfig.APPLICATION_ID, "com.szchoiceway.eventcenter.JobWakeUpService");
                Intent intent = new Intent();
                intent.setComponent(componentName);
                startServiceAsUser(intent, UserHandle.CURRENT);
            }

            private void start360Ld() {
                if (this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_CAMERA_SELECTION, 1) == 3) {
                    Log.d(TAG, "start360Ld");
                    SystemProperties.set("sys.acc.state", "1");
                    Intent intent = new Intent();
                    intent.setComponent(new ComponentName(EventUtils.LIDIAN_MODE_PACKAGE_NAME, EventUtils.LIDIAN_MODE_SERVICE_NAME));
                    startServiceAsUser(intent, UserHandle.CURRENT);
                }
            }

            /* access modifiers changed from: private */
            public void start360XYQ() {
                if (this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_CAMERA_SELECTION, 1) == 3) {
                    Log.d(TAG, "start360XYQ");
                    if (!"1".equals(SystemProperties.get("sys.acc.state"))) {
                        SystemProperties.set("sys.acc.state", "1");
                    }
                    if (!"1".equals(SystemProperties.get("sys.start.state"))) {
                        SystemProperties.set("sys.start.state", "1");
                    }
                    if (!this.hasLauncherInit360) {
                        this.mEventHandler.postDelayed(new Runnable() {
                            public final void run() {
                                EventService.this.start360XYQ();
                            }
                        }, 500);
                        return;
                    }
                    Intent intent = new Intent();
                    intent.setComponent(new ComponentName(EventUtils.XYQ_MODE_PACKAGE_NAME, EventUtils.XYQ_MODE_SERVICE_NAME));
                    startServiceAsUser(intent, UserHandle.CURRENT);
                    this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_360_SERVICE_XYQ_CHECK);
                    this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_360_SERVICE_XYQ_CHECK, 1500);
                }
            }

            /* access modifiers changed from: private */
            public void startServices() {
                int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_CAMERA_SELECTION, 1);
                boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_HAS_ENABLE_360_APK, false);
                if (recordInteger == 3) {
                    if (Build.VERSION.SDK_INT == 31) {
                        this.cameraUtil = new CameraUtil(this);
                    } else {
                        this.cameraUtilXYQ = new CameraUtilXYQ(this);
                    }
                    if (!recordBoolean) {
                        try {
                            enableApk2(EventUtils.XYQ_MODE_PACKAGE_NAME, true);
                            enableApk2(EventUtils.LIDIAN_MODE_PACKAGE_NAME, true);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        this.mSysProviderOpt.setRecordDefaultValue(SysProviderOpt.KSW_HAS_ENABLE_360_APK, "1");
                        Log.d(TAG, "startServices enable360Apk");
                    }
                }
                if (Build.VERSION.SDK_INT == 33) {
                    String str = SystemProperties.get("persist.ivicar.avm.state", BuildConfig.FLAVOR);
                    if (recordInteger == 3) {
                        if (!"1".equals(str)) {
                            SystemProperties.set("persist.ivicar.avm.state", "1");
                        }
                        start360XYQ();
                    } else if (!"0".equals(str)) {
                        SystemProperties.set("persist.ivicar.avm.state", "0");
                    }
                } else if (recordInteger == 3) {
                    start360Ld();
                }
                boolean isServiceRunning = EventUtils.isServiceRunning("com.carletter.car.service.CarletterService", this);
                Log.d(TAG, "letterStart = " + isServiceRunning);
                if (!isServiceRunning) {
                    Intent intent = new Intent();
                    intent.setComponent(new ComponentName(EventUtils.LETTER_CARPLAY_MODE_PACKAGE_NAME, "com.carletter.car.service.CarletterService"));
                    startService(intent);
                }
                Intent intent2 = new Intent();
                intent2.setComponent(new ComponentName("com.szchoiceway.testtools", "com.szchoiceway.testtools.TestToolsService"));
                startService(intent2);
                if (Build.VERSION.SDK_INT > 31) {
                    if (!this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_HAVE_HICAR, false)) {
                        SystemProperties.set("rw.zlink.disable.features", "hi");
                    } else {
                        Intent intent3 = new Intent();
                        intent3.setComponent(new ComponentName(EventUtils.HICAR_MODE_PACKAGE_NAME, "com.huawei.hicar.app.HiCarService"));
                        startService(intent3);
                    }
                    Log.d(TAG, "ctl start zlink5");
                    try {
                        SystemProperties.set("ctl.start", "zlink5");
                    } catch (Exception e2) {
                        e2.printStackTrace();
                    }
                    Intent intent4 = new Intent();
                    intent4.setPackage(EventUtils.ZLINK_MODE_PACKAGE_NAME);
                    intent4.setAction("zjinnova.android.intent.action.ZLINK_SERVICE");
                    startService(intent4);
                    Intent intent5 = new Intent();
                    intent5.setComponent(new ComponentName(EventUtils.CARLINK_MODE_PACKAGE_NAME, "com.ucarhu.carlink.UCarService"));
                    startService(intent5);
                }
                this.mEventHandler.postDelayed(new Runnable() {
                    public final void run() {
                        EventService.this.startVoiceService();
                    }
                }, 0);
                startECar();
                startJobService();
            }

            public void showCalibrationWnd() {
                if (!this.isCalibrationShown) {
                    WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams(-1, -1);
                    layoutParams.type = 2021;
                    layoutParams.flags = 1288;
                    layoutParams.format = 1;
                    CalibrationView calibrationView = new CalibrationView(this);
                    this.mCalibrationView = calibrationView;
                    calibrationView.setCallBack(this);
                    wm.addView(this.mCalibrationView, layoutParams);
                    this.isCalibrationShown = true;
                }
            }

            public void hideCalibrationView() {
                CalibrationView calibrationView;
                if (this.isCalibrationShown && (calibrationView = this.mCalibrationView) != null && calibrationView.getParent() != null) {
                    wm.removeView(this.mCalibrationView);
                    this.isCalibrationShown = false;
                }
            }

            public void exitProgram() {
                hideCalibrationView();
            }

            public void setTouchInfor(String str) {
                Log.d(TAG, "setTouchInfor param = " + str);
                try {
                    FileOutputStream fileOutputStream = new FileOutputStream(new File("/sys/touch_type/touch_type"));
                    fileOutputStream.write(str.getBytes());
                    fileOutputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            public void restartZXWMedia() {
                new Thread(new Runnable() {
                    public void run() {
                        try {
                            EventUtils.killProcess("com.szchoiceway.zxwmedia");
                            Thread.sleep(1000);
                            Intent intent = new Intent();
                            intent.setAction("com.szchoiceway.zxwmedia.ScanFileService");
                            intent.setPackage("com.szchoiceway.zxwmedia");
                            intent.setComponent(new ComponentName("com.szchoiceway.zxwmedia", "com.szchoiceway.zxwmedia.ScanFileService"));
                            EventService.this.startForegroundService(intent);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }).start();
            }

            private void enterNavi() {
                boolean z = Locale.getDefault().getLanguage().equals("zh") && Locale.getDefault().getCountry().equals("CN");
                String str = "com.szchoiceway.navigation";
                String recordValue = this.mSysProviderOpt.getRecordValue(SysProviderOpt.NAV_PACKAGENAME, str);
                SysProviderOpt sysProviderOpt = this.mSysProviderOpt;
                String str2 = EventUtils.NAV_MODE_CLASS_NAME;
                String recordValue2 = sysProviderOpt.getRecordValue(SysProviderOpt.NAV_ACTIVITYNAME, str2);
                if ((!z || !EventUtils.GOOGLE_MAP_MODE_PACKAGE_NAME.equals(recordValue)) && EventUtils.getInstallStatus(this, recordValue)) {
                    str = recordValue;
                    str2 = recordValue2;
                }
                EventUtils.startActivityIfNotRuning(this, str, str2);
            }

            public void sendGearMessageToLD() {
                CameraUtil cameraUtil2 = this.cameraUtil;
                if (cameraUtil2 != null) {
                    cameraUtil2.sendGearMessage(this.gearType);
                }
            }

            public void sendGearMessageToXYQ() {
                CameraUtilXYQ cameraUtilXYQ2 = this.cameraUtilXYQ;
                if (cameraUtilXYQ2 == null) {
                    return;
                }
                if (this.gearType == 3) {
                    if (!cameraUtilXYQ2.getReverse()) {
                        this.cameraUtilXYQ.enterBackCar();
                    }
                } else if (cameraUtilXYQ2.getReverse()) {
                    this.cameraUtilXYQ.exitBackCar();
                }
            }

            public void sendLightMessageToLD() {
                CameraUtil cameraUtil2 = this.cameraUtil;
                if (cameraUtil2 != null) {
                    cameraUtil2.sendLightMessage2(this.bILLSignal, this.leftLight, this.rightLight);
                }
            }

            public void sendLightMessageToXYQ() {
                CameraUtilXYQ cameraUtilXYQ2 = this.cameraUtilXYQ;
                if (cameraUtilXYQ2 != null) {
                    cameraUtilXYQ2.sendLightMessage(this.leftLight, this.rightLight);
                }
            }

            public void sendSpeedMessageToLD() {
                if (this.cameraUtil == null) {
                    return;
                }
                if (this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_DISTACNE_UNIT, 0) == 1) {
                    this.cameraUtil.sendSpeedMessage(1, (int) (((double) this.itvShunShiSuDu) * 0.62d));
                    return;
                }
                this.cameraUtil.sendSpeedMessage(0, this.itvShunShiSuDu);
            }

            public void sendSpeedMessageToXYQ() {
                if (this.cameraUtilXYQ == null) {
                    return;
                }
                if (this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_DISTACNE_UNIT, 0) == 1) {
                    this.cameraUtilXYQ.sendSpeedMessage(1, (int) (((double) this.itvShunShiSuDu) * 0.62d));
                    return;
                }
                this.cameraUtilXYQ.sendSpeedMessage(0, this.itvShunShiSuDu);
            }

            public void sendRadarMessageToLD() {
                CameraUtil cameraUtil2 = this.cameraUtil;
                if (cameraUtil2 != null) {
                    cameraUtil2.sendRadarMessage(this.radarFrontLeft, this.radarFrontLeftMiddle, this.radarFrontRightMiddle, this.radarFrontRight, this.radarBackLeft, this.radarBackLeftMiddle, this.radarBackRightMiddle, this.radarBackRight);
                }
            }

            public void sendRadarMessageToXYQ() {
                CameraUtilXYQ cameraUtilXYQ2 = this.cameraUtilXYQ;
                if (cameraUtilXYQ2 != null) {
                    cameraUtilXYQ2.sendRadarMessage(this.radarFrontLeft, this.radarFrontLeftMiddle, this.radarFrontRightMiddle, this.radarFrontRight, this.radarBackLeft, this.radarBackLeftMiddle, this.radarBackRightMiddle, this.radarBackRight, this.itvShunShiSuDu);
                }
            }

            public void sendWheelMessageToLD() {
                CameraUtil cameraUtil2 = this.cameraUtil;
                if (cameraUtil2 != null) {
                    int i = (this.angle * 1000) / 6;
                    this.angle = i;
                    cameraUtil2.sendWheelMessage(((float) i) / 1000.0f, this.angleRight);
                }
            }

            public void sendWheelMessageToXYQ() {
                CameraUtilXYQ cameraUtilXYQ2 = this.cameraUtilXYQ;
                if (cameraUtilXYQ2 != null) {
                    int i = (int) (((((float) this.angle) * 1.0f) * 38.0f) / 540.0f);
                    this.angle = i;
                    cameraUtilXYQ2.sendWheelMessage(i, this.angleRight);
                }
            }

            public void sendDoorMessageToLD() {
                CameraUtil cameraUtil2 = this.cameraUtil;
                if (cameraUtil2 != null) {
                    cameraUtil2.sendDoorMessage(this.doorLeftFront, this.doorRightFront, this.doorLeftBack, this.doorRightBack, this.doorFront, this.doorBack);
                }
            }

            public void sendDoorMessageToXYQ() {
                CameraUtilXYQ cameraUtilXYQ2 = this.cameraUtilXYQ;
                if (cameraUtilXYQ2 != null) {
                    cameraUtilXYQ2.sendDoorMessage(this.doorLeftFront, this.doorRightFront, this.doorLeftBack, this.doorRightBack);
                }
            }

            public void sendPMessageToLD() {
                CameraUtil cameraUtil2 = this.cameraUtil;
                if (cameraUtil2 != null) {
                    cameraUtil2.sendPMessage(this.b_kesaiwei_bPKey);
                }
            }

            public void sendSpeechToLD(String str) {
                CameraUtil cameraUtil2 = this.cameraUtil;
                if (cameraUtil2 != null) {
                    cameraUtil2.send360SpeechBroadcast(str);
                }
            }

            public void sendSpeechToXYQ(String str) {
                CameraUtilXYQ cameraUtilXYQ2 = this.cameraUtilXYQ;
                if (cameraUtilXYQ2 != null) {
                    cameraUtilXYQ2.send360SpeechBroadcast(str);
                }
            }

            public void sendAllMessageToLD() {
                Log.d(TAG, "sendAllMessageToLD");
                sendGearMessageToLD();
                sendLightMessageToLD();
                sendSpeedMessageToLD();
                sendRadarMessageToLD();
                sendWheelMessageToLD();
                sendDoorMessageToLD();
                sendPMessageToLD();
            }

            public void sendAllMessageToXYQ() {
                sendGearMessageToXYQ();
                sendSpeedMessageToXYQ();
                sendWheelMessageToXYQ();
                sendDoorMessageToXYQ();
                sendLightMessageToXYQ();
                sendRadarMessageToXYQ();
            }

            public void setWifiApEnabled(boolean z) {
                Log.d(TAG, "setWifiApEnabled " + z);
                ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService("connectivity");
                if (z) {
                    connectivityManager.startTethering(0, false, new ConnectivityManager.OnStartTetheringCallback() {
                        public void onTetheringStarted() {
                            Log.i(EventService.TAG, "setWiFiApEnable onTetheringStarted: ");
                        }

                        public void onTetheringFailed() {
                            Log.i(EventService.TAG, "setWiFiApEnable onTetheringFailed: ");
                        }
                    });
                } else {
                    connectivityManager.stopTethering(0);
                }
            }

            public void setWifiEnabled(boolean z) {
                ((WifiManager) getSystemService("wifi")).setWifiEnabled(z);
            }

            private void stopMediaApps() {
                sendKeyDownUpSync(127);
                sendKeyDownUpSync(86);
            }

            private boolean bLauncherIsResume() {
                return "com.android.launcher3".equals(EventUtils.getTopPackageName(mAppContext));
            }

            public void readyOk360() {
                if (this.cameraUtil != null) {
                    this.init360 = true;
                    this.mEventHandler.postDelayed(new Runnable() {
                        public final void run() {
                            EventService.this.sendAllMessageToLD();
                        }
                    }, 1500);
                }
                if (this.cameraUtilXYQ != null) {
                    sendAllMessageToXYQ();
                    this.mEventHandler.postDelayed(new Runnable() {
                        public final void run() {
                            EventService.this.lambda$readyOk360$7$EventService();
                        }
                    }, 2500);
                }
            }

            public /* synthetic */ void lambda$readyOk360$7$EventService() {
                this.init360 = true;
            }

            public void virtualCenterClick() {
                int i = this.screenWidth / 2;
                int i2 = this.screenHeight / 2;
                Log.d(TAG, "virtualClick x = " + i + ", y = " + i2);
                sendKSW_0x00_0x6B((byte) 2, i, i2, 0);
            }

            public void virtualRTClick() {
                sendKSW_0x00_0x6B((byte) 2, this.screenWidth, 1, 0);
            }

            public void enableApk(String str, boolean z) {
                Log.d(TAG, "disablePkgApk PkgName = " + str + ", bEnable = " + z);
                new Thread(new Runnable(z, str) {
                    public final /* synthetic */ boolean f$1;
                    public final /* synthetic */ String f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run() {
                        EventService.this.lambda$enableApk$8$EventService(this.f$1, this.f$2);
                    }
                }).start();
            }

            public /* synthetic */ void lambda$enableApk$8$EventService(boolean z, String str) {
                StringBuilder sb;
                String str2;
                if (z) {
                    sb = new StringBuilder();
                    str2 = "pm enable ";
                } else {
                    sb = new StringBuilder();
                    str2 = "pm disable ";
                }
                sb.append(str2);
                sb.append(str);
                runCmd(sb.toString());
                do {
                } while (!getCmdResult());
            }

            private void enableApk2(String str, boolean z) {
                Log.i(TAG, "enableApk2 packageName: " + str + ", enable = " + z);
                try {
                    PackageManager packageManager2 = getPackageManager();
                    if (packageManager2 != null) {
                        packageManager2.setApplicationEnabledSetting(packageManager2.getApplicationInfo(str, 128).packageName, z ? 1 : 2, 0);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            private boolean isEffectiveMode(int i) {
                return i <= EventUtils.eSrcMode.SRC_AUX.getIntValue() || i == EventUtils.eSrcMode.SRC_FRONT_CAMERA.getIntValue();
            }

            public void show360Dialog(boolean z) {
                sendBackCarStateToZlink(z);
                if (this.show360Dialog != z) {
                    this.show360Dialog = z;
                    if (z) {
                        Log.d("show360Dialog", "hasRemoveAux = " + this.hasRemoveAux);
                        send360Status(true);
                        if (this.b_Original_View) {
                            this.currentType = 1;
                        } else if (this.m_isOff_BackLight_KSW) {
                            this.currentType = 2;
                            backLightOn_KSW();
                        } else if (isAuxMode() || this.speakWhenAUXCarplay || this.speakWhenAUXBT) {
                            this.currentType = 3;
                            exitAux();
                        }
                    } else {
                        send360Status(false);
                        this.hide360Dialog = true;
                        this.mEventHandler.postDelayed(new Runnable() {
                            public final void run() {
                                EventService.this.lambda$show360Dialog$9$EventService();
                            }
                        }, 5000);
                        Log.d("hide360Dialog", "currentType = " + this.currentType + ", mTelephoneState = " + this.mTelephoneState + ", m_iBTStatus = " + this.m_iBTStatus);
                        int i = this.currentType;
                        if (i != 1) {
                            if (i == 2) {
                                backLightOff_KSW();
                            } else if (i == 3 && !this.speakWhenAUXBT && !this.speakWhenAUXCarplay) {
                                backAux();
                            }
                        }
                        this.currentType = 0;
                    }
                }
            }

            public /* synthetic */ void lambda$show360Dialog$9$EventService() {
                this.hide360Dialog = false;
            }

            private void exitAux() {
                if (!this.hasRemoveAux) {
                    this.hasRemoveAux = true;
                    if (this.isDvrMode) {
                        this.exitMode = EventUtils.eSrcMode.SRC_DVR;
                    } else {
                        this.exitMode = this.mValidMode;
                    }
                    sendBroadcast(new Intent(EventUtils.ZXW_ACTION_EXIT_AUX));
                    this.exitAuxTime = System.currentTimeMillis();
                }
            }

            private void backAux() {
                Log.d(TAG, "backAux");
                if (this.hasRemoveAux) {
                    this.hasRemoveAux = false;
                    postRunModeActivity(this.exitMode.getIntValue());
                    this.exitMode = EventUtils.eSrcMode.SRC_NONE;
                }
            }

            public void send360Status(boolean z) {
                sendKSW_0x00_0x69((byte) 21, z ? (byte) 1 : 0, (byte) 0);
            }

            /* access modifiers changed from: private */
            public void start0x15EventMode(byte[] bArr) {
                Log.d(TAG, "start0x15EventMode hasLauncherInit = " + this.hasLauncherInit);
                if (!this.hasLauncherInit) {
                    this.mEventHandler.removeMessages(EventUtils.HANDLER_DELAY_0X15_EVENT2);
                    Message message = new Message();
                    message.what = EventUtils.HANDLER_DELAY_0X15_EVENT2;
                    message.obj = bArr;
                    this.mEventHandler.sendMessageDelayed(message, 1000);
                    return;
                }
                String topPackageName = EventUtils.getTopPackageName(mAppContext);
                Log.d(TAG, "start0x15EventMode topPackageName = " + topPackageName + ", , init360 = " + this.init360 + ", show360Dialog = " + this.show360Dialog);
                int i = this.start0x15Time + 1;
                this.start0x15Time = i;
                if (i > 90) {
                    this.start0x15Time = 0;
                    this.mEventHandler.removeMessages(EventUtils.HANDLER_DELAY_0X15_EVENT2);
                    return;
                }
                if (!(this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_SYS_CAMERA_SELECTION, 0) == 3) || (this.gearType != 3 && this.init360 && !this.show360Dialog && !EventUtils.getTopPackageName(this).equals(EventUtils.LIDIAN_MODE_PACKAGE_NAME) && !EventUtils.getTopPackageNameUnfiltered(this).equals(EventUtils.XYQ_MODE_PACKAGE_NAME))) {
                    if (this.carplayAutoConnect) {
                        if (Build.VERSION.SDK_INT == 31) {
                            if (CarletterInterface.getInstance().isAllowAutoBootCarplay(this)) {
                                return;
                            }
                        } else if (Arrays.asList(this.carplayPkgLst).contains(topPackageName) || this.show360CarplayConnected) {
                            return;
                        }
                    }
                    boolean z = this.m_iBTStatus > 3 || this.thirdPhoneOn;
                    Log.d(TAG, "start0x15EventMode m_iBTStatus = " + this.m_iBTStatus + ", thirdPhoneOn = " + this.thirdPhoneOn);
                    if (z) {
                        this.mEventHandler.removeMessages(EventUtils.HANDLER_DELAY_0X15_EVENT2);
                        Message message2 = new Message();
                        message2.what = EventUtils.HANDLER_DELAY_0X15_EVENT2;
                        message2.obj = bArr;
                        this.mEventHandler.sendMessageDelayed(message2, 1000);
                        return;
                    }
                    if (bArr[4] == 1) {
                        ksw_original_end();
                        this.iInterfaceStatus_KSW = 1;
                    } else if (bArr[4] == 2) {
                        ksw_original_start();
                        this.iInterfaceStatus_KSW = 2;
                    }
                    if (this.b_Conn_KSW) {
                        this.ksw_m_b_auto_btMusic = false;
                        return;
                    }
                    if (bArr[5] == 1 && this.mValidMode != EventUtils.eSrcMode.SRC_MUSIC) {
                        enterMusic();
                    } else if (bArr[5] == 2 && this.mValidMode != EventUtils.eSrcMode.SRC_MOVIE) {
                        enterVideo();
                    } else if (bArr[5] == 3 && this.mValidMode != EventUtils.eSrcMode.SRC_BT) {
                        postRunModeActivity(EventUtils.eSrcMode.SRC_BT.getIntValue());
                    } else if (bArr[5] == 4 && this.mValidMode != EventUtils.eSrcMode.SRC_BTMUSIC) {
                        postRunModeActivity(EventUtils.eSrcMode.SRC_BTMUSIC.getIntValue());
                    } else if (bArr[5] == 5 && !this.isDvrMode) {
                        Log.i(TAG, "--->>> KSW memory dvr init360 = " + this.init360 + ", show360Dialog = " + this.show360Dialog);
                        if (this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KESAIWEI_RECORD_DVR, 0) == 1) {
                            EventUtils.startActivityIfNotRuning(getApplicationContext(), "com.szchoiceway.ksw_dvr", "com.szchoiceway.ksw_dvr.MainActivity");
                            this.iInterfaceStatus_KSW = 5;
                        }
                    } else if (bArr[5] == 6 && this.mValidMode != EventUtils.eSrcMode.SRC_AUX) {
                        Log.i(TAG, "--->>> KSW memory aux init360 = " + this.init360 + ", show360Dialog = " + this.show360Dialog);
                        if (this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_HAVE_AUX, false)) {
                            EventUtils.startActivityIfNotRuning(getApplicationContext(), "com.szchoiceway.ksw_aux", "com.szchoiceway.ksw_aux.MainActivity");
                            this.iInterfaceStatus_KSW = 6;
                        }
                    } else if (bArr[5] == 7) {
                        if (!EventUtils.startActivityIfNotRuning2(getApplicationContext(), EventUtils.PHONEAPP_MODE_PACKAGE_NAME, EventUtils.PHONEAPP_MODE_CLASS_NAME)) {
                            EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.PHONEAPP_MODE_PACKAGE_NAME, EventUtils.PHONEAPP_MODE_CLASS_NAME2);
                        }
                    } else if (bArr[5] == 8 && this.mValidMode != EventUtils.eSrcMode.SRC_DVD) {
                        Log.i(TAG, "--->>> KSW memory dvd init360 = " + this.init360 + ", show360Dialog = " + this.show360Dialog);
                        int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_HAVE_DVD, 0);
                        if (recordInteger == 1) {
                            EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.DVD_KSW_MODE_PACKAGE_NAME, EventUtils.DVD_KSW_MODE_CLASS_NAME);
                            this.iInterfaceStatus_KSW = 8;
                        } else if (recordInteger == 2) {
                            EventUtils.startActivityIfNotRuning(getApplicationContext(), EventUtils.DVD_MODE_PACKAGE_NAME, EventUtils.DVD_MODE_CLASS_NAME);
                            this.iInterfaceStatus_KSW = 12;
                        }
                    } else if (bArr[5] == 9 && this.mValidMode != EventUtils.eSrcMode.SRC_CMMB) {
                        Log.i(TAG, "--->>> KSW memory dtv init360 = " + this.init360 + ", show360Dialog = " + this.show360Dialog);
                        if (this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_HAVE_TV, false)) {
                            EventUtils.startActivityIfNotRuning(getApplicationContext(), "com.szchoiceway.ksw_cmmb", "com.szchoiceway.ksw_cmmb.MainActivity");
                            this.iInterfaceStatus_KSW = 9;
                        }
                    } else if (bArr[5] == 11 && this.mValidMode != EventUtils.eSrcMode.SRC_FRONT_CAMERA && this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_HAVE_FRONT_CAMERA, false)) {
                        EventUtils.startActivityIfNotRuning(getApplicationContext(), "com.szchoiceway.ksw_fc", "com.szchoiceway.ksw_fc.MainActivity");
                        this.iInterfaceStatus_KSW = 11;
                    }
                    this.start0x15Time = 0;
                    this.mEventHandler.removeMessages(EventUtils.HANDLER_DELAY_0X15_EVENT2);
                    return;
                }
                this.mEventHandler.removeMessages(EventUtils.HANDLER_DELAY_0X15_EVENT2);
                Message message3 = new Message();
                message3.what = EventUtils.HANDLER_DELAY_0X15_EVENT2;
                message3.obj = bArr;
                this.mEventHandler.sendMessageDelayed(message3, 1000);
            }

            public void thirdPhoneOn() {
                this.thirdPhoneOn = true;
                Log.d(TAG, "thirdPhoneOn");
                if (this.haveSendNavVoice) {
                    sendKSW_0x00_0x69((byte) 19, (byte) 0, (byte) 0);
                    this.haveSendNavVoice = false;
                }
                if (isAuxMode() || this.currentType == 3) {
                    this.speakWhenAUXCarplay = true;
                    exitAux();
                }
                if (this.m_isOff_BackLight_KSW) {
                    backLightOn_KSW();
                }
                if (this.mConnectMode != 3) {
                    sendKSW_0x00_0x63(2, 2);
                    sendKSW_0x00_0x63(1, 2);
                }
                muteMusicAndAlarm(true);
            }

            public void thirdPhoneOff(boolean z) {
                this.thirdPhoneOn = false;
                Log.d(TAG, "thirdPhoneOff");
                if (this.speakWhenAUXCarplay) {
                    this.speakWhenAUXCarplay = false;
                    if (!this.show360Dialog) {
                        backAux();
                    }
                }
                if (this.mConnectMode != 3) {
                    sendKSW_0x00_0x63(0, 2);
                }
                if (z) {
                    this.mEventHandler.postDelayed(new Runnable() {
                        public final void run() {
                            EventService.this.lambda$thirdPhoneOff$10$EventService();
                        }
                    }, 1000);
                } else {
                    muteMusicAndAlarm(false);
                }
                muteAutoNavi(false);
            }

            public /* synthetic */ void lambda$thirdPhoneOff$10$EventService() {
                muteMusicAndAlarm(false);
            }

            public void muteMusicAndAlarm(boolean z) {
                AudioManager audioManager2 = (AudioManager) getSystemService("audio");
                this.mAudioMgr = audioManager2;
                if (z) {
                    if (audioManager2 != null) {
                        audioManager2.setStreamVolume(3, 0, 0);
                        this.mAudioMgr.setStreamVolume(4, 0, 0);
                    }
                    muteAutoNavi(true);
                } else {
                    if (audioManager2 != null) {
                        int streamMaxVolume = audioManager2.getStreamMaxVolume(3);
                        if (!this.hasIgoDownVolume) {
                            this.mAudioMgr.setStreamVolume(3, streamMaxVolume, 0);
                        }
                        this.mAudioMgr.setStreamVolume(4, this.mAudioMgr.getStreamMaxVolume(4), 0);
                    }
                    muteAutoNavi(false);
                }
                this.mMuteMusicZlinkPhone = z;
            }

            public void enterZlinkCarplay() {
                if (this.b_Original_View) {
                    sendKSW_0x00_0x69((byte) 18, (byte) 1, (byte) 0);
                    sendMode(EventUtils.eSrcMode.SRC_CARPLAY);
                }
            }

            private void muteAutoNavi(boolean z) {
                Intent intent = new Intent();
                intent.setAction("AUTONAVI_STANDARD_BROADCAST_RECV");
                intent.putExtra("KEY_TYPE", 10047);
                intent.putExtra("EXTRA_CASUAL_MUTE", z ? 1 : 0);
                sendBroadcast(intent);
            }

            public void clearSoundPid(String str) {
                Log.d(TAG, "clearSoundPid packageName = " + str);
                if (this.soundNaviPkgList != null && isNaviPkg(str)) {
                    this.mEventHandler.postDelayed(new Runnable() {
                        public final void run() {
                            EventService.this.lambda$clearSoundPid$11$EventService();
                        }
                    }, 1000);
                }
            }

            public /* synthetic */ void lambda$clearSoundPid$11$EventService() {
                if (this.soundNaviPkgList.size() > 0) {
                    sendKSW_0x00_0x69((byte) 19, (byte) 0, (byte) 0);
                    this.soundNaviPkgList.clear();
                    this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_CHECK_NAVI_ALIVE);
                }
            }

            public int getZlinkLinkMode() {
                return this.mZlinLinkMode;
            }

            public void zlinkMicStart() {
                Message obtainMessage = this.mEventHandler.obtainMessage();
                obtainMessage.what = EventUtils.WHAT_SET_CARPLAY_PHONE_STATUS_SYS_EVT;
                obtainMessage.arg1 = 1;
                this.mEventHandler.sendMessage(obtainMessage);
            }

            public void zlinkMicStop() {
                Message obtainMessage = this.mEventHandler.obtainMessage();
                obtainMessage.what = EventUtils.WHAT_SET_CARPLAY_PHONE_STATUS_SYS_EVT;
                obtainMessage.arg1 = 0;
                this.mEventHandler.sendMessage(obtainMessage);
            }

            public boolean isNotYIYUan() {
                return Build.MODEL.equals("GT6") || Build.MODEL.equals("GT6-CAR");
            }

            /* access modifiers changed from: private */
            public void sendHandInitData() {
                Log.i(TAG, "sendHandInitData");
                if (this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_BOOT_MODE_MEMORY_INDEX, 0) == 1) {
                    ksw_original_start();
                }
                sendKSW_0x00_0x68(1, 0);
                send0x70FactorySettings(EventUtils.MCU_KEY_NUM8);
                ksw_initSendVol();
                ksw_initSendVol_page2_info();
                ksw_Send8902BackcarMod_0x2D();
                ksw_Send8902BackcarMod(true);
                ksw_initSendBL();
                sendBeatTimer_KSW(1);
                ksw_Send8902BackcarMod_0x07();
                ksw_Send8902BackcarMod_0x08();
                ksw_Send8902BackcarMod_0x09();
                ksw_Send8902BackcarMod_0x0a();
                ksw_Send8902BackcarMod_0x1d();
                ksw_Send8902BackcarMod_0x0b();
                ksw_Send8902BackcarMod_0x0b_btIndex();
                ksw_Send8902BackcarMod_0x0c();
                ksw_Send8902BackcarMod_0x17();
                ksw_Send8902BackcarMod_0x18();
                ksw_Send8902BackcarMod_0x1a();
                ksw_Send8902BackcarMod_0x1b();
                ksw_Send8902BackcarMod_0x1c();
                ksw_Send8902BackcarMod_0x1e();
                ksw_Send8902BackcarMod_0x28();
                ksw_Send8902BackcarMod_0x26();
                ksw_Send8902BackcarMod_0x33();
                ksw_Send8902BackcarMod_0x34();
                ksw_Send8902BackcarMod_0x35();
                ksw_Send8902BackcarMod_0x25();
                ksw_Send8902BackcarMod_0x1f();
                ksw_Send8902BackcarMod_0x20();
                ksw_Send8902BackcarMod_0x2B();
                ksw_Send8902BackcarMod_0x36();
                ksw_Send8902BackcarMod_0x37();
                ksw_Send8902BackcarMod_0x38();
                ksw_Send8902BackcarMod_0x39();
                ksw_Send8902BackcarMod_0x40();
                ksw_Send8902BackcarMod_0x41();
                ksw_Send8902BackcarMod_0x29();
                ksw_Send8902BackcarMod_0x31();
                ksw_Send8902BackcarMod_0x24();
                ksw_Send8902BackcarMod_0x32();
                if (Customer.getCarFactoryIndex(this) == 5) {
                    kswSendSpecialSetLR();
                }
                timeSetChange_KSW();
                this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_CLOCK_CONTROL);
                this.mEventHandler.sendEmptyMessage(EventUtils.KSW_HANDLER_CLOCK_CONTROL);
                sendKSWInterfaceState();
                if (EventUtils.LETTER_CARPLAY_MODE_PACKAGE_NAME.equals(EventUtils.getTopPackageName(mAppContext))) {
                    sendKSW_0x00_0x67_third();
                }
                if (this.show360Dialog) {
                    send360Status(true);
                }
                this.handshakeFinish = true;
                byte b = this.kesaiwei_m_iMode;
                if (b > -1) {
                    byte[] bArr = {-14, 0, EventUtils.MCU_KEY1_2, 1, b};
                    SendThread sendThread = this.mSendThread;
                    if (sendThread != null) {
                        sendThread.notifyToSend(bArr);
                    }
                }
                this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_CHECK_MCU_VERSION);
                this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_CHECK_MCU_VERSION, 3000);
            }

            /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v8, resolved type: byte} */
            /* JADX WARNING: Multi-variable type inference failed */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public static byte getCRC8(byte[] r4) {
                /*
                    r0 = 42
                    r1 = 0
                L_0x0003:
                    int r2 = r4.length
                    if (r1 >= r2) goto L_0x001e
                    byte r2 = r4[r1]
                    r0 = r0 ^ r2
                    r2 = 8
                L_0x000b:
                    if (r2 <= 0) goto L_0x001b
                    r3 = r0 & 128(0x80, float:1.794E-43)
                    if (r3 == 0) goto L_0x0016
                    int r0 = r0 << 1
                    r0 = r0 ^ 29
                    goto L_0x0018
                L_0x0016:
                    int r0 = r0 << 1
                L_0x0018:
                    int r2 = r2 + -1
                    goto L_0x000b
                L_0x001b:
                    int r1 = r1 + 1
                    goto L_0x0003
                L_0x001e:
                    r4 = r0 & 255(0xff, float:3.57E-43)
                    byte r4 = (byte) r4
                    return r4
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.getCRC8(byte[]):byte");
            }

            public void changeLRCopilotVolume(boolean z) {
                int settingInt = getSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, 30);
                int i = -1;
                int i2 = z ? settingInt + 1 : settingInt - 1;
                if (i2 > 40) {
                    i2 = 40;
                }
                if (i2 < 0) {
                    i2 = 0;
                }
                SendVol_KSW(false, 1, 1, i2);
                putSettingInt(EventUtils.KEY_KSW_VOL_VAL_00, i2);
                if (this.tvCurrentVolume != null) {
                    int recordInteger = this.mSysProviderOpt.getRecordInteger(SysProviderOpt.KSW_LANDROVER_THEME_BACKGROUND_INDEX, 0);
                    TextView textView = this.tvCurrentVolume;
                    if (recordInteger != 0) {
                        i = ViewCompat.MEASURED_STATE_MASK;
                    }
                    textView.setTextColor(i);
                    TextView textView2 = this.tvCurrentVolume;
                    textView2.setText(i2 + BuildConfig.FLAVOR);
                    this.mEventHandler.removeMessages(WHAT_SHOW_VOLUME_WND);
                    this.mEventHandler.sendEmptyMessage(WHAT_SHOW_VOLUME_WND);
                }
            }

            public void disableGoogleApps() {
                if (this.disablingGoogle) {
                    this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_DISABLE_GOOGLE_APKS);
                    this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_DISABLE_GOOGLE_APKS, 1000);
                    return;
                }
                boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.MAISILUO_SYS_GOOGLEPLAY, false);
                Log.d(TAG, "disableGoogleApps showGoogle = " + recordBoolean);
                new Thread(new Runnable(recordBoolean) {
                    public final /* synthetic */ boolean f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        EventService.this.lambda$disableGoogleApps$12$EventService(this.f$1);
                    }
                }).start();
            }

            public /* synthetic */ void lambda$disableGoogleApps$12$EventService(boolean z) {
                String str;
                String[] stringArray = getResources().getStringArray(R.array.google_packages_name);
                if (stringArray != null && stringArray.length > 0) {
                    this.disablingGoogle = true;
                    for (int i = 0; i < stringArray.length; i++) {
                        if (z) {
                            str = "pm enable " + stringArray[i];
                        } else {
                            str = "pm disable " + stringArray[i];
                        }
                        runCmd(str);
                        do {
                        } while (!getCmdResult());
                        try {
                            Thread.sleep(200);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    this.disablingGoogle = false;
                }
            }

            public void disableGoogleApps2() {
                boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.MAISILUO_SYS_GOOGLEPLAY, false);
                String[] stringArray = getResources().getStringArray(R.array.google_packages_name);
                if (stringArray != null && stringArray.length > 0) {
                    for (String enableApk2 : stringArray) {
                        enableApk2(enableApk2, recordBoolean);
                    }
                }
            }

            private void sendBackCarStateToZlink(boolean z) {
                Intent intent = new Intent(EventUtils.ZXW_ACTION_SEND_BACKCAR_START_TO_ZLINK);
                boolean recordBoolean = this.mSysProviderOpt.getRecordBoolean(SysProviderOpt.KSW_REVEERSING_MUTE_SELECT_INDEX, false);
                if (z) {
                    if (recordBoolean) {
                        intent.putExtra("muteMedia", true);
                    } else {
                        intent.putExtra("muteMedia", false);
                    }
                    sendBroadcast(intent);
                    return;
                }
                sendBroadcast(new Intent(EventUtils.ZXW_ACTION_SEND_BACKCAR_END_TO_ZLINK));
                if (this.show360CarplayConnected) {
                    this.show360CarplayConnected = false;
                    EventUtils.startZlink(this);
                }
            }

            /* JADX WARNING: Removed duplicated region for block: B:17:0x006e A[LOOP:1: B:15:0x006b->B:17:0x006e, LOOP_END] */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void copyMedia() {
                /*
                    r6 = this;
                    java.lang.String r0 = "EventService"
                    java.lang.String r1 = "copyMedia"
                    android.util.Log.d(r0, r1)
                    java.io.File r1 = new java.io.File
                    java.lang.String r2 = "/mnt/privdata1/media"
                    r1.<init>(r2)
                    boolean r2 = r1.exists()
                    if (r2 == 0) goto L_0x00b5
                    java.lang.String[] r1 = r1.list()
                    java.io.File r2 = new java.io.File
                    java.lang.String r3 = "/sdcard/Media"
                    r2.<init>(r3)
                    boolean r3 = r2.exists()
                    if (r3 == 0) goto L_0x002e
                    boolean r3 = r2.isDirectory()
                    if (r3 == 0) goto L_0x002e
                    r2.delete()
                L_0x002e:
                    r2.mkdir()
                    r3 = 1
                    r2.setWritable(r3)
                    r2.setReadable(r3)
                    java.lang.StringBuilder r3 = new java.lang.StringBuilder
                    r3.<init>()
                    java.lang.String r4 = "path = "
                    r3.append(r4)
                    java.lang.String r4 = r2.getPath()
                    r3.append(r4)
                    java.lang.String r3 = r3.toString()
                    android.util.Log.d(r0, r3)
                    boolean r3 = r2.canWrite()
                    if (r3 == 0) goto L_0x005c
                    boolean r3 = r2.canRead()
                    if (r3 != 0) goto L_0x006a
                L_0x005c:
                    java.lang.String r2 = r2.getPath()
                    r6.runCmd(r2)
                L_0x0063:
                    boolean r2 = r6.getCmdResult()
                    if (r2 != 0) goto L_0x006a
                    goto L_0x0063
                L_0x006a:
                    r2 = 0
                L_0x006b:
                    int r3 = r1.length
                    if (r2 >= r3) goto L_0x00b5
                    java.lang.StringBuilder r3 = new java.lang.StringBuilder
                    r3.<init>()
                    java.lang.String r4 = "file = "
                    r3.append(r4)
                    r4 = r1[r2]
                    r3.append(r4)
                    java.lang.String r3 = r3.toString()
                    android.util.Log.d(r0, r3)
                    java.lang.StringBuilder r3 = new java.lang.StringBuilder
                    r3.<init>()
                    java.lang.String r4 = "/mnt/privdata1/media/"
                    r3.append(r4)
                    r4 = r1[r2]
                    r3.append(r4)
                    java.lang.String r3 = r3.toString()
                    java.lang.StringBuilder r4 = new java.lang.StringBuilder
                    r4.<init>()
                    java.lang.String r5 = "/sdcard/Media/"
                    r4.append(r5)
                    r5 = r1[r2]
                    r4.append(r5)
                    java.lang.String r4 = r4.toString()
                    r6.copyFile(r3, r4)
                    java.lang.String r3 = "copy media"
                    android.util.Log.d(r0, r3)
                    int r2 = r2 + 1
                    goto L_0x006b
                L_0x00b5:
                    java.lang.Runtime r0 = java.lang.Runtime.getRuntime()     // Catch:{ Exception -> 0x00bf }
                    java.lang.String r1 = "sync"
                    r0.exec(r1)     // Catch:{ Exception -> 0x00bf }
                    goto L_0x00c3
                L_0x00bf:
                    r0 = move-exception
                    r0.printStackTrace()
                L_0x00c3:
                    return
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.copyMedia():void");
            }

            /* JADX WARNING: Removed duplicated region for block: B:17:0x006e A[LOOP:1: B:15:0x006b->B:17:0x006e, LOOP_END] */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void copyManual() {
                /*
                    r6 = this;
                    java.lang.String r0 = "EventService"
                    java.lang.String r1 = "copyManual"
                    android.util.Log.d(r0, r1)
                    java.io.File r1 = new java.io.File
                    java.lang.String r2 = "/mnt/privdata1/UserManual"
                    r1.<init>(r2)
                    boolean r2 = r1.exists()
                    if (r2 == 0) goto L_0x00b5
                    java.lang.String[] r1 = r1.list()
                    java.io.File r2 = new java.io.File
                    java.lang.String r3 = "/sdcard/UserManual"
                    r2.<init>(r3)
                    boolean r3 = r2.exists()
                    if (r3 == 0) goto L_0x002e
                    boolean r3 = r2.isDirectory()
                    if (r3 == 0) goto L_0x002e
                    r2.delete()
                L_0x002e:
                    r2.mkdir()
                    r3 = 1
                    r2.setWritable(r3)
                    r2.setReadable(r3)
                    java.lang.StringBuilder r3 = new java.lang.StringBuilder
                    r3.<init>()
                    java.lang.String r4 = "path = "
                    r3.append(r4)
                    java.lang.String r4 = r2.getPath()
                    r3.append(r4)
                    java.lang.String r3 = r3.toString()
                    android.util.Log.d(r0, r3)
                    boolean r3 = r2.canWrite()
                    if (r3 == 0) goto L_0x005c
                    boolean r3 = r2.canRead()
                    if (r3 != 0) goto L_0x006a
                L_0x005c:
                    java.lang.String r2 = r2.getPath()
                    r6.runCmd(r2)
                L_0x0063:
                    boolean r2 = r6.getCmdResult()
                    if (r2 != 0) goto L_0x006a
                    goto L_0x0063
                L_0x006a:
                    r2 = 0
                L_0x006b:
                    int r3 = r1.length
                    if (r2 >= r3) goto L_0x00b5
                    java.lang.StringBuilder r3 = new java.lang.StringBuilder
                    r3.<init>()
                    java.lang.String r4 = "file = "
                    r3.append(r4)
                    r4 = r1[r2]
                    r3.append(r4)
                    java.lang.String r3 = r3.toString()
                    android.util.Log.d(r0, r3)
                    java.lang.StringBuilder r3 = new java.lang.StringBuilder
                    r3.<init>()
                    java.lang.String r4 = "/mnt/privdata1/UserManual/"
                    r3.append(r4)
                    r4 = r1[r2]
                    r3.append(r4)
                    java.lang.String r3 = r3.toString()
                    java.lang.StringBuilder r4 = new java.lang.StringBuilder
                    r4.<init>()
                    java.lang.String r5 = "/sdcard/UserManual/"
                    r4.append(r5)
                    r5 = r1[r2]
                    r4.append(r5)
                    java.lang.String r4 = r4.toString()
                    r6.copyFile(r3, r4)
                    java.lang.String r3 = "copy pdf"
                    android.util.Log.d(r0, r3)
                    int r2 = r2 + 1
                    goto L_0x006b
                L_0x00b5:
                    java.lang.Runtime r0 = java.lang.Runtime.getRuntime()     // Catch:{ Exception -> 0x00bf }
                    java.lang.String r1 = "sync"
                    r0.exec(r1)     // Catch:{ Exception -> 0x00bf }
                    goto L_0x00c3
                L_0x00bf:
                    r0 = move-exception
                    r0.printStackTrace()
                L_0x00c3:
                    return
                */
                throw new UnsupportedOperationException("Method not decompiled: com.szchoiceway.eventcenter.EventService.copyManual():void");
            }

            private void initLRBottomViewFilter() {
                this.mLRFilterPackages = Arrays.asList(getResources().getStringArray(R.array.lr_hide_bottom_view_packages_name));
                this.mLRFilterClasses = Arrays.asList(getResources().getStringArray(R.array.lr_hide_bottom_view_class_name));
            }

            /* access modifiers changed from: private */
            public void refreshLRBottomViewPChk(boolean z) {
                LandRoverBottomView landRoverBottomView = this.mLRBottomView;
                if (landRoverBottomView != null) {
                    landRoverBottomView.refreshLRChkP(z);
                }
            }

            private void startCheckThread() {
                new CheckUtil(this).startThread();
            }

            /* access modifiers changed from: private */
            public void setDayNightMode(int i) {
                Log.i(TAG, "setDayNightMode iMode = " + i);
                boolean z = true;
                if (i == 1) {
                    z = false;
                } else if (i != 2) {
                    z = this.mLAMPConntected;
                }
                Intent intent = new Intent(EventUtils.ACTION_UIMODE_CHANGED);
                intent.putExtra("mode", z);
                sendBroadcastAsUser(intent, UserHandle.ALL);
            }

            public void setDHWCid(String str) {
                try {
                    FileOutputStream fileOutputStream = new FileOutputStream(new File("/sys/touch_type/mmc_dummy"));
                    fileOutputStream.write(str.getBytes());
                    fileOutputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            public void bindBtService() {
                this.mEventHandler.removeMessages(EventUtils.KSW_HANDLER_BT_SERVICE_CHECK);
                if (!EventUtils.isServiceAlive(this, EventUtils.BT_MODE_SERVICE_NAME) || !this.mBindBtService) {
                    Intent intent = new Intent();
                    intent.setAction(EventUtils.BT_MODE_SERVICE_NAME);
                    intent.setPackage(EventUtils.BT_MODE_PACKAGE_NAME);
                    bindService(intent, this.btSc, 1);
                    this.mEventHandler.sendEmptyMessageDelayed(EventUtils.KSW_HANDLER_BT_SERVICE_CHECK, 2000);
                }
            }

            public void unBindBtService() {
                if (this.mBindBtService) {
                    unbindService(this.btSc);
                }
            }

            public SendThread getSendThread() {
                return this.mSendThread;
            }

            public static EventService getInstance() {
                return instance;
            }
        }
